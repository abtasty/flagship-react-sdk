{"version":3,"sources":["components/common/CodeBlock.tsx","components/AppContainer/components/DemoInitialization/components/qa/PlayConfig/index.tsx","components/AppContainer/components/DemoInitialization/components/qa/PlayVisitorData/index.tsx","config/index.tsx","components/AppContainer/components/DemoInitialization/components/normal/PlayVisitorData/index.tsx","components/AppContainer/components/DemoInitialization/components/normal/PlayConfig/index.tsx","components/AppContainer/components/DemoInitialization/index.tsx","components/AppContainer/components/DemoUseFsActivate/components/normal/index.tsx","components/AppContainer/components/DemoUseFsActivate/components/qa/index.tsx","components/AppContainer/components/DemoUseFsActivate/index.tsx","components/AppContainer/components/DemoUseFsModifications/components/normal/PlayWithParams/index.tsx","components/AppContainer/components/DemoUseFsModifications/components/qa/PlayWithParams/index.tsx","components/AppContainer/components/DemoUseFsModifications/index.tsx","components/AppContainer/components/DemoUseFsSynchronize/components/normal/index.tsx","components/AppContainer/components/DemoUseFsSynchronize/index.tsx","components/AppContainer/components/DemoUseFlagship/components/normal/PlayWithHits/index.tsx","components/AppContainer/components/DemoUseFlagship/components/qa/PlayWithHits/index.tsx","components/AppContainer/components/DemoUseFlagship/components/qa/PlayWithModifications/index.tsx","components/AppContainer/components/DemoUseFlagship/components/normal/PlayWithModifications/index.tsx","components/AppContainer/components/DemoUseFlagship/index.tsx","components/AppContainer/components/DemoErrorBoundary/index.tsx","components/AppContainer/index.tsx","components/AppHeader/index.tsx","components/QaHeader/components/SettingsModal/index.tsx","components/QaHeader/index.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/Flagship-horizontal-product-white.png"],"names":["SyntaxHighlighter","registerLanguage","jsx","CodeBlock","className","codeString","language","style","darcula","showLineNumbers","PlayConfig","useContext","SettingContext","currentSettings","setSettings","React","useState","hasError","setError","initialValues","envId","settings","sdkConfig","validate","values","errors","onSubmit","setSubmitting","handleSubmit","handleChange","setFieldValue","handleBlur","touched","isValid","Form","noValidate","Group","as","Col","md","controlId","Label","Control","type","name","value","onChange","isInvalid","Feedback","id","placeholder","locale","height","width","error","jsObject","body","fontSize","Button","disabled","variant","cursor","PlayVisitorData","vId","visitorData","vContext","context","config","fetchNow","enableConsoleLogs","enableErrorLayout","nodeEnv","isAwesome","isEvil","sandbox","visitorId","currSettings","newSettings","setNewSettings","handleVisitorContext","e","node","JSON","parse","currentTarget","parentElement","innerText","temp","checked","Object","keys","keyToRemove","entries","reduce","reducer","key","includes","display","alignItems","marginLeft","target","filter","i","map","Check","hasOwnProperty","label","stringify","justifyContent","onClick","QA","setting","toSubmit","DemoInitialization","Row","Alert","Heading","borderBottom","marginBottom","paddingBottom","enabled","PlayWithActivate","toggle","setToggle","useFsActivate","PlayWithActivateQA","modificationToActivate","setModificationToActivate","DemoUseFsActivate","PlayWithParams","fsModifications","useFsModifications","defaultValue","activate","backgroundColor","color","href","fsParams","setFsParams","output","viewOnly","DemoUseFsModifications","PlayWithSynchronize","listenedValue","setValue","activateAllModifications","setActivate","useFsSynchronize","DemoUseFsSynchronize","PlayWithHits","useFlagship","fsHit","status","hit","multipleHitBundle","multipleCodeString","multipleComponent","sendMultiple","data","transactionId","affiliation","totalRevenue","shippingCost","shippingMethod","currency","taxes","paymentMethod","itemCount","couponCode","documentLocation","pageTitle","category","action","transactionHitBundle","simpleCodeString","simpleComponent","send","screenHitBundle","itemHitBundle","price","code","quantity","eventHitBundle","currentTestedHit","setHitToTest","Nav","defaultActiveKey","Item","Link","eventKey","payloads","transaction","screen","event","item","hasError2","setError2","hitPayload","setHitPayload","hitsPayload","setHitsPayload","useEffect","enableReinitialize","PlayWithModifications","modifications","requested","DemoUseFlagship","fsStatus","DemoErrorBoundary","triggerError","setTriggerError","Error","AppContainer","Container","AppHeader","setQA","Navbar","fixed","Brand","alt","src","Logo","NavDropdown","title","inline","SettingsModal","onHide","show","Modal","size","aria-labelledby","Header","closeButton","Title","Body","QaHeader","settingsModal","createContext","App","Provider","onInitStart","console","log","onInitDone","onUpdate","loadingComponent","xs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.646e2a87.chunk.js","sourcesContent":["import React from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\nSyntaxHighlighter.registerLanguage('jsx', jsx);\n\ntype CodeBlockProps = {\n    className?: string;\n    codeString: string;\n};\n\nconst CodeBlock: React.FC<CodeBlockProps> = ({ className, codeString }) => {\n    return (\n        <div className={className}>\n            <SyntaxHighlighter\n                language=\"javascript\"\n                style={darcula}\n                showLineNumbers\n            >\n                {codeString}\n            </SyntaxHighlighter>\n        </div>\n    );\n};\n\nexport default CodeBlock;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { SettingContext, AppSettings } from '../../../../../../../App';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nconst PlayConfig: React.FC = () => {\n    const { currentSettings, setSettings } = useContext(\n        SettingContext\n    ) as AppSettings;\n\n    const [hasError, setError] = React.useState(false);\n    return (\n        <Formik\n            initialValues={{\n                envId: currentSettings.envId,\n                settings: currentSettings.sdkConfig\n            }}\n            validate={(values) => {\n                const errors: any = {};\n                if (!values.envId) {\n                    errors.envId = 'Required';\n                }\n                return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n                setSubmitting(false);\n                setSettings({\n                    ...currentSettings,\n                    envId: values.envId,\n                    sdkConfig: { ...values.settings }\n                });\n            }}\n        >\n            {({\n                handleSubmit,\n                handleChange,\n                handleBlur,\n                setFieldValue,\n                values,\n                touched,\n                isValid,\n                errors\n            }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                    <Form.Group as={Col} md=\"12\" controlId=\"envIdForm\">\n                        <Form.Label>Environment ID</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            name=\"envId\"\n                            value={values.envId}\n                            onChange={handleChange}\n                            isValid={touched.envId && !errors.envId}\n                            isInvalid={!!errors.envId}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            {errors.envId}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                        <Form.Label>\n                            \"<i>config</i>\" prop\n                        </Form.Label>\n                        <JSONInput\n                            id=\"settings\"\n                            placeholder={values.settings}\n                            locale={locale}\n                            height=\"550px\"\n                            width=\"100%\"\n                            onChange={({ error, jsObject }) => {\n                                if (!error) {\n                                    setFieldValue(\n                                        'settings',\n                                        jsObject || {},\n                                        true\n                                    );\n                                    setError(false);\n                                } else {\n                                    setError(true);\n                                }\n                            }}\n                            style={{\n                                body: {\n                                    fontSize: '16px'\n                                }\n                            }}\n                        />\n                    </Form.Group>\n                    <div className=\"flex justify-end ph3\">\n                        <Button\n                            disabled={hasError}\n                            variant=\"secondary\"\n                            type=\"submit\"\n                            style={{\n                                cursor: hasError ? 'not-allowed' : 'pointer'\n                            }}\n                        >\n                            Apply change\n                        </Button>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default PlayConfig;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { SettingContext, AppSettings } from '../../../../../../../App';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayVisitorData: React.FC = () => {\n    const { currentSettings, setSettings } = useContext(\n        SettingContext\n    ) as AppSettings;\n    const [hasError, setError] = React.useState(false);\n    return (\n        <Formik\n            initialValues={{\n                vId: currentSettings.visitorData.id,\n                vContext: currentSettings.visitorData.context\n            }}\n            validate={(values) => {\n                const errors: any = {};\n                if (!values.vId) {\n                    errors.vId = 'Required';\n                }\n                return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n                setSubmitting(false);\n                setSettings({\n                    ...currentSettings,\n                    visitorData: {\n                        id: values.vId,\n                        context: values.vContext || {}\n                    }\n                });\n            }}\n        >\n            {({\n                handleSubmit,\n                handleChange,\n                handleBlur,\n                setFieldValue,\n                values,\n                touched,\n                isValid,\n                errors\n            }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                    <Form.Group as={Col} md=\"12\" controlId=\"validationFormik01\">\n                        <Form.Label>Visitor ID</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            name=\"vId\"\n                            value={values.vId}\n                            onChange={handleChange}\n                            isValid={touched.vId && !errors.vId}\n                            isInvalid={!!errors.vId}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            {errors.vId}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\n                        <Form.Label>Visitor Context</Form.Label>\n                        <JSONInput\n                            id=\"a_unique_id\"\n                            placeholder={values.vContext}\n                            locale={locale}\n                            height=\"550px\"\n                            width=\"100%\"\n                            onChange={({ error, jsObject }) => {\n                                if (!error) {\n                                    setFieldValue(\n                                        'vContext',\n                                        jsObject || {},\n                                        true\n                                    );\n                                    setError(false);\n                                } else {\n                                    setError(true);\n                                }\n                            }}\n                            style={{\n                                body: {\n                                    fontSize: '16px'\n                                }\n                            }}\n                        />\n                    </Form.Group>\n                    <div className=\"flex justify-end ph3\">\n                        <Button\n                            disabled={hasError}\n                            variant=\"secondary\"\n                            type=\"submit\"\n                            style={{\n                                cursor: hasError ? 'not-allowed' : 'pointer'\n                            }}\n                        >\n                            Apply change\n                        </Button>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default PlayVisitorData;\n","import { FlagshipReactSdkConfig } from '../../../../dist';\n\nconst sdkSettings: FlagshipReactSdkConfig = {\n    fetchNow: true,\n    enableConsoleLogs: true,\n    enableErrorLayout: true,\n    nodeEnv: 'production'\n};\n\nconst config = {\n    envId: 'bn1ab7m56qolupi5sa0g',\n    sdkConfig: sdkSettings,\n    visitorData: {\n        id: 'test-vid',\n        context: { isAwesome: false, isEvil: false }\n    },\n    sandbox: {\n        config: {\n            fetchNow: true,\n            enableConsoleLogs: true,\n            enableErrorLayout: true\n        },\n        envId: ['bn1ab7m56qolupi5sa0g_fake_1', 'bn1ab7m56qolupi5sa0g_fake_2'],\n        nodeEnv: ['production', 'development'],\n        visitorId: ['test-vid', 'test-vid_2', 'test-vid_3']\n    }\n};\nexport default config;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport {\n    SettingContext,\n    AppSettings,\n    SdkSettings\n} from '../../../../../../../App';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport config from '../../../../../../../config';\n\nconst PlayVisitorData: React.FC = () => {\n    const { currentSettings: currSettings, setSettings } = useContext(\n        SettingContext\n    ) as AppSettings;\n\n    const [newSettings, setNewSettings] = React.useState<SdkSettings>({\n        ...currSettings\n    });\n\n    const handleVisitorId = (e) =>\n        setNewSettings({\n            ...newSettings,\n            visitorData: {\n                ...newSettings.visitorData,\n                id: e.target.value\n            }\n        });\n\n    const handleVisitorContext = (e) => {\n        const node = JSON.parse(e.currentTarget.parentElement.innerText);\n        const temp = { ...newSettings };\n        if (e.currentTarget.checked) {\n            setNewSettings({\n                ...newSettings,\n                visitorData: {\n                    ...newSettings.visitorData,\n                    context: {\n                        ...newSettings.visitorData.context,\n                        [Object.keys(node)[0]]: true\n                    }\n                }\n            });\n        } else {\n            const keyToRemove = Object.keys(node)[0];\n            setNewSettings({\n                ...newSettings,\n                visitorData: {\n                    ...newSettings.visitorData,\n                    context: Object.entries(temp.visitorData.context).reduce(\n                        (reducer, [key, value]) => {\n                            if (key === keyToRemove) {\n                                if (\n                                    Object.keys(\n                                        config.visitorData.context\n                                    ).includes(keyToRemove)\n                                ) {\n                                    return { ...reducer, [key]: false };\n                                }\n                                return reducer;\n                            }\n                            return { ...reducer, [key]: value };\n                        },\n                        {}\n                    )\n                }\n            });\n        }\n    };\n    return (\n        <>\n            <Form>\n                <Form.Group\n                    controlId=\"initForm.ControlSelect2\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>visitorId: </div>\n                    <Form.Control as=\"select\" onChange={handleVisitorId}>\n                        <option key={currSettings.visitorData.id}>\n                            {currSettings.visitorData.id}\n                        </option>\n                        {config.sandbox.visitorId\n                            .filter((i) => i != currSettings.visitorData.id)\n                            .map((id) => (\n                                <option key={id}>{id}</option>\n                            ))}\n                    </Form.Control>\n                </Form.Group>\n                <div className=\"fsAnchor\" id=\"playWithVisitorContext\" />\n                <Form.Group controlId=\"initForm.ControlSelect3\">\n                    <Form.Label>visitor context</Form.Label>\n                    {Object.entries({\n                        ...config.visitorData.context,\n                        ...newSettings.visitorData.context\n                    }).map(([key, value]) => (\n                        <Form.Check\n                            key={key}\n                            type=\"checkbox\"\n                            id={`default-${key}`}\n                            checked={\n                                newSettings.visitorData.context.hasOwnProperty(\n                                    key\n                                )\n                                    ? !!value\n                                    : false\n                            }\n                            onChange={handleVisitorContext}\n                            label={JSON.stringify({ [key]: value })}\n                        />\n                    ))}\n                </Form.Group>\n            </Form>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'flex-end'\n                }}\n            >\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => setSettings({ ...newSettings })}\n                >\n                    Apply change\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default PlayVisitorData;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport config from '../../../../../../../config';\nimport {\n    SettingContext,\n    SdkSettings,\n    AppSettings\n} from '../../../../../../../App';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nconst PlayConfig: React.FC = () => {\n    const { currentSettings: currSettings, setSettings, QA } = useContext(\n        SettingContext\n    ) as AppSettings;\n    const [newSettings, setNewSettings] = React.useState<SdkSettings>({\n        ...currSettings\n    });\n\n    const handleEnvId = (e) =>\n        setNewSettings({ ...newSettings, envId: e.target.value });\n\n    const handleNodeEnv = (e) =>\n        setNewSettings({\n            ...newSettings,\n            sdkConfig: {\n                ...newSettings.sdkConfig,\n                nodeEnv: e.target.value\n            }\n        });\n    return (\n        <>\n            <Form>\n                <Form.Group\n                    controlId=\"initForm.Control1.1\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>envId: </div>\n                    <Form.Control as=\"select\" onChange={handleEnvId}>\n                        <option key={newSettings.envId}>\n                            {newSettings.envId}\n                        </option>\n                        {config.sandbox.envId\n                            .filter((i) => i != newSettings.envId)\n                            .map((id) => (\n                                <option key={id}>{id}</option>\n                            ))}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group\n                    controlId=\"initForm.Control1.11\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>nodeEnv: </div>\n                    <Form.Control as=\"select\" onChange={handleNodeEnv}>\n                        <option key={newSettings.sdkConfig.nodeEnv}>\n                            {newSettings.sdkConfig.nodeEnv}\n                        </option>\n                        {config.sandbox.nodeEnv\n                            .filter((i) => i != newSettings.sdkConfig.nodeEnv)\n                            .map((id) => (\n                                <option key={id}>{id}</option>\n                            ))}\n                    </Form.Control>\n                </Form.Group>\n                {Object.keys({\n                    ...config.sandbox.config,\n                    ...newSettings.sdkConfig\n                })\n                    .filter((i) => i != 'nodeEnv')\n                    .map((setting) => (\n                        <Form.Group controlId={setting + 'Form'}>\n                            <Form.Check\n                                type=\"checkbox\"\n                                checked={\n                                    !!newSettings.sdkConfig[setting] || false\n                                }\n                                onChange={(e) => {\n                                    const toSubmit = {\n                                        ...newSettings,\n                                        sdkConfig: {\n                                            ...newSettings.sdkConfig,\n                                            [setting]: e.currentTarget.checked\n                                        }\n                                    };\n                                    if (\n                                        typeof newSettings.sdkConfig[setting] !=\n                                        'boolean'\n                                    ) {\n                                        delete toSubmit.sdkConfig[setting];\n                                    }\n                                    setNewSettings(toSubmit);\n                                }}\n                                label={`${setting}=${newSettings.sdkConfig[setting]}`}\n                            />\n                        </Form.Group>\n                    ))}\n            </Form>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'flex-end'\n                }}\n            >\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => setSettings({ ...newSettings })}\n                >\n                    Apply change\n                </Button>\n            </div>\n            <div>Since we have set those settings:</div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`${JSON.stringify(\n                    currSettings.sdkConfig,\n                    null,\n                    2\n                )}`}\n            />\n            <div>\n                When you change those values, you can notice the behavior of the\n                SDK, on logs & network.\n            </div>\n            <div className=\"mb5\">\n                It will impact the output of Flagship SDK Hooks as well, take a\n                look below.\n            </div>\n        </>\n    );\n};\n\nexport default PlayConfig;\n","import CodeBlock from '../../../common/CodeBlock';\nimport React, { useContext } from 'react';\nimport { Alert, Button, Col, Form, Row } from 'react-bootstrap';\n\nimport { AppSettings, SdkSettings, SettingContext } from '../../../../App';\nimport config from '../../../../config';\nimport PlayConfigQA from './components/qa/PlayConfig';\nimport PlayVisitorDataQA from './components/qa/PlayVisitorData';\nimport PlayVisitorData from './components/normal/PlayVisitorData';\nimport PlayConfig from './components/normal/PlayConfig';\n\nexport const DemoInitialization = () => {\n    const name = 'initialization';\n    const { currentSettings: currSettings, setSettings, QA } = useContext(\n        SettingContext\n    ) as AppSettings;\n    const [newSettings, setNewSettings] = React.useState<SdkSettings>({\n        ...currSettings\n    });\n\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={name} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{name}</Alert.Heading>\n                    <p>\n                        The <b>{name}</b> is proceed with{' '}\n                        <b>FlagshipProvider</b>. In this demo app, it is plugged\n                        like so:\n                    </p>\n                    <CodeBlock\n                        className=\"mv3\"\n                        codeString={`import React from 'react';\nimport { FlagshipProvider } from \"@flagship.io/react-sdk\";\n\nconst App: React.FC = () => (\n  <>\n      <FlagshipProvider\n      envId={${currSettings.envId}}\n      config={\n        ${JSON.stringify(currSettings.sdkConfig, null, 2)}\n      }\n      visitorData={\n        ${JSON.stringify(currSettings.visitorData, null, 2)}\n    }\n      onInitStart={() => {\n        console.log(\"init start\");\n      }}\n      onInitDone={() => {\n        console.log(\"init done\");\n      }}\n      onUpdate={({ fsModifications }) => {\n        console.log(\n            'React SDK updated with modifications:' + JSON.stringify(fsModifications)\n        );\n      }}\n      loadingComponent={\n        <Container className=\"mt3\">\n          <Row>\n            <Col xs={12}>Loading Flagship React SDK...</Col>\n          </Row>\n        </Container>\n      }\n    >\n      <Header />\n      <AppContainer />\n    </FlagshipProvider>\n  </>\n);          `}\n                    />\n                    <p>\n                        To understand impact of each props, you can change some\n                        value dynamically here:{' '}\n                    </p>\n                    <h3\n                        id=\"playWithConfig\"\n                        style={{\n                            borderBottom: '1px solid grey',\n                            marginBottom: '16px',\n                            paddingBottom: '8px'\n                        }}\n                    >\n                        1 - Playing with <i>config</i>\n                    </h3>\n                    {QA.enabled ? (\n                        <PlayConfigQA></PlayConfigQA>\n                    ) : (\n                        <PlayConfig></PlayConfig>\n                    )}\n                    <h3\n                        style={{\n                            borderBottom: '1px solid grey',\n                            marginBottom: '16px',\n                            paddingBottom: '8px'\n                        }}\n                    >\n                        2 - Playing with <i>visitorData</i>\n                    </h3>\n                    {QA.enabled ? (\n                        <PlayVisitorDataQA></PlayVisitorDataQA>\n                    ) : (\n                        <PlayVisitorData></PlayVisitorData>\n                    )}\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport CodeBlock from '../../../../../common/CodeBlock';\nimport { useFsActivate } from '@flagship.io/react-sdk';\n\nconst PlayWithActivate: React.FC = () => {\n    const [toggle, setToggle] = React.useState(false);\n    useFsActivate(['color', 'unknownKey'], [toggle]);\n    const demoHookName = 'useFsActivate';\n    return (\n        <>\n            <p>\n                Use <b>{demoHookName}</b> hook to trigger activation of a\n                modification when needed:\n            </p>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`const [toggle, setToggle] = React.useState(false);\nuseFsActivate(['color','unknownKey'], [toggle]);\n\n// {...}\n\n<Button\nvariant=\"secondary\"\nonClick={() => setToggle(!toggle)}\n>\n    Trigger activate\n</Button>`}\n            />\n            <Button variant=\"secondary\" onClick={() => setToggle(!toggle)}>\n                Trigger activate\n            </Button>\n            <div className=\"mv3\">\n                <p>\n                    In this example, we're activating only when <i>toggle</i>{' '}\n                    value has changed as we have specified a 2nd argument in{' '}\n                    <i>useFsActivate</i> hook.\n                </p>\n                <p>\n                    We also specified in 1st argument that we want to activate 3\n                    keys. For each key, there is 2 possible scenarios:\n                </p>\n                <p>If the key exist, a http request \"activate\" will be done.</p>\n                <p>\n                    If the key does not exist, you will receive a warning log.\n                </p>\n            </div>\n        </>\n    );\n};\n\nexport default PlayWithActivate;\n","import React from 'react';\nimport { useFsModifications, useFsActivate } from '@flagship.io/react-sdk';\nimport { Button, Form, Col } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayWithActivateQA: React.FC = () => {\n    const [hasError, setError] = React.useState(false);\n    const [toggle, setToggle] = React.useState(false);\n    const [modificationToActivate, setModificationToActivate] = React.useState([\n        'btnColor',\n        'otherKey1',\n        'otherKey2'\n    ]);\n    useFsActivate(modificationToActivate, [toggle]);\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    modificationToActivate: modificationToActivate\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.modificationToActivate) {\n                        errors.modificationToActivate = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setModificationToActivate([\n                        ...values.modificationToActivate\n                    ]);\n                    setToggle(!toggle);\n                }}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    setFieldValue,\n                    values,\n                    touched,\n                    isValid,\n                    errors\n                }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>\n                                useFsModifications arguments\n                            </Form.Label>\n                            <JSONInput\n                                id=\"modificationToActivate\"\n                                placeholder={values.modificationToActivate}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue(\n                                            'modificationToActivate',\n                                            jsObject || {},\n                                            true\n                                        );\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Trigger activate\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    );\n};\n\nexport default PlayWithActivateQA;\n","import React, { useContext } from 'react';\nimport { Alert, Col, Row } from 'react-bootstrap';\nimport PlayWithActivate from './components/normal';\nimport { AppSettings, SettingContext } from '../../../../App';\nimport PlayWithActivateQA from './components/qa';\n\nexport const DemoUseFsActivate: React.FC = () => {\n    const demoHookName = 'useFsActivate';\n    const { QA } = useContext(SettingContext) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={demoHookName} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    {QA.enabled ? (\n                        <PlayWithActivateQA></PlayWithActivateQA>\n                    ) : (\n                        <PlayWithActivate></PlayWithActivate>\n                    )}\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { useFsModifications } from '@flagship.io/react-sdk';\nimport { Button } from 'react-bootstrap';\n\nconst PlayWithParams: React.FC = () => {\n    const fsModifications = useFsModifications([\n        {\n            key: 'color',\n            defaultValue: '#FF33E3',\n            activate: false\n        }\n    ]);\n    const demoHookName = 'useFsModifications';\n    return (\n        <>\n            <p>\n                Use <b>{demoHookName}</b> hook to get the modifications:\n            </p>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`import { useFsModifications } from '@flagship.io/react-sdk';\nconst fsModifications = useFsModifications([\n    {\n        key: 'color',\n        defaultValue: '#FF33E3',\n        activate: false\n    }\n]);`}\n            />\n            <p>Output: </p>\n            <div>\n                <Button\n                    variant=\"secondary\"\n                    style={{\n                        backgroundColor: fsModifications.color\n                    }}\n                >\n                    {`My color tells my visitor mood (backgroundColor=${fsModifications.color})`}\n                </Button>\n            </div>\n            <div className=\"mv3\">\n                Based on the campaign that we set on Flagship platform, the\n                color of the button will change depending values set in the{' '}\n                <a href=\"#playWithVisitorContext\">visitor context</a>.\n            </div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`<Button\n    variant=\"secondary\"\n    style={{\n        backgroundColor: fsModifications.color\n    }}\n>\n    {\\`My color tells my visitor mood (backgroundColor=\\${fsModifications.color})\\`}\n</Button>`}\n            />\n        </>\n    );\n};\n\nexport default PlayWithParams;\n","import React from 'react';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { useFsModifications } from '@flagship.io/react-sdk';\nimport { Button, Form, Col } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayWithParams: React.FC = () => {\n    const [hasError, setError] = React.useState(false);\n    const [fsParams, setFsParams] = React.useState([\n        {\n            key: 'btnColor',\n            defaultValue: 'green',\n            activate: false\n        }\n    ]);\n    const output = useFsModifications(fsParams);\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    fsParams\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.fsParams) {\n                        errors.fsParams = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setFsParams([...values.fsParams]);\n                }}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    setFieldValue,\n                    values,\n                    touched,\n                    isValid,\n                    errors\n                }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>\n                                useFsModifications arguments\n                            </Form.Label>\n                            <JSONInput\n                                id=\"fsParams\"\n                                placeholder={values.fsParams}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue(\n                                            'fsParams',\n                                            jsObject || {},\n                                            true\n                                        );\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Apply change\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"mv3 b\">useFsModifications output:</div>\n            <div className=\"mb3\">\n                <JSONInput\n                    id=\"fsOutput\"\n                    placeholder={output}\n                    locale={locale}\n                    height=\"550px\"\n                    viewOnly={true}\n                    width=\"100%\"\n                    style={{\n                        body: {\n                            fontSize: '16px'\n                        }\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default PlayWithParams;\n","import { useFsModifications } from '@flagship.io/react-sdk';\nimport React, { useContext } from 'react';\nimport { Alert, Col, Row, Button } from 'react-bootstrap';\nimport CodeBlock from '../../../common/CodeBlock';\nimport PlayWithParams from './components/normal/PlayWithParams';\nimport PlayWithParamsQA from './components/qa/PlayWithParams';\nimport { SettingContext, AppSettings } from '../../../../App';\n\nexport const DemoUseFsModifications = () => {\n    const demoHookName = 'useFsModifications';\n    const { QA } = useContext(SettingContext) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={demoHookName} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    {QA.enabled ? (\n                        <PlayWithParamsQA></PlayWithParamsQA>\n                    ) : (\n                        <PlayWithParams></PlayWithParams>\n                    )}\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport CodeBlock from '../../../../../common/CodeBlock';\nimport { Form } from 'react-bootstrap';\nimport { useFsSynchronize } from '@flagship.io/react-sdk';\n\nconst PlayWithSynchronize: React.FC = () => {\n    const demoHookName = 'useFsSynchronize';\n    const [listenedValue, setValue] = React.useState(false);\n    const [activateAllModifications, setActivate] = React.useState(false);\n    useFsSynchronize([listenedValue], activateAllModifications);\n    return (\n        <>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`useFsSynchronize([listenedValue], activateAllModifications);`}\n            ></CodeBlock>\n            <div>\n                When <b>listenedValue</b> value changed, it will update\n                modifications in cache (=synchronization).\n            </div>\n            <div className=\"mb3\">\n                You can also notice that enabling{' '}\n                <b>activateAllModifications</b> to true will modify the payload\n                sent to the Flagship API and thus trigger an activate.\n            </div>\n            <Form>\n                <Form.Group controlId=\"demoFsSynchronize.ControlSelect1\">\n                    <Form.Label>Playing with 1st argument</Form.Label>\n                    <Form.Check\n                        type=\"checkbox\"\n                        checked={listenedValue}\n                        onChange={(e) => setValue(e.currentTarget.checked)}\n                        label={`listenedValue=${listenedValue}`}\n                    />\n                </Form.Group>\n                <Form.Group controlId=\"demoFsSynchronize.ControlSelect2\">\n                    <Form.Label>Playing with 2nd argument</Form.Label>\n                    <Form.Check\n                        type=\"checkbox\"\n                        checked={activateAllModifications}\n                        onChange={(e) => setActivate(e.currentTarget.checked)}\n                        label={`activateAllModifications=${activateAllModifications}`}\n                    />\n                </Form.Group>\n            </Form>\n        </>\n    );\n};\n\nexport default PlayWithSynchronize;\n","import { useFsSynchronize } from '@flagship.io/react-sdk';\nimport React from 'react';\nimport { Alert, Col, Form, Row } from 'react-bootstrap';\n\nimport CodeBlock from '../../../common/CodeBlock';\nimport PlayWithSynchronize from './components/normal';\n\nexport const DemoUseFsSynchronize: React.FC = () => {\n    const demoHookName = 'useFsSynchronize';\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={demoHookName} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    <PlayWithSynchronize></PlayWithSynchronize>\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport { Button, Nav } from 'react-bootstrap';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport {\n    TransactionHit,\n    ScreenHit,\n    ItemHit,\n    EventHit\n} from '@flagship.io/js-sdk';\nimport { useFlagship } from '@flagship.io/react-sdk';\n\nconst PlayWithHits: React.FC = () => {\n    const { status: fsStatus, hit: fsHit } = useFlagship();\n    const multipleHitBundle = {\n        multipleCodeString: `<Button\n    onClick={() => {\n        const transactionHit = {\n            type: 'Transaction',\n            data: {\n                transactionId: '12451342423',\n                affiliation: 'myAffiliation',\n                totalRevenue: 999,\n                shippingCost: 888,\n                shippingMethod: 'myShippingMethod',\n                currency: 'myCurrency',\n                taxes: 1234444,\n                paymentMethod: 'myPaymentMethod',\n                itemCount: 2,\n                couponCode: 'myCOUPON',\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'myScreen'\n            }\n        };\n        const eventHit = {\n            type: 'Event',\n            data: {\n                category: 'User Engagement',\n                action: 'signOff',\n                label: 'yolo label ;)',\n                value: 123,\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'YoloTitle'\n            }\n        };\n        fsHit.sendMultiple([transactionHit, eventHit]);\n    }}\n>\n    Send multiple transaction hits\n</Button>`,\n        multipleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const transactionHit = {\n                        type: 'Transaction',\n                        data: {\n                            transactionId: '12451342423',\n                            affiliation: 'myAffiliation',\n                            totalRevenue: 999,\n                            shippingCost: 888,\n                            shippingMethod: 'myShippingMethod',\n                            currency: 'myCurrency',\n                            taxes: 1234444,\n                            paymentMethod: 'myPaymentMethod',\n                            itemCount: 2,\n                            couponCode: 'myCOUPON',\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'myScreen'\n                        }\n                    } as {\n                        type: 'Transaction';\n                        data: TransactionHit;\n                    };\n                    const eventHit = {\n                        type: 'Event',\n                        data: {\n                            category: 'User Engagement',\n                            action: 'signOff',\n                            label: 'yolo label ;)',\n                            value: 123,\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloTitle'\n                        }\n                    } as {\n                        type: 'Event';\n                        data: EventHit;\n                    };\n                    fsHit.sendMultiple([transactionHit, eventHit]);\n                }}\n            >\n                Send multiple mixed hits\n            </Button>\n        )\n    };\n    const transactionHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Transaction',\n            data: {\n                transactionId: '12451342423',\n                affiliation: 'myAffiliation',\n                totalRevenue: 999,\n                shippingCost: 888,\n                shippingMethod: 'myShippingMethod',\n                currency: 'myCurrency',\n                taxes: 1234444,\n                paymentMethod: 'myPaymentMethod',\n                itemCount: 2,\n                couponCode: 'myCOUPON',\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'myScreen'\n            }\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a transaction hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Transaction',\n                        data: {\n                            transactionId: '12451342423',\n                            affiliation: 'myAffiliation',\n                            totalRevenue: 999,\n                            shippingCost: 888,\n                            shippingMethod: 'myShippingMethod',\n                            currency: 'myCurrency',\n                            taxes: 1234444,\n                            paymentMethod: 'myPaymentMethod',\n                            itemCount: 2,\n                            couponCode: 'myCOUPON',\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'myScreen'\n                        }\n                    } as {\n                        type: 'Transaction';\n                        data: TransactionHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a transaction hit\n            </Button>\n        )\n    };\n    const screenHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Screen',\n            data: {\n                documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'YoloScreen',\n            },\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a screen hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Screen',\n                        data: {\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloScreen'\n                        }\n                    } as {\n                        type: 'Screen';\n                        data: ScreenHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a screen hit\n            </Button>\n        )\n    };\n    const itemHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Item',\n            data: {\n              transactionId: '12451342423',\n              name: 'yoloItem',\n              price: 999,\n              code: 'yoloCode',\n              category: 'yoloCategory',\n              quantity: 1234444,\n              documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n              pageTitle: 'YoloScreen',\n            }\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a item hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Item',\n                        data: {\n                            transactionId: '12451342423',\n                            name: 'yoloItem',\n                            price: 999,\n                            code: 'yoloCode',\n                            category: 'yoloCategory',\n                            quantity: 1234444,\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloScreen'\n                        }\n                    } as {\n                        type: 'Item';\n                        data: ItemHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a item hit\n            </Button>\n        )\n    };\n\n    const eventHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Event',\n            data: {\n                category: 'User Engagement',\n                action: 'signOff',\n                label: 'yolo label ;)',\n                value: 123,\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'YoloTitle'\n            }\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a page hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Event',\n                        data: {\n                            category: 'User Engagement',\n                            action: 'signOff',\n                            label: 'yolo label ;)',\n                            value: 123,\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloTitle'\n                        }\n                    } as {\n                        type: 'Event';\n                        data: EventHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a item hit\n            </Button>\n        )\n    };\n    const [currentTestedHit, setHitToTest] = React.useState<{\n        simpleCodeString: string;\n        simpleComponent: React.ReactNode;\n    }>(transactionHitBundle);\n    return (\n        <>\n            <div className=\"mb3\">\n                If you're not familiar with the payload that you should a\n                provide to the hit you want to send, you'll have all details\n                available in the{' '}\n                <a href=\"https://github.com/abtasty/flagship-react-sdk#shape-of-possible-hits-to-send\">\n                    SDK Hit documentation\n                </a>\n                .\n            </div>\n            <div>\n                <b>NOTE:</b>\n                <p>\n                    It is not necessary to provide parameters to{' '}\n                    <i>useFlagship</i> if your purpose is only to send hits.\n                </p>\n                <CodeBlock\n                    className=\"mv3\"\n                    codeString={`import { useFlagship } from '@flagship.io/react-sdk';\nconst { hit: fsHit } = useFlagship();`}\n                />\n            </div>\n            <p>Send a hit, demo: </p>\n            <Nav variant=\"tabs\" defaultActiveKey=\"hitTransaction\">\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitTransaction\"\n                        onClick={() => setHitToTest(transactionHitBundle)}\n                    >\n                        Transaction Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitScreen\"\n                        onClick={() => setHitToTest(screenHitBundle)}\n                    >\n                        Screen Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitEvent\"\n                        onClick={() => setHitToTest(eventHitBundle)}\n                    >\n                        Event Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitItem\"\n                        onClick={() => setHitToTest(itemHitBundle)}\n                    >\n                        Item Hit\n                    </Nav.Link>\n                </Nav.Item>\n            </Nav>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={currentTestedHit.simpleCodeString}\n            />\n            <div>{currentTestedHit.simpleComponent}</div>\n            <div className=\"mt3\">Send multiple mixed hit, demo: </div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={multipleHitBundle.multipleCodeString}\n            />\n            <div>{multipleHitBundle.multipleComponent}</div>\n        </>\n    );\n};\n\nexport default PlayWithHits;\n","import React from 'react';\nimport { useFlagship } from '@flagship.io/react-sdk';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { Button, Form, Col, Nav } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport flagship from '@flagship.io/js-sdk';\n\nconst PlayWithHits: React.FC = () => {\n    const defaultTransactionHitPayload = {\n        type: 'Transaction',\n        data: {\n            transactionId: '12451342423',\n            affiliation: 'yoloAffiliation',\n            totalRevenue: 999,\n            shippingCost: 888,\n            shippingMethod: 'yoloShippingMethod',\n            currency: 'yoloCurrency',\n            taxes: 1234444,\n            paymentMethod: 'yoloPaymentMethod',\n            itemCount: 2,\n            couponCode: 'YOLOCOUPON',\n            documentLocation:\n                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloScreen'\n        }\n    };\n    const defaultScreenHitPayload = {\n        type: 'Screen',\n        data: {\n            documentLocation:\n                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloScreen'\n        }\n    };\n    const defaultEventHitPayload = {\n        type: 'Event',\n        data: {\n            category: 'User Engagement',\n            action: 'signOff',\n            label: 'yolo label ;)',\n            value: 123,\n            documentLocation:\n                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloTitle'\n        }\n    };\n    const defaultItemHitPayload = {\n        type: 'Item',\n        data: {\n            transactionId: '12451342423',\n            name: 'yoloItem',\n            price: 999,\n            code: 'yoloCode',\n            category: 'yoloCategory',\n            quantity: 1234444,\n            documentLocation:\n                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloScreen'\n        }\n    };\n    const payloads = {\n        transaction: defaultTransactionHitPayload,\n        screen: defaultScreenHitPayload,\n        event: defaultEventHitPayload,\n        item: defaultItemHitPayload\n    };\n    const [hasError, setError] = React.useState(false);\n    const [hasError2, setError2] = React.useState(false);\n    const [currentTestedHit, setHitToTest] = React.useState<string>(\n        'transaction'\n    );\n    const [hitPayload, setHitPayload] = React.useState(\n        payloads[currentTestedHit]\n    );\n\n    const [hitsPayload, setHitsPayload] = React.useState([\n        { ...payloads.transaction },\n        { ...payloads.screen },\n        { ...payloads.event },\n        { ...payloads.item }\n    ]);\n    React.useEffect(() => setHitPayload(payloads[currentTestedHit]), [\n        currentTestedHit\n    ]);\n    const { hit: fsHit } = useFlagship();\n    return (\n        <>\n            <p>Send a hit, demo: </p>\n            <Nav variant=\"tabs\" defaultActiveKey=\"hitTransaction\">\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitTransaction\"\n                        onClick={() => setHitToTest('transaction')}\n                    >\n                        Transaction Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitScreen\"\n                        onClick={() => setHitToTest('screen')}\n                    >\n                        Screen Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitEvent\"\n                        onClick={() => setHitToTest('event')}\n                    >\n                        Event Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitItem\"\n                        onClick={() => setHitToTest('item')}\n                    >\n                        Item Hit\n                    </Nav.Link>\n                </Nav.Item>\n            </Nav>\n            <Formik\n                enableReinitialize={true}\n                initialValues={{\n                    hitPayload\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.hitPayload) {\n                        errors.hitPayload = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setHitPayload({ ...values.hitPayload });\n                    fsHit.send({ ...values.hitPayload });\n                }}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    setFieldValue,\n                    values,\n                    touched,\n                    isValid,\n                    errors\n                }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>\n                                {currentTestedHit} hit payload\n                            </Form.Label>\n                            <JSONInput\n                                id=\"hitPayload\"\n                                placeholder={values.hitPayload}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue(\n                                            'hitPayload',\n                                            jsObject || {},\n                                            true\n                                        );\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Send hit\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"mv3\">\n                Have a look to logs + network on your browser inspect tools to\n                see results.\n            </div>\n            <Formik\n                initialValues={{\n                    hitsPayload\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.hitsPayload) {\n                        errors.hitsPayload = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setHitsPayload([...values.hitsPayload]);\n                    fsHit.sendMultiple([\n                        ...values.hitsPayload\n                    ] as flagship.HitShape[]);\n                }}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    setFieldValue,\n                    values,\n                    touched,\n                    isValid,\n                    errors\n                }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>sendMultiple argument</Form.Label>\n                            <JSONInput\n                                id=\"hitsPayload\"\n                                placeholder={values.hitsPayload}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue(\n                                            'hitsPayload',\n                                            jsObject || {},\n                                            true\n                                        );\n                                        setError2(false);\n                                    } else {\n                                        setError2(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError2}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError2\n                                        ? 'not-allowed'\n                                        : 'pointer'\n                                }}\n                            >\n                                Send multiple hits\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    );\n};\n\nexport default PlayWithHits;\n","import React from 'react';\nimport { useFlagship } from '@flagship.io/react-sdk';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { Button, Form, Col } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayWithModifications: React.FC = () => {\n    const [hasError, setError] = React.useState(false);\n    const [fsParams, setFsParams] = React.useState({\n        modifications: {\n            requested: [\n                {\n                    key: 'btnColor',\n                    defaultValue: 'green',\n                    activate: false\n                }\n            ]\n        }\n    });\n    const output = useFlagship(fsParams);\n    const { modifications: fsModifications } = output;\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    fsParams\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.fsParams) {\n                        errors.fsParams = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setFsParams({ ...values.fsParams });\n                }}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    setFieldValue,\n                    values,\n                    touched,\n                    isValid,\n                    errors\n                }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>useFlagship arguments</Form.Label>\n                            <JSONInput\n                                id=\"fsParams\"\n                                placeholder={values.fsParams}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue(\n                                            'fsParams',\n                                            jsObject || {},\n                                            true\n                                        );\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Apply change\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"mv3 b\">useFlagship output:</div>\n            <div className=\"mb3\">\n                <JSONInput\n                    id=\"fsIutput\"\n                    placeholder={output}\n                    locale={locale}\n                    height=\"550px\"\n                    viewOnly={true}\n                    width=\"100%\"\n                    style={{\n                        body: {\n                            fontSize: '16px'\n                        }\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default PlayWithModifications;\n","import React from 'react';\nimport { useFlagship } from '@flagship.io/react-sdk';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { Button } from 'react-bootstrap';\n\nconst PlayWithModifications: React.FC = () => {\n    const fsParams = {\n        modifications: {\n            requested: [\n                {\n                    key: 'color',\n                    defaultValue: '#FF33E3',\n                    activate: false\n                }\n            ]\n        }\n    };\n    const output = useFlagship(fsParams);\n    const { modifications: fsModifications } = output;\n    return (\n        <>\n            <p>demo: </p>\n            <div>\n                <Button\n                    variant=\"secondary\"\n                    style={{\n                        backgroundColor: fsModifications.color\n                    }}\n                >\n                    {`I'm a button customized with Flagship (backgroundColor=${fsModifications.color})`}\n                </Button>\n            </div>\n            <div className=\"mv3\">\n                Based on the campaign that we set on Flagship platform, the\n                color of the button will change depending values set in the{' '}\n                <a href=\"#playWithVisitorContext\">visitor context</a>.\n            </div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`<Button\n    variant=\"secondary\"\n    style={{\n        backgroundColor: fsModifications.color\n    }}\n>\n    {\\`My color tells my visitor mood (backgroundColor=\\${fsModifications.color})\\`}\n</Button>`}\n            />\n        </>\n    );\n};\n\nexport default PlayWithModifications;\n","import { useFlagship } from '@flagship.io/react-sdk';\nimport React, { useContext } from 'react';\nimport { Alert, Col, Row, Button, Nav } from 'react-bootstrap';\nimport CodeBlock from '../../../common/CodeBlock';\nimport { TransactionHit } from '@flagship.io/js-sdk';\nimport PlayWithHits from './components/normal/PlayWithHits';\nimport PlayWithHitsQA from './components/qa/PlayWithHits';\nimport { SettingContext, AppSettings } from '../../../../App';\nimport PlayWithModificationsQA from './components/qa/PlayWithModifications';\nimport PlayWithModifications from './components/normal/PlayWithModifications';\n\nexport const DemoUseFlagship = () => {\n    const fsParams = {\n        modifications: {\n            requested: [\n                {\n                    key: 'btnColor',\n                    defaultValue: 'green',\n                    activate: false\n                }\n            ]\n        }\n    };\n    const output = useFlagship(fsParams);\n    const { modifications: fsModifications } = output;\n    const { status: fsStatus, hit: fsHit } = useFlagship();\n    const demoHookName = 'useFlagship';\n    const { QA } = useContext(SettingContext) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={demoHookName} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    <p>\n                        Use <b>{demoHookName}</b> hook to get access to further\n                        stuff such as <i>modifications</i>, <i>sdk status</i>,{' '}\n                        <i>hits</i> :\n                    </p>\n                    <CodeBlock\n                        className=\"mv3\"\n                        codeString={`import { useFlagship } from '@flagship.io/react-sdk';\nconst fsParams = {\n    modifications: {\n        requested: [\n            {\n                key: 'btnColor',\n                defaultValue: 'green',\n                activate: false\n            }\n        ]\n    }\n}\nconst {\n    modifications: fsModifications,\n    status: fsStatus,\n    hit: fsHit,\n} = useFlagship(fsParams);`}\n                    />\n                    <h3>\n                        1 - Playing with <i>fsModifications</i>\n                    </h3>\n                    {QA.enabled ? (\n                        <PlayWithModificationsQA></PlayWithModificationsQA>\n                    ) : (\n                        <PlayWithModifications></PlayWithModifications>\n                    )}\n                    <h3>\n                        2 - Reading <i>fsStatus</i>\n                    </h3>\n\n                    <p>\n                        It gives you some information about the current status\n                        of the SDK:\n                    </p>\n                    <CodeBlock\n                        className=\"mv3\"\n                        codeString={`\nfsStatus=${JSON.stringify(fsStatus, null, 2)};\n                        `}\n                    />\n                    <div className=\"fsAnchor\" id=\"sendHits\"></div>\n                    <h3>\n                        3 - Playing with <i>hits</i>\n                    </h3>\n                    {QA.enabled ? (\n                        <PlayWithHitsQA></PlayWithHitsQA>\n                    ) : (\n                        <PlayWithHits></PlayWithHits>\n                    )}\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React, { useContext } from 'react';\nimport { Alert, Col, Row, Button } from 'react-bootstrap';\nimport { SettingContext, AppSettings } from '../../../../App';\n\nexport const DemoErrorBoundary = () => {\n    const demoHookName = 'Safe Mode';\n    const [triggerError, setTriggerError] = React.useState(false);\n    React.useEffect(() => {\n        if (triggerError) {\n            throw new Error('Flagship - Creating an error just for test...');\n        }\n        setTriggerError(false);\n    }, [triggerError]);\n\n    const { currentSettings, setSettings, QA } = useContext(\n        SettingContext\n    ) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id=\"safeMode\" />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    <p>\n                        When an error occurs unexpectedly, the React SDK switch\n                        automatically into <b>{demoHookName}</b>. Thus, default\n                        value of modifications will always be returned.\n                        Moreover, other features will just log an error without\n                        crash.\n                    </p>\n                    <div>\n                        <Button\n                            variant=\"secondary\"\n                            onClick={() => {\n                                setTriggerError(true);\n                            }}\n                        >\n                            Throw an error\n                        </Button>\n                        {currentSettings.sdkConfig.nodeEnv === 'production' && (\n                            <div className=\"mv3\">\n                                <b>NOTE:</b> You might not see the banner\n                                because you are in 'production' environment. You\n                                need to change value of <i>nodeEnv</i> in{' '}\n                                <a href=\"#playWithConfig\">SDK settings</a>.\n                            </div>\n                        )}\n                        {!currentSettings.sdkConfig.enableErrorLayout && (\n                            <div className=\"mv3\">\n                                <b>NOTE:</b> You might not see the banner\n                                because the setting <i>enableErrorLayout</i> is\n                                disabled, you need to change the value in{' '}\n                                <a href=\"#playWithConfig\">SDK settings</a>.\n                            </div>\n                        )}\n                    </div>\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nimport { DemoInitialization } from './components/DemoInitialization';\nimport { DemoUseFsActivate } from './components/DemoUseFsActivate';\nimport { DemoUseFsModifications } from './components/DemoUseFsModifications';\nimport { DemoUseFsSynchronize } from './components/DemoUseFsSynchronize';\nimport { DemoUseFlagship } from './components/DemoUseFlagship';\nimport { DemoErrorBoundary } from './components/DemoErrorBoundary';\n\nexport const AppContainer: React.FC = () => {\n    return (\n        <Container className=\"mt3\">\n            <DemoInitialization />\n            <DemoUseFlagship />\n            <DemoUseFsModifications />\n            <DemoUseFsActivate />\n            <DemoUseFsSynchronize />\n            <DemoErrorBoundary />\n        </Container>\n    );\n};\n","import React, { useContext } from 'react';\nimport { Navbar, Nav, Form, NavDropdown } from 'react-bootstrap';\nimport Logo from '../../assets/Flagship-horizontal-product-white.png';\nimport { AppSettings, SettingContext } from '../../App';\n\nconst AppHeader: React.FC = () => {\n    const { QA, setQA } = useContext(SettingContext) as AppSettings;\n    const okEmoji = '✅';\n    return (\n        <>\n            <Navbar className=\"fsNavbar\" fixed=\"top\">\n                <Navbar.Brand\n                    href=\"https://github.com/abtasty/flagship-react-sdk\"\n                    className=\"flex item-center\"\n                >\n                    <img\n                        alt=\"Logo Flagship\"\n                        src={Logo}\n                        className=\"d-inline-block align-top logoAdjust\"\n                    />\n                    React SDK (Dev demo)\n                </Navbar.Brand>\n                <Nav className=\"mr-auto fsNav\">\n                    <Nav.Link href=\"#initialization\">Initialization</Nav.Link>\n                    <NavDropdown title=\"Hooks\" id=\"nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"4.0\" href=\"#useFlagship\">\n                            useFlagship\n                        </NavDropdown.Item>\n                        <NavDropdown.Item\n                            eventKey=\"4.1\"\n                            href=\"#useFsModifications\"\n                        >\n                            useFsModifications\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.2\" href=\"#useFsActivate\">\n                            useFsActivate\n                        </NavDropdown.Item>\n                        <NavDropdown.Item\n                            eventKey=\"4.3\"\n                            href=\"#useFsSynchronize\"\n                        >\n                            useFsSynchronize\n                        </NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Features\" id=\"nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"4.0\" href=\"#useFlagship\">\n                            Get modification(s)\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.1\" href=\"#useFsActivate\">\n                            Activate modification(s)\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.2\" href=\"#sendHits\">\n                            Send Hit(s)\n                        </NavDropdown.Item>\n                        <NavDropdown.Item\n                            eventKey=\"4.3\"\n                            href=\"#useFsSynchronize\"\n                        >\n                            Refresh modifications\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.4\" href=\"#safeMode\">\n                            Safe Mode\n                        </NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n\n                <Form inline>\n                    <NavDropdown title=\"QA mode\" id=\"nav-dropdown\">\n                        <NavDropdown.Item\n                            eventKey=\"10.0\"\n                            onClick={() => setQA({ ...QA, enabled: true })}\n                        >\n                            ON {QA.enabled && okEmoji}\n                        </NavDropdown.Item>\n                        <NavDropdown.Item\n                            eventKey=\"10.1\"\n                            onClick={() => setQA({ ...QA, enabled: false })}\n                        >\n                            OFF {!QA.enabled && okEmoji}\n                        </NavDropdown.Item>\n                    </NavDropdown>\n                    <Nav.Link href=\"https://github.com/abtasty/flagship-react-sdk\">\n                        Github\n                    </Nav.Link>\n                    <Nav.Link href=\"https://www.abtasty.com/solutions-product-teams/\">\n                        What is Flagship ?\n                    </Nav.Link>\n                </Form>\n            </Navbar>\n        </>\n    );\n};\nexport default AppHeader;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport {\n    Navbar,\n    Nav,\n    Form,\n    NavDropdown,\n    Modal,\n    Col,\n    Button\n} from 'react-bootstrap';\nimport { SettingContext, AppSettings } from '../../../../App';\n\ndeclare type Props = {\n    onHide(): void;\n    show: boolean;\n};\n\nconst SettingsModal: React.FC<Props> = ({ onHide, show }) => {\n    return (\n        <>\n            <Modal\n                size=\"lg\"\n                show={show}\n                onHide={onHide}\n                aria-labelledby=\"example-modal-sizes-title-lg\"\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"example-modal-sizes-title-lg\">\n                        Edit SDK settings:\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>...</Modal.Body>\n            </Modal>\n        </>\n    );\n};\nexport default SettingsModal;\n","import React, { useContext } from 'react';\nimport { Navbar, Nav, Form, NavDropdown } from 'react-bootstrap';\nimport Logo from '../../assets/Flagship-horizontal-product-white.png';\nimport { AppSettings, SettingContext } from '../../App';\nimport SettingsModal from './components/SettingsModal';\n\nconst QaHeader: React.FC = () => {\n    const { QA, setQA } = useContext(SettingContext) as AppSettings;\n    if (!QA.enabled) {\n        return null;\n    }\n    return (\n        <>\n            <Navbar className=\"fsNavbar qaHeader\" fixed=\"top\">\n                <Navbar.Brand href=\"#\" className=\"flex item-center\">\n                    QA Mode: <span className=\"green\">Enabled</span>\n                </Navbar.Brand>\n                <Nav className=\"mr-auto fsNav\">\n                    {/* <Nav.Link\n                        onClick={() =>\n                            setQA({\n                                ...QA,\n                                show: { ...QA.show, settingsModal: true }\n                            })\n                        }\n                    >\n                        Edit settings\n                    </Nav.Link> */}\n                </Nav>\n\n                <Form inline>\n                    <Nav.Link onClick={() => setQA({ ...QA, enabled: false })}>\n                        Switch off\n                    </Nav.Link>\n                </Form>\n            </Navbar>\n            <SettingsModal\n                onHide={() =>\n                    setQA({ ...QA, show: { ...QA.show, settingsModal: false } })\n                }\n                show={QA.show.settingsModal}\n            ></SettingsModal>\n        </>\n    );\n};\nexport default QaHeader;\n","import './App.css';\n\nimport {\n    FlagshipProvider,\n    FlagshipReactSdkConfig\n} from '@flagship.io/react-sdk';\nimport React, { createContext, Dispatch, SetStateAction } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nimport { AppContainer } from './components/AppContainer';\nimport config from './config';\nimport AppHeader from './components/AppHeader';\nimport QaHeader from './components/QaHeader';\ninterface VisitorContext {\n    [key: string]: any;\n}\nexport interface SdkSettings {\n    envId: string;\n    sdkConfig: FlagshipReactSdkConfig;\n    visitorData: {\n        id: string;\n        context: VisitorContext;\n    };\n}\nexport interface AppSettings {\n    currentSettings: SdkSettings;\n    setSettings: Dispatch<SetStateAction<SdkSettings>>;\n    QA: QA;\n    setQA: Dispatch<SetStateAction<QA>>;\n}\n\nexport interface QA {\n    enabled: boolean;\n    show: {\n        settingsModal: boolean;\n    };\n}\n\nexport const SettingContext = createContext<AppSettings | null>(null);\n\nconst App: React.FC = () => {\n    const [currentSettings, setSettings] = React.useState<SdkSettings>({\n        envId: config.envId,\n        sdkConfig: { ...config.sdkConfig },\n        visitorData: { ...config.visitorData }\n    });\n    const [QA, setQA] = React.useState<QA>({\n        enabled: false,\n        show: {\n            settingsModal: false\n        }\n    });\n    return (\n        <>\n            <SettingContext.Provider\n                value={{ currentSettings, setSettings, QA, setQA }}\n            >\n                <FlagshipProvider\n                    envId={currentSettings.envId}\n                    config={currentSettings.sdkConfig}\n                    visitorData={currentSettings.visitorData}\n                    onInitStart={() => {\n                        console.log('React SDK init start');\n                    }}\n                    onInitDone={() => {\n                        console.log('React SDK init done');\n                    }}\n                    onUpdate={({ fsModifications }) => {\n                        console.log(\n                            'React SDK updated with modifications:\\n' +\n                                JSON.stringify(fsModifications)\n                        );\n                    }}\n                    loadingComponent={\n                        <Container className=\"mt5\">\n                            <Row>\n                                <Col\n                                    xs={12}\n                                    style={{\n                                        color: 'white',\n                                        height: '100vh',\n                                        fontSize: '5vw'\n                                    }}\n                                >\n                                    Loading Flagship React SDK...\n                                </Col>\n                            </Row>\n                        </Container>\n                    }\n                >\n                    <AppHeader />\n                    <QaHeader />\n                    <AppContainer />\n                </FlagshipProvider>\n            </SettingContext.Provider>\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Flagship-horizontal-product-white.6e8b90f3.png\";"],"sourceRoot":""}