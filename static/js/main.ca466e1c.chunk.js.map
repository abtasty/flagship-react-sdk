{"version":3,"sources":["components/common/CodeBlock.tsx","components/AppContainer/components/DemoInitialization/components/qa/PlayConfig/index.tsx","components/AppContainer/components/DemoInitialization/components/qa/PlayVisitorData/index.tsx","config/index.tsx","components/AppContainer/components/DemoInitialization/components/normal/PlayVisitorData/index.tsx","components/AppContainer/components/DemoInitialization/components/normal/PlayConfig/index.tsx","components/AppContainer/components/DemoInitialization/index.tsx","components/AppContainer/components/DemoUseFsActivate/components/normal/index.tsx","components/AppContainer/components/DemoUseFsActivate/components/qa/index.tsx","components/AppContainer/components/DemoUseFsActivate/index.tsx","components/AppContainer/components/DemoUseFsModifications/components/normal/PlayWithParams/index.tsx","components/AppContainer/components/DemoUseFsModifications/components/qa/PlayWithParams/index.tsx","components/AppContainer/components/DemoUseFsModifications/index.tsx","components/AppContainer/components/DemoUseFsSynchronize/components/normal/index.tsx","components/AppContainer/components/DemoUseFsSynchronize/index.tsx","components/AppContainer/components/DemoUseFlagship/components/normal/PlayWithHits/index.tsx","components/AppContainer/components/DemoUseFlagship/components/qa/PlayWithHits/index.tsx","components/AppContainer/components/DemoUseFlagship/components/qa/PlayWithModifications/index.tsx","components/AppContainer/components/DemoUseFlagship/components/normal/PlayWithModifications/index.tsx","components/AppContainer/components/DemoUseFlagship/components/normal/PlayWithModificationInfo/index.tsx","components/AppContainer/components/DemoUseFlagship/components/qa/PlayWithModificationInfo/index.tsx","components/AppContainer/components/DemoUseFlagship/index.tsx","components/AppContainer/components/DemoErrorBoundary/index.tsx","components/AppContainer/index.tsx","components/AppHeader/index.tsx","components/QaHeader/components/SettingsModal/index.tsx","components/QaHeader/index.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/Flagship-horizontal-product-white.png"],"names":["SyntaxHighlighter","registerLanguage","jsx","CodeBlock","className","codeString","language","style","darcula","showLineNumbers","PlayConfig","useContext","SettingContext","currentSettings","setSettings","React","useState","hasError","setError","initialValues","envId","settings","fetchNow","activateNow","enableConsoleLogs","enableErrorLayout","enableSafeMode","nodeEnv","flagshipApi","apiKey","validate","values","errors","onSubmit","setSubmitting","handleSubmit","handleChange","setFieldValue","handleBlur","touched","isValid","Form","noValidate","Group","as","Col","md","controlId","Label","Control","type","name","value","onChange","isInvalid","Feedback","id","placeholder","locale","height","width","error","jsObject","body","fontSize","Button","disabled","variant","cursor","PlayVisitorData","vId","visitorData","vContext","context","config","isAwesome","isEvil","sandbox","visitorId","currSettings","newSettings","setNewSettings","handleVisitorContext","e","node","JSON","parse","currentTarget","parentElement","innerText","temp","checked","Object","keys","keyToRemove","entries","reduce","reducer","key","includes","display","alignItems","marginLeft","target","filter","i","map","Check","hasOwnProperty","label","stringify","justifyContent","onClick","QA","setting","toSubmit","DemoInitialization","Row","Alert","Heading","toString","borderBottom","marginBottom","paddingBottom","enabled","PlayWithActivate","toggle","setToggle","useFsActivate","PlayWithActivateQA","modificationToActivate","setModificationToActivate","DemoUseFsActivate","PlayWithParams","fsModifications","useFsModifications","defaultValue","activate","backgroundColor","color","href","fsParams","setFsParams","output","viewOnly","DemoUseFsModifications","PlayWithSynchronize","listenedValue","setValue","activateAllModifications","setActivate","useFsSynchronize","DemoUseFsSynchronize","PlayWithHits","useFlagship","fsHit","status","hit","multipleHitBundle","multipleCodeString","multipleComponent","sendMultiple","data","transactionId","affiliation","totalRevenue","shippingCost","shippingMethod","currency","taxes","paymentMethod","itemCount","couponCode","documentLocation","pageTitle","category","action","transactionHitBundle","simpleCodeString","simpleComponent","send","screenHitBundle","itemHitBundle","price","code","quantity","eventHitBundle","currentTestedHit","setHitToTest","Nav","defaultActiveKey","Item","Link","eventKey","payloads","transaction","screen","event","item","hasError2","setError2","hitPayload","setHitPayload","hitsPayload","setHitsPayload","useEffect","enableReinitialize","PlayWithModifications","modifications","requested","PlayWithModificationInfo","loading","noCall","fsOutput","setFsOutput","getModificationInfo","then","response","catch","message","DemoUseFlagship","fsStatus","DemoErrorBoundary","triggerError","setTriggerError","Error","AppContainer","Container","AppHeader","setQA","Navbar","fixed","Brand","alt","src","Logo","NavDropdown","title","inline","SettingsModal","onHide","show","Modal","size","aria-labelledby","Header","closeButton","Title","Body","QaHeader","settingsModal","createContext","App","Provider","onInitStart","console","log","onInitDone","onUpdate","loadingComponent","xs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.ca466e1c.chunk.js","sourcesContent":["import React from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\nSyntaxHighlighter.registerLanguage('jsx', jsx);\n\ntype CodeBlockProps = {\n    className?: string;\n    codeString: string;\n};\n\nconst CodeBlock: React.FC<CodeBlockProps> = ({ className, codeString }) => {\n    return (\n        <div className={className}>\n            <SyntaxHighlighter\n                language=\"javascript\"\n                style={darcula}\n                showLineNumbers\n            >\n                {codeString}\n            </SyntaxHighlighter>\n        </div>\n    );\n};\n\nexport default CodeBlock;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { SettingContext, AppSettings } from '../../../../../../../App';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nconst PlayConfig: React.FC = () => {\n    const { currentSettings, setSettings } = useContext(SettingContext) as AppSettings;\n\n    const [hasError, setError] = React.useState(false);\n    return (\n        <Formik\n            initialValues={{\n                envId: currentSettings.envId,\n                settings: {\n                    fetchNow: currentSettings.fetchNow,\n                    activateNow: currentSettings.activateNow,\n                    enableConsoleLogs: currentSettings.enableConsoleLogs,\n                    enableErrorLayout: currentSettings.enableErrorLayout,\n                    enableSafeMode: currentSettings.enableSafeMode,\n                    nodeEnv: currentSettings.nodeEnv,\n                    flagshipApi: currentSettings.flagshipApi,\n                    apiKey: currentSettings.apiKey\n                }\n            }}\n            validate={(values) => {\n                const errors: any = {};\n                if (!values.envId) {\n                    errors.envId = 'Required';\n                }\n                return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n                setSubmitting(false);\n                setSettings({\n                    ...currentSettings,\n                    envId: values.envId,\n                    ...values.settings\n                });\n            }}\n        >\n            {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, isValid, errors }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                    <Form.Group as={Col} md=\"12\" controlId=\"envIdForm\">\n                        <Form.Label>Environment ID</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            name=\"envId\"\n                            value={values.envId}\n                            onChange={handleChange}\n                            isValid={touched.envId && !errors.envId}\n                            isInvalid={!!errors.envId}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">{errors.envId}</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                        <Form.Label>\n                            \"<i>config</i>\" prop\n                        </Form.Label>\n                        <JSONInput\n                            id=\"settings\"\n                            placeholder={values.settings}\n                            locale={locale}\n                            height=\"550px\"\n                            width=\"100%\"\n                            onChange={({ error, jsObject }) => {\n                                if (!error) {\n                                    setFieldValue('settings', jsObject || {}, true);\n                                    setError(false);\n                                } else {\n                                    setError(true);\n                                }\n                            }}\n                            style={{\n                                body: {\n                                    fontSize: '16px'\n                                }\n                            }}\n                        />\n                    </Form.Group>\n                    <div className=\"flex justify-end ph3\">\n                        <Button\n                            disabled={hasError}\n                            variant=\"secondary\"\n                            type=\"submit\"\n                            style={{\n                                cursor: hasError ? 'not-allowed' : 'pointer'\n                            }}\n                        >\n                            Apply change\n                        </Button>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default PlayConfig;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { SettingContext, AppSettings } from '../../../../../../../App';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayVisitorData: React.FC = () => {\n    const { currentSettings, setSettings } = useContext(\n        SettingContext\n    ) as AppSettings;\n    const [hasError, setError] = React.useState(false);\n    return (\n        <Formik\n            initialValues={{\n                vId: currentSettings.visitorData.id,\n                vContext: currentSettings.visitorData.context\n            }}\n            validate={(values) => {\n                const errors: any = {};\n                if (!values.vId) {\n                    errors.vId = 'Required';\n                }\n                return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n                setSubmitting(false);\n                setSettings({\n                    ...currentSettings,\n                    visitorData: {\n                        id: values.vId,\n                        context: values.vContext || {}\n                    }\n                });\n            }}\n        >\n            {({\n                handleSubmit,\n                handleChange,\n                handleBlur,\n                setFieldValue,\n                values,\n                touched,\n                isValid,\n                errors\n            }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                    <Form.Group as={Col} md=\"12\" controlId=\"validationFormik01\">\n                        <Form.Label>Visitor ID</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            name=\"vId\"\n                            value={values.vId}\n                            onChange={handleChange}\n                            isValid={touched.vId && !errors.vId}\n                            isInvalid={!!errors.vId}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            {errors.vId}\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\n                        <Form.Label>Visitor Context</Form.Label>\n                        <JSONInput\n                            id=\"a_unique_id\"\n                            placeholder={values.vContext}\n                            locale={locale}\n                            height=\"550px\"\n                            width=\"100%\"\n                            onChange={({ error, jsObject }) => {\n                                if (!error) {\n                                    setFieldValue(\n                                        'vContext',\n                                        jsObject || {},\n                                        true\n                                    );\n                                    setError(false);\n                                } else {\n                                    setError(true);\n                                }\n                            }}\n                            style={{\n                                body: {\n                                    fontSize: '16px'\n                                }\n                            }}\n                        />\n                    </Form.Group>\n                    <div className=\"flex justify-end ph3\">\n                        <Button\n                            disabled={hasError}\n                            variant=\"secondary\"\n                            type=\"submit\"\n                            style={{\n                                cursor: hasError ? 'not-allowed' : 'pointer'\n                            }}\n                        >\n                            Apply change\n                        </Button>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default PlayVisitorData;\n","import { FlagshipReactSdkConfig } from '../../../../dist';\n\nconst config = {\n    envId: 'bn1ab7m56qolupi5sa0g',\n    fetchNow: true,\n    enableConsoleLogs: true,\n    enableErrorLayout: true,\n    nodeEnv: 'production',\n    enableSafeMode: true,\n    visitorData: {\n        id: 'test-vid',\n        context: { isAwesome: false, isEvil: false }\n    },\n    sandbox: {\n        config: {\n            fetchNow: true,\n            enableConsoleLogs: true,\n            enableErrorLayout: true\n        },\n        envId: ['bn1ab7m56qolupi5sa0g_fake_1', 'bn1ab7m56qolupi5sa0g_fake_2'],\n        nodeEnv: ['production', 'development'],\n        visitorId: ['test-vid', 'test-vid_2', 'test-vid_3']\n    }\n};\nexport default config;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport {\n    SettingContext,\n    AppSettings,\n    SdkSettings\n} from '../../../../../../../App';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport config from '../../../../../../../config';\n\nconst PlayVisitorData: React.FC = () => {\n    const { currentSettings: currSettings, setSettings } = useContext(\n        SettingContext\n    ) as AppSettings;\n\n    const [newSettings, setNewSettings] = React.useState<SdkSettings>({\n        ...currSettings\n    });\n\n    const handleVisitorId = (e) =>\n        setNewSettings({\n            ...newSettings,\n            visitorData: {\n                ...newSettings.visitorData,\n                id: e.target.value\n            }\n        });\n\n    const handleVisitorContext = (e) => {\n        const node = JSON.parse(e.currentTarget.parentElement.innerText);\n        const temp = { ...newSettings };\n        if (e.currentTarget.checked) {\n            setNewSettings({\n                ...newSettings,\n                visitorData: {\n                    ...newSettings.visitorData,\n                    context: {\n                        ...newSettings.visitorData.context,\n                        [Object.keys(node)[0]]: true\n                    }\n                }\n            });\n        } else {\n            const keyToRemove = Object.keys(node)[0];\n            setNewSettings({\n                ...newSettings,\n                visitorData: {\n                    ...newSettings.visitorData,\n                    context: Object.entries(temp.visitorData.context).reduce(\n                        (reducer, [key, value]) => {\n                            if (key === keyToRemove) {\n                                if (\n                                    Object.keys(\n                                        config.visitorData.context\n                                    ).includes(keyToRemove)\n                                ) {\n                                    return { ...reducer, [key]: false };\n                                }\n                                return reducer;\n                            }\n                            return { ...reducer, [key]: value };\n                        },\n                        {}\n                    )\n                }\n            });\n        }\n    };\n    return (\n        <>\n            <Form>\n                <Form.Group\n                    controlId=\"initForm.ControlSelect2\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>visitorId: </div>\n                    <Form.Control as=\"select\" onChange={handleVisitorId}>\n                        <option key={currSettings.visitorData.id}>\n                            {currSettings.visitorData.id}\n                        </option>\n                        {config.sandbox.visitorId\n                            .filter((i) => i != currSettings.visitorData.id)\n                            .map((id) => (\n                                <option key={id}>{id}</option>\n                            ))}\n                    </Form.Control>\n                </Form.Group>\n                <div className=\"fsAnchor\" id=\"playWithVisitorContext\" />\n                <Form.Group controlId=\"initForm.ControlSelect3\">\n                    <Form.Label>visitor context</Form.Label>\n                    {Object.entries({\n                        ...config.visitorData.context,\n                        ...newSettings.visitorData.context\n                    }).map(([key, value]) => (\n                        <Form.Check\n                            key={key}\n                            type=\"checkbox\"\n                            id={`default-${key}`}\n                            checked={\n                                newSettings.visitorData.context.hasOwnProperty(\n                                    key\n                                )\n                                    ? !!value\n                                    : false\n                            }\n                            onChange={handleVisitorContext}\n                            label={JSON.stringify({ [key]: value })}\n                        />\n                    ))}\n                </Form.Group>\n            </Form>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'flex-end'\n                }}\n            >\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => setSettings({ ...newSettings })}\n                >\n                    Apply change\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default PlayVisitorData;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport config from '../../../../../../../config';\nimport { SettingContext, SdkSettings, AppSettings } from '../../../../../../../App';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nconst PlayConfig: React.FC = () => {\n    const { currentSettings: currSettings, setSettings, QA } = useContext(SettingContext) as AppSettings;\n    const [newSettings, setNewSettings] = React.useState<SdkSettings>({\n        ...currSettings\n    });\n\n    const handleEnvId = (e) => setNewSettings({ ...newSettings, envId: e.target.value });\n\n    const handleNodeEnv = (e) =>\n        setNewSettings({\n            ...newSettings,\n            nodeEnv: e.target.value\n        });\n    return (\n        <>\n            <Form>\n                <Form.Group\n                    controlId=\"initForm.Control1.1\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>envId: </div>\n                    <Form.Control as=\"select\" onChange={handleEnvId}>\n                        <option key={newSettings.envId}>{newSettings.envId}</option>\n                        {config.sandbox.envId\n                            .filter((i) => i != newSettings.envId)\n                            .map((id) => (\n                                <option key={id}>{id}</option>\n                            ))}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group\n                    controlId=\"initForm.Control1.11\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>nodeEnv: </div>\n                    <Form.Control as=\"select\" onChange={handleNodeEnv}>\n                        <option key={newSettings.nodeEnv}>{newSettings.nodeEnv}</option>\n                        {config.sandbox.nodeEnv\n                            .filter((i) => i != newSettings.nodeEnv)\n                            .map((id) => (\n                                <option key={id}>{id}</option>\n                            ))}\n                    </Form.Control>\n                </Form.Group>\n                {Object.keys({\n                    ...config.sandbox.config\n                })\n                    // .filter((i) => i != 'nodeEnv')\n                    .map((setting) => (\n                        <Form.Group controlId={setting + 'Form'}>\n                            <Form.Check\n                                type=\"checkbox\"\n                                checked={!!newSettings[setting] || false}\n                                onChange={(e) => {\n                                    const toSubmit = {\n                                        ...newSettings,\n                                        [setting]: e.currentTarget.checked\n                                    };\n                                    if (typeof newSettings[setting] != 'boolean') {\n                                        delete toSubmit[setting];\n                                    }\n                                    setNewSettings(toSubmit);\n                                }}\n                                label={`${setting}=${newSettings[setting]}`}\n                            />\n                        </Form.Group>\n                    ))}\n            </Form>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'flex-end'\n                }}\n            >\n                <Button variant=\"secondary\" onClick={() => setSettings({ ...newSettings })}>\n                    Apply change\n                </Button>\n            </div>\n            <div>Since we have set those settings:</div>\n            <CodeBlock className=\"mv3\" codeString={`${JSON.stringify(currSettings, null, 2)}`} />\n            <div>When you change those values, you can notice the behavior of the SDK, on logs & network.</div>\n            <div className=\"mb5\">It will impact the output of Flagship SDK Hooks as well, take a look below.</div>\n        </>\n    );\n};\n\nexport default PlayConfig;\n","import CodeBlock from '../../../common/CodeBlock';\nimport React, { useContext } from 'react';\nimport { Alert, Button, Col, Form, Row } from 'react-bootstrap';\n\nimport { AppSettings, SdkSettings, SettingContext } from '../../../../App';\nimport config from '../../../../config';\nimport PlayConfigQA from './components/qa/PlayConfig';\nimport PlayVisitorDataQA from './components/qa/PlayVisitorData';\nimport PlayVisitorData from './components/normal/PlayVisitorData';\nimport PlayConfig from './components/normal/PlayConfig';\n\nexport const DemoInitialization = () => {\n    const name = 'initialization';\n    const { currentSettings: currSettings, setSettings, QA } = useContext(SettingContext) as AppSettings;\n    const [newSettings, setNewSettings] = React.useState<SdkSettings>({\n        ...currSettings\n    });\n\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={name} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{name}</Alert.Heading>\n                    <p>\n                        The <b>{name}</b> is proceed with <b>FlagshipProvider</b>. In this demo app, it is plugged like\n                        so:\n                    </p>\n                    <CodeBlock\n                        className=\"mv3\"\n                        codeString={`import React from 'react';\nimport { FlagshipProvider } from \"@flagship.io/react-sdk\";\n\nconst App: React.FC = () => (\n  <>\n      <FlagshipProvider\n      envId={${currSettings.envId}}\n      fetchNow={${typeof currSettings.fetchNow === 'undefined' ? 'false' : currSettings.fetchNow.toString()}}\n      activateNow={${typeof currSettings.activateNow === 'undefined' ? 'false' : currSettings.activateNow.toString()}}\n      enableConsoleLogs={${\n          typeof currSettings.enableConsoleLogs === 'undefined' ? 'false' : currSettings.enableConsoleLogs.toString()\n      }}\n      enableErrorLayout={${\n          typeof currSettings.enableErrorLayout === 'undefined' ? 'false' : currSettings.enableErrorLayout.toString()\n      }}\n      nodeEnv=\"${typeof currSettings.nodeEnv === 'undefined' ? 'undefined' : currSettings.nodeEnv.toString()}\"\n      visitorData=${JSON.stringify(currSettings.visitorData, null, 2)}\n      onInitStart={() => {\n        console.log(\"init start\");\n      }}\n      onInitDone={() => {\n        console.log(\"init done\");\n      }}\n      onUpdate={({ fsModifications }) => {\n        console.log(\n            'React SDK updated with modifications:' + JSON.stringify(fsModifications)\n        );\n      }}\n      loadingComponent={\n        <Container className=\"mt3\">\n          <Row>\n            <Col xs={12}>Loading Flagship React SDK...</Col>\n          </Row>\n        </Container>\n      }\n    >\n      <Header />\n      <AppContainer />\n    </FlagshipProvider>\n  </>\n);          `}\n                    />\n                    <p>To understand impact of each props, you can change some value dynamically here: </p>\n                    <h3\n                        id=\"playWithConfig\"\n                        style={{\n                            borderBottom: '1px solid grey',\n                            marginBottom: '16px',\n                            paddingBottom: '8px'\n                        }}\n                    >\n                        1 - Playing with <i>config</i>\n                    </h3>\n                    {QA.enabled ? <PlayConfigQA></PlayConfigQA> : <PlayConfig></PlayConfig>}\n                    <h3\n                        style={{\n                            borderBottom: '1px solid grey',\n                            marginBottom: '16px',\n                            paddingBottom: '8px'\n                        }}\n                    >\n                        2 - Playing with <i>visitorData</i>\n                    </h3>\n                    {QA.enabled ? <PlayVisitorDataQA></PlayVisitorDataQA> : <PlayVisitorData></PlayVisitorData>}\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport CodeBlock from '../../../../../common/CodeBlock';\nimport { useFsActivate } from '@flagship.io/react-sdk';\n\nconst PlayWithActivate: React.FC = () => {\n    const [toggle, setToggle] = React.useState(false);\n    useFsActivate(['color', 'unknownKey'], [toggle]);\n    const demoHookName = 'useFsActivate';\n    return (\n        <>\n            <p>\n                Use <b>{demoHookName}</b> hook to trigger activation of a\n                modification when needed:\n            </p>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`const [toggle, setToggle] = React.useState(false);\nuseFsActivate(['color','unknownKey'], [toggle]);\n\n// {...}\n\n<Button\nvariant=\"secondary\"\nonClick={() => setToggle(!toggle)}\n>\n    Trigger activate\n</Button>`}\n            />\n            <Button variant=\"secondary\" onClick={() => setToggle(!toggle)}>\n                Trigger activate\n            </Button>\n            <div className=\"mv3\">\n                <p>\n                    In this example, we're activating only when <i>toggle</i>{' '}\n                    value has changed as we have specified a 2nd argument in{' '}\n                    <i>useFsActivate</i> hook.\n                </p>\n                <p>\n                    We also specified in 1st argument that we want to activate 3\n                    keys. For each key, there is 2 possible scenarios:\n                </p>\n                <p>If the key exist, a http request \"activate\" will be done.</p>\n                <p>\n                    If the key does not exist, you will receive a warning log.\n                </p>\n            </div>\n        </>\n    );\n};\n\nexport default PlayWithActivate;\n","import React from 'react';\nimport { useFsModifications, useFsActivate } from '@flagship.io/react-sdk';\nimport { Button, Form, Col } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayWithActivateQA: React.FC = () => {\n    const [hasError, setError] = React.useState(false);\n    const [toggle, setToggle] = React.useState(false);\n    const [modificationToActivate, setModificationToActivate] = React.useState([\n        'btnColor',\n        'otherKey1',\n        'otherKey2'\n    ]);\n    useFsActivate(modificationToActivate, [toggle]);\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    modificationToActivate: modificationToActivate\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.modificationToActivate) {\n                        errors.modificationToActivate = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setModificationToActivate([\n                        ...values.modificationToActivate\n                    ]);\n                    setToggle(!toggle);\n                }}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    setFieldValue,\n                    values,\n                    touched,\n                    isValid,\n                    errors\n                }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>\n                                useFsModifications arguments\n                            </Form.Label>\n                            <JSONInput\n                                id=\"modificationToActivate\"\n                                placeholder={values.modificationToActivate}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue(\n                                            'modificationToActivate',\n                                            jsObject || {},\n                                            true\n                                        );\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Trigger activate\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    );\n};\n\nexport default PlayWithActivateQA;\n","import React, { useContext } from 'react';\nimport { Alert, Col, Row } from 'react-bootstrap';\nimport PlayWithActivate from './components/normal';\nimport { AppSettings, SettingContext } from '../../../../App';\nimport PlayWithActivateQA from './components/qa';\n\nexport const DemoUseFsActivate: React.FC = () => {\n    const demoHookName = 'useFsActivate';\n    const { QA } = useContext(SettingContext) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={demoHookName} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    {QA.enabled ? (\n                        <PlayWithActivateQA></PlayWithActivateQA>\n                    ) : (\n                        <PlayWithActivate></PlayWithActivate>\n                    )}\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { useFsModifications } from '@flagship.io/react-sdk';\nimport { Button } from 'react-bootstrap';\n\nconst PlayWithParams: React.FC = () => {\n    const fsModifications = useFsModifications([\n        {\n            key: 'color',\n            defaultValue: '#FF33E3',\n            activate: false\n        }\n    ]);\n    const demoHookName = 'useFsModifications';\n    return (\n        <>\n            <p>\n                Use <b>{demoHookName}</b> hook to get the modifications:\n            </p>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`import { useFsModifications } from '@flagship.io/react-sdk';\nconst fsModifications = useFsModifications([\n    {\n        key: 'color',\n        defaultValue: '#FF33E3',\n        activate: false\n    }\n]);`}\n            />\n            <p>Output: </p>\n            <div>\n                <Button\n                    variant=\"secondary\"\n                    style={{\n                        backgroundColor: fsModifications.color\n                    }}\n                >\n                    {`My color tells my visitor mood (backgroundColor=${fsModifications.color})`}\n                </Button>\n            </div>\n            <div className=\"mv3\">\n                Based on the campaign that we set on Flagship platform, the\n                color of the button will change depending values set in the{' '}\n                <a href=\"#playWithVisitorContext\">visitor context</a>.\n            </div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`<Button\n    variant=\"secondary\"\n    style={{\n        backgroundColor: fsModifications.color\n    }}\n>\n    {\\`My color tells my visitor mood (backgroundColor=\\${fsModifications.color})\\`}\n</Button>`}\n            />\n        </>\n    );\n};\n\nexport default PlayWithParams;\n","import React from 'react';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { useFsModifications } from '@flagship.io/react-sdk';\nimport { Button, Form, Col } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayWithParams: React.FC = () => {\n    const [hasError, setError] = React.useState(false);\n    const [fsParams, setFsParams] = React.useState([\n        {\n            key: 'btnColor',\n            defaultValue: 'green',\n            activate: false\n        }\n    ]);\n    const output = useFsModifications(fsParams);\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    fsParams\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.fsParams) {\n                        errors.fsParams = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setFsParams([...values.fsParams]);\n                }}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    setFieldValue,\n                    values,\n                    touched,\n                    isValid,\n                    errors\n                }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>\n                                useFsModifications arguments\n                            </Form.Label>\n                            <JSONInput\n                                id=\"fsParams\"\n                                placeholder={values.fsParams}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue(\n                                            'fsParams',\n                                            jsObject || {},\n                                            true\n                                        );\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Apply change\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"mv3 b\">useFsModifications output:</div>\n            <div className=\"mb3\">\n                <JSONInput\n                    id=\"fsOutput\"\n                    placeholder={output}\n                    locale={locale}\n                    height=\"550px\"\n                    viewOnly={true}\n                    width=\"100%\"\n                    style={{\n                        body: {\n                            fontSize: '16px'\n                        }\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default PlayWithParams;\n","import { useFsModifications } from '@flagship.io/react-sdk';\nimport React, { useContext } from 'react';\nimport { Alert, Col, Row, Button } from 'react-bootstrap';\nimport CodeBlock from '../../../common/CodeBlock';\nimport PlayWithParams from './components/normal/PlayWithParams';\nimport PlayWithParamsQA from './components/qa/PlayWithParams';\nimport { SettingContext, AppSettings } from '../../../../App';\n\nexport const DemoUseFsModifications = () => {\n    const demoHookName = 'useFsModifications';\n    const { QA } = useContext(SettingContext) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={demoHookName} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    {QA.enabled ? (\n                        <PlayWithParamsQA></PlayWithParamsQA>\n                    ) : (\n                        <PlayWithParams></PlayWithParams>\n                    )}\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport CodeBlock from '../../../../../common/CodeBlock';\nimport { Form } from 'react-bootstrap';\nimport { useFsSynchronize } from '@flagship.io/react-sdk';\n\nconst PlayWithSynchronize: React.FC = () => {\n    const demoHookName = 'useFsSynchronize';\n    const [listenedValue, setValue] = React.useState(false);\n    const [activateAllModifications, setActivate] = React.useState(false);\n    useFsSynchronize([listenedValue], activateAllModifications);\n    return (\n        <>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`useFsSynchronize([listenedValue], activateAllModifications);`}\n            ></CodeBlock>\n            <div>\n                When <b>listenedValue</b> value changed, it will update\n                modifications in cache (=synchronization).\n            </div>\n            <div className=\"mb3\">\n                You can also notice that enabling{' '}\n                <b>activateAllModifications</b> to true will modify the payload\n                sent to the Flagship API and thus trigger an activate.\n            </div>\n            <Form>\n                <Form.Group controlId=\"demoFsSynchronize.ControlSelect1\">\n                    <Form.Label>Playing with 1st argument</Form.Label>\n                    <Form.Check\n                        type=\"checkbox\"\n                        checked={listenedValue}\n                        onChange={(e) => setValue(e.currentTarget.checked)}\n                        label={`listenedValue=${listenedValue}`}\n                    />\n                </Form.Group>\n                <Form.Group controlId=\"demoFsSynchronize.ControlSelect2\">\n                    <Form.Label>Playing with 2nd argument</Form.Label>\n                    <Form.Check\n                        type=\"checkbox\"\n                        checked={activateAllModifications}\n                        onChange={(e) => setActivate(e.currentTarget.checked)}\n                        label={`activateAllModifications=${activateAllModifications}`}\n                    />\n                </Form.Group>\n            </Form>\n        </>\n    );\n};\n\nexport default PlayWithSynchronize;\n","import { useFsSynchronize } from '@flagship.io/react-sdk';\nimport React from 'react';\nimport { Alert, Col, Form, Row } from 'react-bootstrap';\n\nimport CodeBlock from '../../../common/CodeBlock';\nimport PlayWithSynchronize from './components/normal';\n\nexport const DemoUseFsSynchronize: React.FC = () => {\n    const demoHookName = 'useFsSynchronize';\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={demoHookName} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    <PlayWithSynchronize></PlayWithSynchronize>\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport { Button, Nav } from 'react-bootstrap';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport {\n    TransactionHit,\n    ScreenHit,\n    ItemHit,\n    EventHit\n} from '@flagship.io/js-sdk';\nimport { useFlagship } from '@flagship.io/react-sdk';\n\nconst PlayWithHits: React.FC = () => {\n    const { status: fsStatus, hit: fsHit } = useFlagship();\n    const multipleHitBundle = {\n        multipleCodeString: `<Button\n    onClick={() => {\n        const transactionHit = {\n            type: 'Transaction',\n            data: {\n                transactionId: '12451342423',\n                affiliation: 'myAffiliation',\n                totalRevenue: 999,\n                shippingCost: 888,\n                shippingMethod: 'myShippingMethod',\n                currency: 'myCurrency',\n                taxes: 1234444,\n                paymentMethod: 'myPaymentMethod',\n                itemCount: 2,\n                couponCode: 'myCOUPON',\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'myScreen'\n            }\n        };\n        const eventHit = {\n            type: 'Event',\n            data: {\n                category: 'User Engagement',\n                action: 'signOff',\n                label: 'yolo label ;)',\n                value: 123,\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'YoloTitle'\n            }\n        };\n        fsHit.sendMultiple([transactionHit, eventHit]);\n    }}\n>\n    Send multiple transaction hits\n</Button>`,\n        multipleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const transactionHit = {\n                        type: 'Transaction',\n                        data: {\n                            transactionId: '12451342423',\n                            affiliation: 'myAffiliation',\n                            totalRevenue: 999,\n                            shippingCost: 888,\n                            shippingMethod: 'myShippingMethod',\n                            currency: 'myCurrency',\n                            taxes: 1234444,\n                            paymentMethod: 'myPaymentMethod',\n                            itemCount: 2,\n                            couponCode: 'myCOUPON',\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'myScreen'\n                        }\n                    } as {\n                        type: 'Transaction';\n                        data: TransactionHit;\n                    };\n                    const eventHit = {\n                        type: 'Event',\n                        data: {\n                            category: 'User Engagement',\n                            action: 'signOff',\n                            label: 'yolo label ;)',\n                            value: 123,\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloTitle'\n                        }\n                    } as {\n                        type: 'Event';\n                        data: EventHit;\n                    };\n                    fsHit.sendMultiple([transactionHit, eventHit]);\n                }}\n            >\n                Send multiple mixed hits\n            </Button>\n        )\n    };\n    const transactionHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Transaction',\n            data: {\n                transactionId: '12451342423',\n                affiliation: 'myAffiliation',\n                totalRevenue: 999,\n                shippingCost: 888,\n                shippingMethod: 'myShippingMethod',\n                currency: 'myCurrency',\n                taxes: 1234444,\n                paymentMethod: 'myPaymentMethod',\n                itemCount: 2,\n                couponCode: 'myCOUPON',\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'myScreen'\n            }\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a transaction hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Transaction',\n                        data: {\n                            transactionId: '12451342423',\n                            affiliation: 'myAffiliation',\n                            totalRevenue: 999,\n                            shippingCost: 888,\n                            shippingMethod: 'myShippingMethod',\n                            currency: 'myCurrency',\n                            taxes: 1234444,\n                            paymentMethod: 'myPaymentMethod',\n                            itemCount: 2,\n                            couponCode: 'myCOUPON',\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'myScreen'\n                        }\n                    } as {\n                        type: 'Transaction';\n                        data: TransactionHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a transaction hit\n            </Button>\n        )\n    };\n    const screenHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Screen',\n            data: {\n                documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'YoloScreen',\n            },\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a screen hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Screen',\n                        data: {\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloScreen'\n                        }\n                    } as {\n                        type: 'Screen';\n                        data: ScreenHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a screen hit\n            </Button>\n        )\n    };\n    const itemHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Item',\n            data: {\n              transactionId: '12451342423',\n              name: 'yoloItem',\n              price: 999,\n              code: 'yoloCode',\n              category: 'yoloCategory',\n              quantity: 1234444,\n              documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n              pageTitle: 'YoloScreen',\n            }\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a item hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Item',\n                        data: {\n                            transactionId: '12451342423',\n                            name: 'yoloItem',\n                            price: 999,\n                            code: 'yoloCode',\n                            category: 'yoloCategory',\n                            quantity: 1234444,\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloScreen'\n                        }\n                    } as {\n                        type: 'Item';\n                        data: ItemHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a item hit\n            </Button>\n        )\n    };\n\n    const eventHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Event',\n            data: {\n                category: 'User Engagement',\n                action: 'signOff',\n                label: 'yolo label ;)',\n                value: 123,\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'YoloTitle'\n            }\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a page hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Event',\n                        data: {\n                            category: 'User Engagement',\n                            action: 'signOff',\n                            label: 'yolo label ;)',\n                            value: 123,\n                            documentLocation:\n                                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloTitle'\n                        }\n                    } as {\n                        type: 'Event';\n                        data: EventHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a item hit\n            </Button>\n        )\n    };\n    const [currentTestedHit, setHitToTest] = React.useState<{\n        simpleCodeString: string;\n        simpleComponent: React.ReactNode;\n    }>(transactionHitBundle);\n    return (\n        <>\n            <div className=\"mb3\">\n                If you're not familiar with the payload that you should a\n                provide to the hit you want to send, you'll have all details\n                available in the{' '}\n                <a href=\"https://github.com/abtasty/flagship-react-sdk#shape-of-possible-hits-to-send\">\n                    SDK Hit documentation\n                </a>\n                .\n            </div>\n            <div>\n                <b>NOTE:</b>\n                <p>\n                    It is not necessary to provide parameters to{' '}\n                    <i>useFlagship</i> if your purpose is only to send hits.\n                </p>\n                <CodeBlock\n                    className=\"mv3\"\n                    codeString={`import { useFlagship } from '@flagship.io/react-sdk';\nconst { hit: fsHit } = useFlagship();`}\n                />\n            </div>\n            <p>Send a hit, demo: </p>\n            <Nav variant=\"tabs\" defaultActiveKey=\"hitTransaction\">\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitTransaction\"\n                        onClick={() => setHitToTest(transactionHitBundle)}\n                    >\n                        Transaction Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitScreen\"\n                        onClick={() => setHitToTest(screenHitBundle)}\n                    >\n                        Screen Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitEvent\"\n                        onClick={() => setHitToTest(eventHitBundle)}\n                    >\n                        Event Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitItem\"\n                        onClick={() => setHitToTest(itemHitBundle)}\n                    >\n                        Item Hit\n                    </Nav.Link>\n                </Nav.Item>\n            </Nav>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={currentTestedHit.simpleCodeString}\n            />\n            <div>{currentTestedHit.simpleComponent}</div>\n            <div className=\"mt3\">Send multiple mixed hit, demo: </div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={multipleHitBundle.multipleCodeString}\n            />\n            <div>{multipleHitBundle.multipleComponent}</div>\n        </>\n    );\n};\n\nexport default PlayWithHits;\n","import React from 'react';\nimport { useFlagship } from '@flagship.io/react-sdk';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { Button, Form, Col, Nav } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport flagship from '@flagship.io/js-sdk';\n\nconst PlayWithHits: React.FC = () => {\n    const defaultTransactionHitPayload = {\n        type: 'Transaction',\n        data: {\n            transactionId: '12451342423',\n            affiliation: 'yoloAffiliation',\n            totalRevenue: 999,\n            shippingCost: 888,\n            shippingMethod: 'yoloShippingMethod',\n            currency: 'yoloCurrency',\n            taxes: 1234444,\n            paymentMethod: 'yoloPaymentMethod',\n            itemCount: 2,\n            couponCode: 'YOLOCOUPON',\n            documentLocation:\n                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloScreen'\n        }\n    };\n    const defaultScreenHitPayload = {\n        type: 'Screen',\n        data: {\n            documentLocation:\n                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloScreen'\n        }\n    };\n    const defaultEventHitPayload = {\n        type: 'Event',\n        data: {\n            category: 'User Engagement',\n            action: 'signOff',\n            label: 'yolo label ;)',\n            value: 123,\n            documentLocation:\n                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloTitle'\n        }\n    };\n    const defaultItemHitPayload = {\n        type: 'Item',\n        data: {\n            transactionId: '12451342423',\n            name: 'yoloItem',\n            price: 999,\n            code: 'yoloCode',\n            category: 'yoloCategory',\n            quantity: 1234444,\n            documentLocation:\n                'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloScreen'\n        }\n    };\n    const payloads = {\n        transaction: defaultTransactionHitPayload,\n        screen: defaultScreenHitPayload,\n        event: defaultEventHitPayload,\n        item: defaultItemHitPayload\n    };\n    const [hasError, setError] = React.useState(false);\n    const [hasError2, setError2] = React.useState(false);\n    const [currentTestedHit, setHitToTest] = React.useState<string>(\n        'transaction'\n    );\n    const [hitPayload, setHitPayload] = React.useState(\n        payloads[currentTestedHit]\n    );\n\n    const [hitsPayload, setHitsPayload] = React.useState([\n        { ...payloads.transaction },\n        { ...payloads.screen },\n        { ...payloads.event },\n        { ...payloads.item }\n    ]);\n    React.useEffect(() => setHitPayload(payloads[currentTestedHit]), [\n        currentTestedHit\n    ]);\n    const { hit: fsHit } = useFlagship();\n    return (\n        <>\n            <p>Send a hit, demo: </p>\n            <Nav variant=\"tabs\" defaultActiveKey=\"hitTransaction\">\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitTransaction\"\n                        onClick={() => setHitToTest('transaction')}\n                    >\n                        Transaction Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitScreen\"\n                        onClick={() => setHitToTest('screen')}\n                    >\n                        Screen Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitEvent\"\n                        onClick={() => setHitToTest('event')}\n                    >\n                        Event Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link\n                        eventKey=\"hitItem\"\n                        onClick={() => setHitToTest('item')}\n                    >\n                        Item Hit\n                    </Nav.Link>\n                </Nav.Item>\n            </Nav>\n            <Formik\n                enableReinitialize={true}\n                initialValues={{\n                    hitPayload\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.hitPayload) {\n                        errors.hitPayload = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setHitPayload({ ...values.hitPayload });\n                    fsHit.send({ ...values.hitPayload });\n                }}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    setFieldValue,\n                    values,\n                    touched,\n                    isValid,\n                    errors\n                }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>\n                                {currentTestedHit} hit payload\n                            </Form.Label>\n                            <JSONInput\n                                id=\"hitPayload\"\n                                placeholder={values.hitPayload}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue(\n                                            'hitPayload',\n                                            jsObject || {},\n                                            true\n                                        );\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Send hit\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"mv3\">\n                Have a look to logs + network on your browser inspect tools to\n                see results.\n            </div>\n            <Formik\n                initialValues={{\n                    hitsPayload\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.hitsPayload) {\n                        errors.hitsPayload = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setHitsPayload([...values.hitsPayload]);\n                    fsHit.sendMultiple([\n                        ...values.hitsPayload\n                    ] as flagship.HitShape[]);\n                }}\n            >\n                {({\n                    handleSubmit,\n                    handleChange,\n                    handleBlur,\n                    setFieldValue,\n                    values,\n                    touched,\n                    isValid,\n                    errors\n                }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>sendMultiple argument</Form.Label>\n                            <JSONInput\n                                id=\"hitsPayload\"\n                                placeholder={values.hitsPayload}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue(\n                                            'hitsPayload',\n                                            jsObject || {},\n                                            true\n                                        );\n                                        setError2(false);\n                                    } else {\n                                        setError2(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError2}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError2\n                                        ? 'not-allowed'\n                                        : 'pointer'\n                                }}\n                            >\n                                Send multiple hits\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    );\n};\n\nexport default PlayWithHits;\n","import React from 'react';\nimport { useFlagship } from '@flagship.io/react-sdk';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { Button, Form, Col } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayWithModifications: React.FC = () => {\n    const [hasError, setError] = React.useState(false);\n    const [fsParams, setFsParams] = React.useState({\n        modifications: {\n            requested: [\n                {\n                    key: 'btnColor',\n                    defaultValue: 'green',\n                    activate: false\n                }\n            ]\n        }\n    });\n    const output = useFlagship(fsParams);\n    const { modifications: fsModifications } = output;\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    fsParams\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.fsParams) {\n                        errors.fsParams = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setFsParams({ ...values.fsParams });\n                }}\n            >\n                {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, isValid, errors }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>useFlagship arguments</Form.Label>\n                            <JSONInput\n                                id=\"fsParams\"\n                                placeholder={values.fsParams}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue('fsParams', jsObject || {}, true);\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Apply change\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"mv3 b\">useFlagship output:</div>\n            <div className=\"mb3\">\n                <JSONInput\n                    id=\"fsIutput\"\n                    placeholder={Object.keys(output).reduce(\n                        (reducer, key) => ({\n                            ...reducer,\n                            [key]: typeof output[key] === 'function' ? '**** defined function ****' : output[key]\n                        }),\n                        {}\n                    )}\n                    locale={locale}\n                    height=\"550px\"\n                    viewOnly={true}\n                    width=\"100%\"\n                    style={{\n                        body: {\n                            fontSize: '16px'\n                        }\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default PlayWithModifications;\n","import React from 'react';\nimport { useFlagship } from '@flagship.io/react-sdk';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { Button } from 'react-bootstrap';\n\nconst PlayWithModifications: React.FC = () => {\n    const fsParams = {\n        modifications: {\n            requested: [\n                {\n                    key: 'color',\n                    defaultValue: '#FF33E3',\n                    activate: false\n                }\n            ]\n        }\n    };\n    const output = useFlagship(fsParams);\n    const { modifications: fsModifications } = output;\n    return (\n        <>\n            <p>demo: </p>\n            <div>\n                <Button\n                    variant=\"secondary\"\n                    style={{\n                        backgroundColor: fsModifications.color\n                    }}\n                >\n                    {`I'm a button customized with Flagship (backgroundColor=${fsModifications.color})`}\n                </Button>\n            </div>\n            <div className=\"mv3\">\n                Based on the campaign that we set on Flagship platform, the\n                color of the button will change depending values set in the{' '}\n                <a href=\"#playWithVisitorContext\">visitor context</a>.\n            </div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`<Button\n    variant=\"secondary\"\n    style={{\n        backgroundColor: fsModifications.color\n    }}\n>\n    {\\`My color tells my visitor mood (backgroundColor=\\${fsModifications.color})\\`}\n</Button>`}\n            />\n        </>\n    );\n};\n\nexport default PlayWithModifications;\n","import React from 'react';\n\nimport CodeBlock from '../../../../../../common/CodeBlock';\n\nconst PlayWithModificationInfo: React.FC = () => {\n    return (\n        <>\n            <div className=\"mv3\">This function provides all the data needed to send it to a third party tool.</div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`const { getModificationInfo } = useFlagship();\nreturn (\n    <Button\n        onClick={getModificationInfo('color')\n            .then((response) => {\n                // when succeed\n            })\n            .catch((error) => {\n                // when fail\n            })}\n    >\n        Apply change\n    </Button>\n);`}\n            />\n        </>\n    );\n};\n\nexport default PlayWithModificationInfo;\n","import React from 'react';\nimport { useFlagship } from '@flagship.io/react-sdk';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { Button, Form, Col } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayWithModificationInfo: React.FC = () => {\n    const [hasError, setError] = React.useState(false);\n    const [fsParams, setFsParams] = React.useState('color');\n    const [fsOutput, setFsOutput] = React.useState<any>({ data: null, loading: false, noCall: true });\n    const { getModificationInfo } = useFlagship();\n\n    const handleDisplay = () => {\n        if (fsOutput.data === null) {\n            return fsOutput.noCall\n                ? 'Please click \"Apply change\"to see the result.'\n                : 'getModificationInfo returned \"null\"';\n        } else {\n            if (fsOutput.loading) {\n                return 'Loading...';\n            }\n            return (\n                <JSONInput\n                    id=\"fsGetModificationOutput\"\n                    placeholder={fsOutput.data}\n                    locale={locale}\n                    height=\"550px\"\n                    viewOnly={true}\n                    width=\"100%\"\n                    style={{\n                        body: {\n                            fontSize: '16px'\n                        }\n                    }}\n                />\n            );\n        }\n    };\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    fsParams\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setFsOutput({ data: {}, loading: true });\n                    setFsParams(values.fsParams);\n                    if (getModificationInfo) {\n                        getModificationInfo(values.fsParams)\n                            .then((response) => {\n                                setFsOutput({ data: response, loading: false });\n                            })\n                            .catch((e) => {\n                                setFsOutput({ data: { error: e.message }, loading: false });\n                            });\n                    }\n                }}\n            >\n                {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, isValid, errors }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"modificationInfoKey\">\n                            <Form.Label>Modification key</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"fsParams\"\n                                value={values.fsParams}\n                                onChange={handleChange}\n                                isValid={touched.fsParams && !errors.fsParams}\n                                isInvalid={!!errors.fsParams}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">{errors.fsParams}</Form.Control.Feedback>\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Apply change\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"mv3 b\">getModificationInfo output:</div>\n            <div className=\"mb3\">{handleDisplay()}</div>\n        </>\n    );\n};\n\nexport default PlayWithModificationInfo;\n","import { useFlagship } from '@flagship.io/react-sdk';\nimport React, { useContext } from 'react';\nimport { Alert, Col, Row, Button, Nav } from 'react-bootstrap';\nimport CodeBlock from '../../../common/CodeBlock';\nimport { TransactionHit } from '@flagship.io/js-sdk';\nimport PlayWithHits from './components/normal/PlayWithHits';\nimport PlayWithHitsQA from './components/qa/PlayWithHits';\nimport { SettingContext, AppSettings } from '../../../../App';\nimport PlayWithModificationsQA from './components/qa/PlayWithModifications';\nimport PlayWithModifications from './components/normal/PlayWithModifications';\nimport PlayWithModificationInfo from './components/normal/PlayWithModificationInfo';\nimport PlayWithModificationInfoQA from './components/qa/PlayWithModificationInfo';\n\nexport const DemoUseFlagship = () => {\n    const fsParams = {\n        modifications: {\n            requested: [\n                {\n                    key: 'btnColor',\n                    defaultValue: 'green',\n                    activate: false\n                }\n            ]\n        }\n    };\n    const output = useFlagship(fsParams);\n    const { modifications: fsModifications } = output;\n    const { status: fsStatus, hit: fsHit } = useFlagship();\n    const demoHookName = 'useFlagship';\n    const { QA } = useContext(SettingContext) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={demoHookName} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    <p>\n                        Use <b>{demoHookName}</b> hook to get access to further stuff such as <i>modifications</i>,{' '}\n                        <i>sdk status</i>, <i>hits</i> :\n                    </p>\n                    <CodeBlock\n                        className=\"mv3\"\n                        codeString={`import { useFlagship } from '@flagship.io/react-sdk';\nconst fsParams = {\n    modifications: {\n        requested: [\n            {\n                key: 'btnColor',\n                defaultValue: 'green',\n                activate: false\n            }\n        ]\n    }\n}\nconst {\n    modifications: fsModifications,\n    status: fsStatus,\n    hit: fsHit,\n} = useFlagship(fsParams);`}\n                    />\n                    <h3>\n                        1 - Playing with <i>fsModifications</i>\n                    </h3>\n                    {QA.enabled ? (\n                        <PlayWithModificationsQA></PlayWithModificationsQA>\n                    ) : (\n                        <PlayWithModifications></PlayWithModifications>\n                    )}\n                    <h3>\n                        2 - Reading <i>fsStatus</i>\n                    </h3>\n\n                    <p>It gives you some information about the current status of the SDK:</p>\n                    <CodeBlock\n                        className=\"mv3\"\n                        codeString={`\nfsStatus=${JSON.stringify(fsStatus, null, 2)};\n                        `}\n                    />\n                    <div className=\"fsAnchor\" id=\"sendHits\"></div>\n                    <h3>\n                        3 - Playing with <i>hits</i>\n                    </h3>\n                    {QA.enabled ? <PlayWithHitsQA></PlayWithHitsQA> : <PlayWithHits></PlayWithHits>}\n                    <div className=\"fsAnchor\" id=\"getModificationInfos\"></div>\n                    <h3 className=\"mt3\">\n                        4 - Get modification <i>informations</i>\n                    </h3>\n                    {!QA.enabled && <PlayWithModificationInfo></PlayWithModificationInfo>}\n                    <PlayWithModificationInfoQA></PlayWithModificationInfoQA>\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React, { useContext } from 'react';\nimport { Alert, Col, Row, Button } from 'react-bootstrap';\nimport { SettingContext, AppSettings } from '../../../../App';\n\nexport const DemoErrorBoundary = () => {\n    const demoHookName = 'Safe Mode';\n    const [triggerError, setTriggerError] = React.useState(false);\n    React.useEffect(() => {\n        if (triggerError) {\n            throw new Error('Flagship - Creating an error just for test...');\n        }\n        setTriggerError(false);\n    }, [triggerError]);\n\n    const { currentSettings, setSettings, QA } = useContext(SettingContext) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id=\"safeMode\" />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    <p>\n                        When an error occurs unexpectedly, the React SDK switch automatically into <b>{demoHookName}</b>\n                        . Thus, default value of modifications will always be returned. Moreover, other features will\n                        just log an error without crash.\n                    </p>\n                    <div>\n                        <Button\n                            variant=\"secondary\"\n                            onClick={() => {\n                                setTriggerError(true);\n                            }}\n                        >\n                            Throw an error\n                        </Button>\n                        {currentSettings.nodeEnv === 'production' && (\n                            <div className=\"mv3\">\n                                <b>NOTE:</b> You might not see the banner because you are in 'production' environment.\n                                You need to change value of <i>nodeEnv</i> in <a href=\"#playWithConfig\">SDK settings</a>\n                                .\n                            </div>\n                        )}\n                        {!currentSettings.enableErrorLayout && (\n                            <div className=\"mv3\">\n                                <b>NOTE:</b> You might not see the banner because the setting <i>enableErrorLayout</i>{' '}\n                                is disabled, you need to change the value in <a href=\"#playWithConfig\">SDK settings</a>.\n                            </div>\n                        )}\n                    </div>\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nimport { DemoInitialization } from './components/DemoInitialization';\nimport { DemoUseFsActivate } from './components/DemoUseFsActivate';\nimport { DemoUseFsModifications } from './components/DemoUseFsModifications';\nimport { DemoUseFsSynchronize } from './components/DemoUseFsSynchronize';\nimport { DemoUseFlagship } from './components/DemoUseFlagship';\nimport { DemoErrorBoundary } from './components/DemoErrorBoundary';\n\nexport const AppContainer: React.FC = () => {\n    return (\n        <Container className=\"mt3\">\n            <DemoInitialization />\n            <DemoUseFlagship />\n            <DemoUseFsModifications />\n            <DemoUseFsActivate />\n            <DemoUseFsSynchronize />\n            <DemoErrorBoundary />\n        </Container>\n    );\n};\n","import React, { useContext } from 'react';\nimport { Navbar, Nav, Form, NavDropdown } from 'react-bootstrap';\nimport Logo from '../../assets/Flagship-horizontal-product-white.png';\nimport { AppSettings, SettingContext } from '../../App';\n\nconst AppHeader: React.FC = () => {\n    const { QA, setQA } = useContext(SettingContext) as AppSettings;\n    const okEmoji = '✅';\n    return (\n        <>\n            <Navbar className=\"fsNavbar\" fixed=\"top\">\n                <Navbar.Brand href=\"https://github.com/abtasty/flagship-react-sdk\" className=\"flex item-center\">\n                    <img alt=\"Logo Flagship\" src={Logo} className=\"d-inline-block align-top logoAdjust\" />\n                    React SDK (Dev demo)\n                </Navbar.Brand>\n                <Nav className=\"mr-auto fsNav\">\n                    <Nav.Link href=\"#initialization\">Initialization</Nav.Link>\n                    <NavDropdown title=\"Hooks\" id=\"nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"4.0\" href=\"#useFlagship\">\n                            useFlagship\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.1\" href=\"#useFsModifications\">\n                            useFsModifications\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.2\" href=\"#useFsActivate\">\n                            useFsActivate\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.3\" href=\"#useFsSynchronize\">\n                            useFsSynchronize\n                        </NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Features\" id=\"nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"4.0\" href=\"#useFlagship\">\n                            Get modification(s)\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.5\" href=\"#getModificationInfos\">\n                            Get modification Informations\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.1\" href=\"#useFsActivate\">\n                            Activate modification(s)\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.2\" href=\"#sendHits\">\n                            Send Hit(s)\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.3\" href=\"#useFsSynchronize\">\n                            Refresh modifications\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.4\" href=\"#safeMode\">\n                            Safe Mode\n                        </NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n\n                <Form inline>\n                    <NavDropdown title=\"QA mode\" id=\"nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"10.0\" onClick={() => setQA({ ...QA, enabled: true })}>\n                            ON {QA.enabled && okEmoji}\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"10.1\" onClick={() => setQA({ ...QA, enabled: false })}>\n                            OFF {!QA.enabled && okEmoji}\n                        </NavDropdown.Item>\n                    </NavDropdown>\n                    <Nav.Link href=\"https://github.com/abtasty/flagship-react-sdk\">Github</Nav.Link>\n                    <Nav.Link href=\"https://www.abtasty.com/solutions-product-teams/\">What is Flagship ?</Nav.Link>\n                </Form>\n            </Navbar>\n        </>\n    );\n};\nexport default AppHeader;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport {\n    Navbar,\n    Nav,\n    Form,\n    NavDropdown,\n    Modal,\n    Col,\n    Button\n} from 'react-bootstrap';\nimport { SettingContext, AppSettings } from '../../../../App';\n\ndeclare type Props = {\n    onHide(): void;\n    show: boolean;\n};\n\nconst SettingsModal: React.FC<Props> = ({ onHide, show }) => {\n    return (\n        <>\n            <Modal\n                size=\"lg\"\n                show={show}\n                onHide={onHide}\n                aria-labelledby=\"example-modal-sizes-title-lg\"\n            >\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"example-modal-sizes-title-lg\">\n                        Edit SDK settings:\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>...</Modal.Body>\n            </Modal>\n        </>\n    );\n};\nexport default SettingsModal;\n","import React, { useContext } from 'react';\nimport { Navbar, Nav, Form, NavDropdown } from 'react-bootstrap';\nimport Logo from '../../assets/Flagship-horizontal-product-white.png';\nimport { AppSettings, SettingContext } from '../../App';\nimport SettingsModal from './components/SettingsModal';\n\nconst QaHeader: React.FC = () => {\n    const { QA, setQA } = useContext(SettingContext) as AppSettings;\n    if (!QA.enabled) {\n        return null;\n    }\n    return (\n        <>\n            <Navbar className=\"fsNavbar qaHeader\" fixed=\"top\">\n                <Navbar.Brand href=\"#\" className=\"flex item-center\">\n                    QA Mode: <span className=\"green\">Enabled</span>\n                </Navbar.Brand>\n                <Nav className=\"mr-auto fsNav\">\n                    {/* <Nav.Link\n                        onClick={() =>\n                            setQA({\n                                ...QA,\n                                show: { ...QA.show, settingsModal: true }\n                            })\n                        }\n                    >\n                        Edit settings\n                    </Nav.Link> */}\n                </Nav>\n\n                <Form inline>\n                    <Nav.Link onClick={() => setQA({ ...QA, enabled: false })}>\n                        Switch off\n                    </Nav.Link>\n                </Form>\n            </Navbar>\n            <SettingsModal\n                onHide={() =>\n                    setQA({ ...QA, show: { ...QA.show, settingsModal: false } })\n                }\n                show={QA.show.settingsModal}\n            ></SettingsModal>\n        </>\n    );\n};\nexport default QaHeader;\n","import './App.css';\n\nimport { FlagshipProvider } from '@flagship.io/react-sdk';\nimport React, { createContext, Dispatch, SetStateAction } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\n\nimport { AppContainer } from './components/AppContainer';\nimport config from './config';\nimport AppHeader from './components/AppHeader';\nimport QaHeader from './components/QaHeader';\ninterface VisitorContext {\n    [key: string]: any;\n}\nexport interface SdkSettings {\n    envId: string;\n    fetchNow?: boolean;\n    activateNow?: boolean;\n    enableConsoleLogs?: boolean;\n    enableErrorLayout?: boolean;\n    enableSafeMode?: boolean;\n    nodeEnv?: string;\n    flagshipApi?: string;\n    apiKey?: string;\n    visitorData: {\n        id: string;\n        context: VisitorContext;\n    };\n}\nexport interface AppSettings {\n    currentSettings: SdkSettings;\n    setSettings: Dispatch<SetStateAction<SdkSettings>>;\n    QA: QA;\n    setQA: Dispatch<SetStateAction<QA>>;\n}\n\nexport interface QA {\n    enabled: boolean;\n    show: {\n        settingsModal: boolean;\n    };\n}\n\nexport const SettingContext = createContext<AppSettings | null>(null);\n\nconst App: React.FC = () => {\n    const [currentSettings, setSettings] = React.useState<SdkSettings>({\n        envId: config.envId,\n        fetchNow: config.fetchNow,\n        enableConsoleLogs: config.enableConsoleLogs,\n        enableErrorLayout: config.enableErrorLayout,\n        nodeEnv: 'production',\n        visitorData: { ...config.visitorData }\n    });\n    const [QA, setQA] = React.useState<QA>({\n        enabled: false,\n        show: {\n            settingsModal: false\n        }\n    });\n    return (\n        <>\n            <SettingContext.Provider value={{ currentSettings, setSettings, QA, setQA }}>\n                <FlagshipProvider\n                    envId={currentSettings.envId}\n                    fetchNow={currentSettings.fetchNow}\n                    enableConsoleLogs={currentSettings.enableConsoleLogs}\n                    enableErrorLayout={currentSettings.enableErrorLayout}\n                    enableSafeMode={true}\n                    nodeEnv={currentSettings.nodeEnv}\n                    visitorData={currentSettings.visitorData}\n                    onInitStart={() => {\n                        console.log('React SDK init start');\n                    }}\n                    onInitDone={() => {\n                        console.log('React SDK init done');\n                    }}\n                    onUpdate={({ fsModifications }) => {\n                        console.log('React SDK updated with modifications:\\n' + JSON.stringify(fsModifications));\n                    }}\n                    loadingComponent={\n                        <Container className=\"mt5\">\n                            <Row>\n                                <Col\n                                    xs={12}\n                                    style={{\n                                        color: 'white',\n                                        height: '100vh',\n                                        fontSize: '5vw'\n                                    }}\n                                >\n                                    Loading Flagship React SDK...\n                                </Col>\n                            </Row>\n                        </Container>\n                    }\n                >\n                    <AppHeader />\n                    <QaHeader />\n                    <AppContainer />\n                </FlagshipProvider>\n            </SettingContext.Provider>\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Flagship-horizontal-product-white.6e8b90f3.png\";"],"sourceRoot":""}