{"version":3,"sources":["components/common/CodeBlock.tsx","config/index.tsx","components/AppContainer/components/DemoInitialization/components/normal/PlayConfig/index.tsx","components/AppContainer/components/DemoInitialization/components/normal/PlayVisitorData/index.tsx","components/AppContainer/components/DemoInitialization/components/qa/PlayConfig/index.tsx","components/AppContainer/components/DemoInitialization/components/qa/PlayVisitorData/index.tsx","components/AppContainer/components/DemoInitialization/index.tsx","components/AppContainer/components/DemoUseFsActivate/components/normal/index.tsx","components/AppContainer/components/DemoUseFsActivate/components/qa/index.tsx","components/AppContainer/components/DemoUseFsActivate/index.tsx","components/AppContainer/components/DemoUseFsModifications/components/normal/PlayWithParams/index.tsx","components/AppContainer/components/DemoUseFsModifications/components/qa/PlayWithParams/index.tsx","components/AppContainer/components/DemoUseFsModifications/index.tsx","components/AppContainer/components/DemoUseFsSynchronize/components/normal/index.tsx","components/AppContainer/components/DemoUseFsSynchronize/index.tsx","components/AppContainer/components/DemoUseFlagship/components/normal/PlayWithHits/index.tsx","components/AppContainer/components/DemoUseFlagship/components/normal/PlayWithModificationInfo/index.tsx","components/AppContainer/components/DemoUseFlagship/components/normal/PlayWithModifications/index.tsx","components/AppContainer/components/DemoUseFlagship/components/qa/PlayWithHits/index.tsx","components/AppContainer/components/DemoUseFlagship/components/qa/PlayWithModificationInfo/index.tsx","components/AppContainer/components/DemoUseFlagship/components/qa/PlayWithModifications/index.tsx","components/AppContainer/components/DemoUseFlagship/components/normal/PlayWithStartAndStopBucketing/index.tsx","components/AppContainer/components/DemoUseFlagship/components/qa/PlayWithStartAndStopBucketing/index.tsx","components/AppContainer/components/DemoUseFlagship/index.tsx","components/AppContainer/components/DemoErrorBoundary/index.tsx","components/AppContainer/index.tsx","components/AppHeader/index.tsx","components/QaHeader/components/SettingsModal/index.tsx","components/QaHeader/index.tsx","App.tsx","serviceWorker.ts","index.tsx","assets/Flagship-horizontal-product-white.png"],"names":["SyntaxHighlighter","registerLanguage","jsx","CodeBlock","className","codeString","language","style","darcula","showLineNumbers","config","envId","fetchNow","decisionMode","pollingInterval","timeout","enableConsoleLogs","enableErrorLayout","nodeEnv","flagshipApi","apiKey","enableSafeMode","visitorData","id","context","isAwesome","isEvil","sandbox","visitorId","PlayConfig","useContext","SettingContext","currSettings","currentSettings","setSettings","React","useState","newSettings","setNewSettings","handleSettings","e","key","parseInt","target","value","split","parseFloat","Form","Group","controlId","display","alignItems","marginLeft","Control","type","onChange","placeholder","as","filter","i","map","toString","Object","keys","setting","Check","checked","toSubmit","currentTarget","label","justifyContent","Button","variant","onClick","NotificationManager","info","JSON","stringify","PlayVisitorData","handleVisitorContext","node","parse","parentElement","innerText","temp","keyToRemove","entries","reduce","reducer","includes","Label","hasOwnProperty","hasError","setError","initialValues","settings","activateNow","validate","values","errors","onSubmit","setSubmitting","handleSubmit","handleChange","setFieldValue","handleBlur","touched","isValid","noValidate","Col","md","name","isInvalid","Feedback","waitAfterKeyPress","locale","height","width","error","jsObject","body","fontSize","disabled","cursor","vId","vContext","DemoInitialization","QA","Row","Alert","Heading","slice","borderBottom","marginBottom","paddingBottom","enabled","PlayWithActivate","toggle","setToggle","useFsActivate","PlayWithActivateQA","modificationToActivate","setModificationToActivate","DemoUseFsActivate","PlayWithParams","fsModifications","useFsModifications","defaultValue","activate","backgroundColor","color","href","fsParams","setFsParams","output","viewOnly","DemoUseFsModifications","PlayWithSynchronize","activateAllModifications","setActivate","synchronizeModifications","useFlagship","then","statusCode","catch","stack","DemoUseFsSynchronize","PlayWithHits","fsHit","hit","multipleHitBundle","multipleCodeString","multipleComponent","sendMultiple","data","transactionId","affiliation","totalRevenue","shippingCost","shippingMethod","currency","taxes","paymentMethod","itemCount","couponCode","documentLocation","pageTitle","category","action","transactionHitBundle","simpleCodeString","simpleComponent","send","screenHitBundle","itemHitBundle","price","code","quantity","eventHitBundle","currentTestedHit","setHitToTest","Nav","defaultActiveKey","Item","Link","eventKey","PlayWithModificationInfo","PlayWithModifications","modifications","requested","payloads","transaction","screen","event","item","hasError2","setError2","hitPayload","setHitPayload","hitsPayload","setHitsPayload","useEffect","enableReinitialize","loading","noCall","fsOutput","setFsOutput","getModificationInfo","response","message","PlayWithStartAndStopBucketing","PlayWithStartAndStopBucketingQA","startBucketingPolling","stopBucketingPolling","result","success","reason","DemoUseFlagship","fsStatus","status","DemoErrorBoundary","triggerError","setTriggerError","Error","AppContainer","Container","AppHeader","setQA","Navbar","fixed","Brand","alt","src","Logo","NavDropdown","title","inline","SettingsModal","onHide","show","Modal","size","aria-labelledby","Header","closeButton","Title","Body","QaHeader","settingsModal","createContext","App","Provider","onInitStart","console","log","onInitDone","onUpdate","onBucketingSuccess","loadingComponent","xs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"mUAIAA,IAAkBC,iBAAiB,MAAOC,KAO1C,IAceC,EAd6B,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,UAAWC,EAAiB,EAAjBA,WACtD,OACI,yBAAKD,UAAWA,GACZ,kBAAC,IAAD,CACIE,SAAS,aACTC,MAAOC,IACPC,iBAAe,GAEdJ,K,yBCYFK,EA/BA,CACXC,MAAO,uBACPC,UAAU,EACVC,aAAc,MACdC,gBAAiB,GACjBC,QAAS,EACTC,mBAAmB,EACnBC,mBAAmB,EACnBC,QAAS,aACTC,YAAa,uCACbC,OAAQ,KACRC,gBAAgB,EAChBC,YAAa,CACTC,GAAI,WACJC,QAAS,CAAEC,WAAW,EAAOC,QAAQ,IAEzCC,QAAS,CACLjB,OAAQ,CACJE,UAAU,EACVI,mBAAmB,EACnBC,mBAAmB,GAEvBN,MAAO,CAAC,8BAA+B,+BACvCO,QAAS,CAAC,aAAc,eACxBJ,gBAAiB,CAAC,GAAI,GAAI,IAAK,KAC/BD,aAAc,CAAC,MAAO,aACtBE,QAAS,CAAC,IAAM,GAAK,EAAG,GACxBI,YAAa,CAAC,uCAAwC,oCACtDS,UAAW,CAAC,WAAY,aAAc,gBCmL/BC,EAtMc,WAAO,IAAD,IACmCC,qBAAWC,IAApDC,EADM,EACvBC,gBAA+BC,EADR,EACQA,YADR,EAEOC,IAAMC,SAAN,eAC/BJ,IAHwB,mBAExBK,EAFwB,KAEXC,EAFW,KAMzBC,EAAiB,SAACC,EAAGC,GASvBH,EAAe,eACRD,EADO,eAETI,EATW,oBAARA,EACOC,SAASF,EAAEG,OAAOC,MAAMC,MAAM,QAAQ,IAC9B,YAARJ,EACAK,WAAWN,EAAEG,OAAOC,MAAMC,MAAM,cAAc,IAElDL,EAAEG,OAAOC,UAOxB,OACI,oCACI,kBAACG,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CACIC,UAAU,sBACV1C,MAAO,CACH2C,QAAS,OACTC,WAAY,SACZC,WAAY,SAGhB,wCACA,kBAACL,EAAA,EAAKM,QAAN,CACIC,KAAK,OACLlD,UAAU,cACVmD,SAAU,SAACf,GAAD,OAAOD,EAAeC,EAAG,UACnCI,MAAOP,EAAY1B,MACnB6C,YAAanB,EAAYjB,QAAU,8BAG3C,kBAAC2B,EAAA,EAAKC,MAAN,CACIC,UAAU,uBACV1C,MAAO,CACH2C,QAAS,OACTC,WAAY,SACZC,WAAY,SAGhB,0CACA,kBAACL,EAAA,EAAKM,QAAN,CAAcI,GAAG,SAASF,SAAU,SAACf,GAAD,OAAOD,EAAeC,EAAG,aACzD,4BAAQC,IAAKJ,EAAYnB,SAAUmB,EAAYnB,SAC9CR,EAAOiB,QAAQT,QACXwC,QAAO,SAACC,GAAD,OAAOA,IAAMtB,EAAYnB,WAChC0C,KAAI,SAACrC,GAAD,OACD,4BAAQkB,IAAKlB,GAAKA,QAIlC,kBAACwB,EAAA,EAAKC,MAAN,CACIC,UAAU,uBACV1C,MAAO,CACH2C,QAAS,OACTC,WAAY,SACZC,WAAY,SAGhB,8CACA,kBAACL,EAAA,EAAKM,QAAN,CAAcI,GAAG,SAASF,SAAU,SAACf,GAAD,OAAOD,EAAeC,EAAG,iBACzD,4BAAQC,IAAKJ,EAAYlB,aAAckB,EAAYlB,aAClDT,EAAOiB,QAAQR,YACXuC,QAAO,SAACC,GAAD,OAAOA,IAAMtB,EAAYlB,eAChCyC,KAAI,SAACrC,GAAD,OACD,4BAAQkB,IAAKlB,GAAKA,QAIlC,kBAACwB,EAAA,EAAKC,MAAN,CACIC,UAAU,uBACV1C,MAAO,CACH2C,QAAS,OACTC,WAAY,SACZC,WAAY,SAGhB,yCACA,kBAACL,EAAA,EAAKM,QAAN,CACIC,KAAK,OACLlD,UAAU,cACVmD,SAAU,SAACf,GAAD,OAAOD,EAAeC,EAAG,WACnCgB,YAAanB,EAAYjB,QAAU,UAG3C,kBAAC2B,EAAA,EAAKC,MAAN,CACIC,UAAU,uBACV1C,MAAO,CACH2C,QAAS,OACTC,WAAY,SACZC,WAAY,SAGhB,+CACA,kBAACL,EAAA,EAAKM,QAAN,CAAcI,GAAG,SAASF,SAAU,SAACf,GAAD,OAAOD,EAAeC,EAAG,kBACzD,4BAAQC,IAAKJ,EAAYxB,cAAewB,EAAYxB,cACnDH,EAAOiB,QAAQd,aACX6C,QAAO,SAACC,GAAD,OAAOA,IAAMtB,EAAYxB,gBAChC+C,KAAI,SAACrC,GAAD,OACD,4BAAQkB,IAAKlB,GAAKA,QAIJ,cAA7Bc,EAAYxB,cACT,kBAACkC,EAAA,EAAKC,MAAN,CACIC,UAAU,uBACV1C,MAAO,CACH2C,QAAS,OACTC,WAAY,SACZC,WAAY,SAGhB,kDACA,kBAACL,EAAA,EAAKM,QAAN,CAAcI,GAAG,SAASF,SAAU,SAACf,GAAD,OAAOD,EAAeC,EAAG,qBACzD,4BAAQC,IAAK,6BAAoBJ,EAAYvB,uBAAhC,aAAoB,EAA6B+C,aACzDxB,EAAYvB,gBADjB,aAGCJ,EAAOiB,QAAQb,gBACX4C,QAAO,SAACC,GAAD,OAAOA,IAAMtB,EAAYvB,mBAChC8C,KAAI,SAACrC,GAAD,OACD,4BAAQkB,IAAKlB,GAAKA,EAAlB,kBAKpB,kBAACwB,EAAA,EAAKC,MAAN,CACIC,UAAU,uBACV1C,MAAO,CACH2C,QAAS,OACTC,WAAY,SACZC,WAAY,SAGhB,0CACA,kBAACL,EAAA,EAAKM,QAAN,CAAcI,GAAG,SAASF,SAAU,SAACf,GAAD,OAAOD,EAAeC,EAAG,aACzD,4BAAQC,IAAKJ,EAAYtB,SAAUsB,EAAYtB,QAA/C,cACCL,EAAOiB,QAAQZ,QACX2C,QAAO,SAACC,GAAD,OAAOA,IAAMtB,EAAYtB,WAChC6C,KAAI,SAACrC,GAAD,OACD,4BAAQkB,IAAKlB,GAAKA,EAAlB,mBAIfuC,OAAOC,KAAPD,OAAA,IAAAA,CAAA,GACMpD,EAAOiB,QAAQjB,SAGjBkD,KAAI,SAACI,GAAD,OACD,kBAACjB,EAAA,EAAKC,MAAN,CAAYC,UAAWe,EAAU,OAAQvB,IAAKuB,GAC1C,kBAACjB,EAAA,EAAKkB,MAAN,CACIX,KAAK,WACLY,UAAW7B,EAAY2B,KAAY,EACnCT,SAAU,SAACf,GACP,IAAM2B,EAAQ,eACP9B,EADO,eAET2B,EAAUxB,EAAE4B,cAAcF,UAEK,mBAAzB7B,EAAY2B,WACZG,EAASH,GAEpB1B,EAAe6B,IAEnBE,MAAK,UAAKL,EAAL,YAAgB3B,EAAY2B,WAKrD,yBACIzD,MAAO,CACH2C,QAAS,OACToB,eAAgB,aAGpB,kBAACC,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,WACLvC,EAAY,eAAKG,EAAN,CAAmBjB,OAAQiB,EAAYjB,QAAU,QAC5DsD,sBAAoBC,KAAK,sBAJjC,iBAUJ,kEACA,kBAAC,EAAD,CAAWvE,UAAU,MAAMC,WAAU,UAAKuE,KAAKC,UAAU7C,EAAc,KAAM,MAC7E,yHACA,yBAAK5B,UAAU,OAAf,iFCxFG0E,EA3GmB,WAAO,IAAD,EACmBhD,qBAAWC,IAAzCC,EADW,EAC5BC,gBAA+BC,EADH,EACGA,YADH,EAGEC,IAAMC,SAAN,eAC/BJ,IAJ6B,mBAG7BK,EAH6B,KAGhBC,EAHgB,KAgB9ByC,EAAuB,SAACvC,GAC1B,IAAMwC,EAAOJ,KAAKK,MAAMzC,EAAE4B,cAAcc,cAAcC,WAChDC,EAAI,eAAQ/C,GAClB,GAAIG,EAAE4B,cAAcF,QAChB5B,EAAe,eACRD,EADO,CAEVf,YAAY,eACLe,EAAYf,YADR,CAEPE,QAAQ,eACDa,EAAYf,YAAYE,QADxB,eAEFsC,OAAOC,KAAKiB,GAAM,IAAK,aAIjC,CACH,IAAMK,EAAcvB,OAAOC,KAAKiB,GAAM,GACtC1C,EAAe,eACRD,EADO,CAEVf,YAAY,eACLe,EAAYf,YADR,CAEPE,QAASsC,OAAOwB,QAAQF,EAAK9D,YAAYE,SAAS+D,QAAO,SAACC,EAAD,GAA4B,IAAD,mBAAhB/C,EAAgB,KAAXG,EAAW,KAChF,OAAIH,IAAQ4C,EACJvB,OAAOC,KAAKrD,EAAOY,YAAYE,SAASiE,SAASJ,GAC1C,eAAKG,EAAZ,eAAsB/C,GAAM,IAEzB+C,EAEJ,eAAKA,EAAZ,eAAsB/C,EAAMG,MAC7B,WAKnB,OACI,oCACI,kBAACG,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CACIC,UAAU,0BACV1C,MAAO,CACH2C,QAAS,OACTC,WAAY,SACZC,WAAY,SAGhB,4CACA,kBAACL,EAAA,EAAKM,QAAN,CACIC,KAAK,OACLlD,UAAU,cACVmD,SAzDI,SAACf,GAAD,aACpBF,EAAe,eACRD,EADO,CAEVf,YAAY,eACLe,EAAYf,YADR,CAEPC,GAAE,OAAEiB,QAAF,IAAEA,GAAF,UAAEA,EAAGG,cAAL,aAAE,EAAWC,YAqDPA,MAAOP,EAAYf,YAAYC,GAC/BiC,YAAanB,EAAYf,YAAYC,IAAM,8BAGnD,yBAAKnB,UAAU,WAAWmB,GAAG,2BAC7B,kBAACwB,EAAA,EAAKC,MAAN,CAAYC,UAAU,2BAClB,kBAACF,EAAA,EAAK2C,MAAN,wBACC5B,OAAOwB,QAAPxB,OAAA,IAAAA,CAAA,GACMpD,EAAOY,YAAYE,QADzB,GAEMa,EAAYf,YAAYE,UAC5BoC,KAAI,mCAAEnB,EAAF,KAAOG,EAAP,YACH,kBAACG,EAAA,EAAKkB,MAAN,CACIxB,IAAKA,EACLa,KAAK,WACL/B,GAAE,kBAAakB,GACfyB,UAAS7B,EAAYf,YAAYE,QAAQmE,eAAelD,MAASG,EACjEW,SAAUwB,EACVV,MAAOO,KAAKC,UAAL,eAAkBpC,EAAMG,WAK/C,yBACIrC,MAAO,CACH2C,QAAS,OACToB,eAAgB,aAGpB,kBAACC,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,WACLvC,EAAY,eAAKG,IACjBqC,sBAAoBC,KAAK,sBAJjC,mB,iCCCD9C,EA7Fc,WAAO,IAAD,EACUC,qBAAWC,IAA5CE,EADuB,EACvBA,gBAAiBC,EADM,EACNA,YADM,EAGFC,IAAMC,UAAS,GAHb,mBAGxBwD,EAHwB,KAGdC,EAHc,KAI/B,OACI,kBAAC,IAAD,CACIC,cAAe,CACXnF,MAAOsB,EAAgBtB,MACvBoF,SAAU,CACNnF,SAAUqB,EAAgBrB,SAC1BoF,YAAa/D,EAAgB+D,YAC7BnF,aAAcoB,EAAgBpB,aAC9BG,kBAAmBiB,EAAgBjB,kBACnCC,kBAAmBgB,EAAgBhB,kBACnCI,eAAgBY,EAAgBZ,eAChCH,QAASe,EAAgBf,QACzBC,YAAac,EAAgBd,YAC7BC,OAAQa,EAAgBb,SAGhC6E,SAAU,SAACC,GACP,IAAMC,EAAc,GAIpB,OAHKD,EAAOvF,QACRwF,EAAOxF,MAAQ,YAEZwF,GAEXC,SAAU,SAACF,EAAD,IACNG,EADqC,EAApBA,gBACH,GACdnE,EAAY,eACLD,EADI,CAEPtB,MAAOuF,EAAOvF,OACXuF,EAAOH,WAEdrB,sBAAoBC,KAAK,uBAG5B,gBAAG2B,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAA0BC,GAA3C,EAA+BC,WAA/B,EAA2CD,eAAeN,EAA1D,EAA0DA,OAAQQ,EAAlE,EAAkEA,QAAkBP,GAApF,EAA2EQ,QAA3E,EAAoFR,QAApF,OACG,kBAACpD,EAAA,EAAD,CAAM6D,YAAU,EAACR,SAAUE,GACvB,kBAACvD,EAAA,EAAKC,MAAN,CAAYS,GAAIoD,IAAKC,GAAG,KAAK7D,UAAU,aACnC,kBAACF,EAAA,EAAK2C,MAAN,uBACA,kBAAC3C,EAAA,EAAKM,QAAN,CACIC,KAAK,OACLyD,KAAK,QACLnE,MAAOsD,EAAOvF,MACd4C,SAAUgD,EACVI,QAASD,EAAQ/F,QAAUwF,EAAOxF,MAClCqG,YAAab,EAAOxF,QAExB,kBAACoC,EAAA,EAAKM,QAAQ4D,SAAd,CAAuB3D,KAAK,WAAW6C,EAAOxF,QAElD,kBAACoC,EAAA,EAAKC,MAAN,CAAYS,GAAIoD,IAAKC,GAAG,KAAK7D,UAAU,gBACnC,kBAACF,EAAA,EAAK2C,MAAN,2BACA,kBAAC,IAAD,CACIwB,kBAAmB,IACnB3F,GAAG,WACHiC,YAAa0C,EAAOH,SACpBoB,OAAQA,IACRC,OAAO,QACPC,MAAM,OACN9D,SAAU,YAA0B,IAAvB+D,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACXD,EAIDzB,GAAS,IAHTW,EAAc,WAAYe,GAAY,IAAI,GAC1C1B,GAAS,KAKjBtF,MAAO,CACHiH,KAAM,CACFC,SAAU,YAK1B,yBAAKrH,UAAU,wBACX,kBAACmE,EAAA,EAAD,CACImD,SAAU9B,EACVpB,QAAQ,YACRlB,KAAK,SACL/C,MAAO,CACHoH,OAAQ/B,EAAW,cAAgB,YAL3C,sBCQTd,EApFmB,WAAO,IAAD,EACKhD,qBAAWC,IAA5CE,EAD4B,EAC5BA,gBAAiBC,EADW,EACXA,YADW,EAEPC,IAAMC,UAAS,GAFR,mBAE7BwD,EAF6B,KAEnBC,EAFmB,KAGpC,OACI,kBAAC,IAAD,CACIC,cAAe,CACX8B,IAAK3F,EAAgBX,YAAYC,GACjCsG,SAAU5F,EAAgBX,YAAYE,SAE1CyE,SAAU,SAACC,GACP,IAAMC,EAAc,GAIpB,OAHKD,EAAO0B,MACRzB,EAAOyB,IAAM,YAEVzB,GAEXC,SAAU,SAACF,EAAD,IACNG,EADqC,EAApBA,gBACH,GACdnE,EAAY,eACLD,EADI,CAEPX,YAAa,CACTC,GAAI2E,EAAO0B,IACXpG,QAAS0E,EAAO2B,UAAY,OAGpCnD,sBAAoBC,KAAK,uBAG5B,gBAAG2B,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAA0BC,GAA3C,EAA+BC,WAA/B,EAA2CD,eAAeN,EAA1D,EAA0DA,OAAQQ,EAAlE,EAAkEA,QAAkBP,GAApF,EAA2EQ,QAA3E,EAAoFR,QAApF,OACG,kBAACpD,EAAA,EAAD,CAAM6D,YAAU,EAACR,SAAUE,GACvB,kBAACvD,EAAA,EAAKC,MAAN,CAAYS,GAAIoD,IAAKC,GAAG,KAAK7D,UAAU,sBACnC,kBAACF,EAAA,EAAK2C,MAAN,mBACA,kBAAC3C,EAAA,EAAKM,QAAN,CACIC,KAAK,OACLyD,KAAK,MACLnE,MAAOsD,EAAO0B,IACdrE,SAAUgD,EACVI,QAASD,EAAQkB,MAAQzB,EAAOyB,IAChCZ,YAAab,EAAOyB,MAExB,kBAAC7E,EAAA,EAAKM,QAAQ4D,SAAd,CAAuB3D,KAAK,WAAW6C,EAAOyB,MAElD,kBAAC7E,EAAA,EAAKC,MAAN,CAAYS,GAAIoD,IAAKC,GAAG,KAAK7D,UAAU,sBACnC,kBAACF,EAAA,EAAK2C,MAAN,wBACA,kBAAC,IAAD,CACIwB,kBAAmB,IACnB3F,GAAG,cACHiC,YAAa0C,EAAO2B,SACpBV,OAAQA,IACRC,OAAO,QACPC,MAAM,OACN9D,SAAU,YAA0B,IAAvB+D,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACXD,EAIDzB,GAAS,IAHTW,EAAc,WAAYe,GAAY,IAAI,GAC1C1B,GAAS,KAKjBtF,MAAO,CACHiH,KAAM,CACFC,SAAU,YAK1B,yBAAKrH,UAAU,wBACX,kBAACmE,EAAA,EAAD,CACImD,SAAU9B,EACVpB,QAAQ,YACRlB,KAAK,SACL/C,MAAO,CACHoH,OAAQ/B,EAAW,cAAgB,YAL3C,sBCjEXkC,EAAqB,WAAO,IAAD,IAC9Bf,EAAO,iBADuB,EAE4BjF,qBAAWC,IAAlDC,EAFW,EAE5BC,gBAA+B8F,EAFH,EAEGA,GAEvC,OACI,kBAACC,EAAA,EAAD,KACI,kBAACnB,EAAA,EAAD,KACI,yBAAKzG,UAAU,WAAWmB,GAAIwF,IAC9B,kBAACkB,EAAA,EAAD,CAAOzD,QAAQ,OAAOpE,UAAU,qBAC5B,kBAAC6H,EAAA,EAAMC,QAAP,KAAgBnB,GAChB,kCACQ,2BAAIA,GADZ,oBACsC,+CADtC,8CAIA,kBAAC,EAAD,CACI3G,UAAU,MACVC,WAAU,iLAMnB2B,EAAarB,MANM,8BAOiB,qBAA1BqB,EAAapB,SAA2B,QAAUoB,EAAapB,SAASiD,WAP/D,iCAQuB,qBAA7B7B,EAAagE,YAA8B,QAAUhE,EAAagE,YAAYnC,WARxE,uCAUkB,qBAAnC7B,EAAahB,kBAAoC,QAAUgB,EAAahB,kBAAkB6C,WAVzE,kCAYyB,qBAA9B7B,EAAanB,aAA+B,MAAQmB,EAAanB,aAAagD,WAZzE,qCAcgB,qBAAjC7B,EAAalB,gBAAkC,YAAtD,UAAoEkB,EAAalB,uBAAjF,aAAoE,EAA8B+C,WAd1E,0CAgBe,qBAAzB7B,EAAajB,QAA0B,IAA9C,UAAoDiB,EAAajB,eAAjE,aAAoD,EAAsB8C,WAhBzD,oDAkBkB,qBAAnC7B,EAAaf,kBAAoC,QAAUe,EAAaf,kBAAkB4C,WAlBzE,6BAoBe,qBAAzB7B,EAAad,QAA0B,YAAcc,EAAad,QAAQ2C,WApBhE,iCAsBY,qBAA7B7B,EAAab,YAA8B,YAAca,EAAab,YAAY0C,WAtBjE,4BAwBjB7B,EAAaZ,OAAkBY,EAAaZ,OAAOyC,WAA7B,OAxBL,gCAyBde,KAAKC,UAAU7C,EAAaV,YAAa,KAAM,GAAG6G,MAAM,GAAI,GAzB9C,gnBAoDd,+GACA,wBACI5G,GAAG,iBACHhB,MAAO,CACH6H,aAAc,iBACdC,aAAc,OACdC,cAAe,QALvB,oBAQqB,4CAEpBP,EAAGQ,QAAU,kBAAC,EAAD,MAAgC,kBAAC,EAAD,MAC9C,wBACIhI,MAAO,CACH6H,aAAc,iBACdC,aAAc,OACdC,cAAe,QAJvB,oBAOqB,2CAEpBP,EAAGQ,QAAU,kBAAC,EAAD,MAA0C,kBAAC,EAAD,UCpD7DC,EA1CoB,WAAO,IAAD,EACTrG,IAAMC,UAAS,GADN,mBAC9BqG,EAD8B,KACtBC,EADsB,KAErCC,wBAAc,CAAC,QAAS,kBAAmB,CAACF,IAE5C,OACI,oCACI,kCACQ,2BAJK,iBAGb,8DAGA,kBAAC,EAAD,CACIrI,UAAU,MACVC,WAAU,mOAYd,kBAACkE,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS,kBAAMiE,GAAWD,KAAtD,oBAGA,yBAAKrI,UAAU,OACX,0EACgD,qCADhD,6DAEoB,4CAFpB,UAIA,8IAIA,wFACA,4F,QCmCDwI,EArEsB,WAAO,IAAD,EACVzG,IAAMC,UAAS,GADL,mBAChCwD,EADgC,KACtBC,EADsB,OAEX1D,IAAMC,UAAS,GAFJ,mBAEhCqG,EAFgC,KAExBC,EAFwB,OAGqBvG,IAAMC,SAAS,CAAC,WAAY,YAAa,cAH9D,mBAGhCyG,EAHgC,KAGRC,EAHQ,KAKvC,OADAH,wBAAcE,EAAwB,CAACJ,IAEnC,oCACI,kBAAC,IAAD,CACI3C,cAAe,CACX+C,uBAAwBA,GAE5B5C,SAAU,SAACC,GACP,IAAMC,EAAc,GAIpB,OAHKD,EAAO2C,yBACR1C,EAAO0C,uBAAyB,YAE7B1C,GAEXC,SAAU,SAACF,EAAD,IACNG,EADqC,EAApBA,gBACH,GACdyC,EAA0B,YAAI5C,EAAO2C,yBACrCH,GAAWD,MAGd,gBAAGnC,EAAH,EAAGA,aAAwCE,GAA3C,EAAiBD,aAAjB,EAA+BE,WAA/B,EAA2CD,eAAeN,EAA1D,EAA0DA,OAA1D,EAAkEQ,QAAlE,EAA2EC,QAA3E,EAAoFR,OAApF,OACG,kBAACpD,EAAA,EAAD,CAAM6D,YAAU,EAACR,SAAUE,GACvB,kBAACvD,EAAA,EAAKC,MAAN,CAAYS,GAAIoD,IAAKC,GAAG,KAAK7D,UAAU,gBACnC,kBAACF,EAAA,EAAK2C,MAAN,qCACA,kBAAC,IAAD,CACIwB,kBAAmB,IACnB3F,GAAG,yBACHiC,YAAa0C,EAAO2C,uBACpB1B,OAAQA,IACRC,OAAO,QACPC,MAAM,OACN9D,SAAU,YAA0B,IAAvB+D,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACXD,EAIDzB,GAAS,IAHTW,EAAc,yBAA0Be,GAAY,IAAI,GACxD1B,GAAS,KAKjBtF,MAAO,CACHiH,KAAM,CACFC,SAAU,YAK1B,yBAAKrH,UAAU,wBACX,kBAACmE,EAAA,EAAD,CACImD,SAAU9B,EACVpB,QAAQ,YACRlB,KAAK,SACL/C,MAAO,CACHoH,OAAQ/B,EAAW,cAAgB,YAL3C,2BCpDfmD,EAA8B,WACvC,IACQhB,EAAOjG,qBAAWC,IAAlBgG,GACR,OACI,kBAACC,EAAA,EAAD,KACI,kBAACnB,EAAA,EAAD,KACI,yBAAKzG,UAAU,WAAWmB,GALjB,kBAMT,kBAAC0G,EAAA,EAAD,CAAOzD,QAAQ,OAAOpE,UAAU,qBAC5B,kBAAC6H,EAAA,EAAMC,QAAP,KAPK,iBAQJH,EAAGQ,QACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,UC0CTS,EAvDkB,WAC7B,IAAMC,EAAkBC,6BAAmB,CACvC,CACIzG,IAAK,QACL0G,aAAc,UACdC,UAAU,KAIlB,OACI,oCACI,kCACQ,2BAJK,sBAGb,mCAGA,kBAAC,EAAD,CACIhJ,UAAU,MACVC,WAAU,4NASd,uCACA,6BACI,kBAACkE,EAAA,EAAD,CACIC,QAAQ,YACRjE,MAAO,CACH8I,gBAAiBJ,EAAgBK,QAHzC,0DAMwDL,EAAgBK,MANxE,OASJ,yBAAKlJ,UAAU,OAAf,2HAEsB,uBAAGmJ,KAAK,2BAAR,mBAFtB,KAIA,kBAAC,EAAD,CACInJ,UAAU,MACVC,WAAU,8MCkDX2I,EA1FkB,WAAO,IAAD,EACN7G,IAAMC,UAAS,GADT,mBAC5BwD,EAD4B,KAClBC,EADkB,OAEH1D,IAAMC,SAAS,CAC3C,CACIK,IAAK,WACL0G,aAAc,UACdC,UAAU,KANiB,mBAE5BI,EAF4B,KAElBC,EAFkB,KAS7BC,EAASR,6BAAmBM,GAClC,OACI,oCACI,kBAAC,IAAD,CACI1D,cAAe,CACX0D,YAEJvD,SAAU,SAACC,GACP,IAAMC,EAAc,GAIpB,OAHKD,EAAOsD,WACRrD,EAAOqD,SAAW,YAEfrD,GAEXC,SAAU,SAACF,EAAD,IACNG,EADqC,EAApBA,gBACH,GACdoD,EAAY,YAAIvD,EAAOsD,cAG1B,gBAAGlD,EAAH,EAAGA,aAAwCE,GAA3C,EAAiBD,aAAjB,EAA+BE,WAA/B,EAA2CD,eAAeN,EAA1D,EAA0DA,OAA1D,EAAkEQ,QAAlE,EAA2EC,QAA3E,EAAoFR,OAApF,OACG,kBAACpD,EAAA,EAAD,CAAM6D,YAAU,EAACR,SAAUE,GACvB,kBAACvD,EAAA,EAAKC,MAAN,CAAYS,GAAIoD,IAAKC,GAAG,KAAK7D,UAAU,gBACnC,kBAACF,EAAA,EAAK2C,MAAN,qCACA,kBAAC,IAAD,CACIwB,kBAAmB,IACnB3F,GAAG,WACHiC,YAAa0C,EAAOsD,SACpBrC,OAAQA,IACRC,OAAO,QACPC,MAAM,OACN9D,SAAU,YAA0B,IAAvB+D,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACXD,EAIDzB,GAAS,IAHTW,EAAc,WAAYe,GAAY,IAAI,GAC1C1B,GAAS,KAKjBtF,MAAO,CACHiH,KAAM,CACFC,SAAU,YAK1B,yBAAKrH,UAAU,wBACX,kBAACmE,EAAA,EAAD,CACImD,SAAU9B,EACVpB,QAAQ,YACRlB,KAAK,SACL/C,MAAO,CACHoH,OAAQ/B,EAAW,cAAgB,YAL3C,qBAchB,yBAAKxF,UAAU,SAAf,8BACA,yBAAKA,UAAU,OACX,kBAAC,IAAD,CACI8G,kBAAmB,IACnB3F,GAAG,WACHiC,YAAakG,EACbvC,OAAQA,IACRC,OAAO,QACPuC,UAAU,EACVtC,MAAM,OACN9G,MAAO,CACHiH,KAAM,CACFC,SAAU,cCjFzBmC,EAAyB,WAClC,IACQ7B,EAAOjG,qBAAWC,IAAlBgG,GACR,OACI,kBAACC,EAAA,EAAD,KACI,kBAACnB,EAAA,EAAD,KACI,yBAAKzG,UAAU,WAAWmB,GALjB,uBAMT,kBAAC0G,EAAA,EAAD,CAAOzD,QAAQ,OAAOpE,UAAU,qBAC5B,kBAAC6H,EAAA,EAAMC,QAAP,KAPK,sBAQJH,EAAGQ,QAAU,kBAAC,EAAD,MAAwC,kBAAC,EAAD,UC0E3DsB,EApFuB,WAAO,IAAD,EACQ1H,IAAMC,UAAS,GADvB,mBACjC0H,EADiC,KACPC,EADO,KAEhCC,EAA6BC,wBAA7BD,yBACR,OACI,oCACI,yBAAK5J,UAAU,OACX,mCADJ,KAGA,kBAAC,EAAD,CACIA,UAAU,MACVC,WAAU,iqBAwBd,yBAAKD,UAAU,OACX,0DADJ,wCAC8E,6CAD9E,UAGA,yBAAKA,UAAU,OAAf,WACY,0DADZ,kBACgE,8BAAO,mBADvE,gEAIA,yBAAKA,UAAU,OAAf,kCACmC,yCADnC,8EAIA,kBAAC2C,EAAA,EAAD,KACI,kBAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,oCAClB,kBAACF,EAAA,EAAK2C,MAAN,iCACA,kBAAC3C,EAAA,EAAKkB,MAAN,CACIX,KAAK,WACLY,QAAS4F,EACTvG,SAAU,SAACf,GAAD,OAAOuH,EAAYvH,EAAE4B,cAAcF,UAC7CG,MAAK,mCAA8ByF,OAI/C,yBAAK1J,UAAU,yBACX,kBAACmE,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,WACLuF,EAAyBF,GACpBI,MAAK,SAACC,GACCA,EAAa,IACbzF,sBAAoBC,KAChB,oDAAsDwF,GAG1DzF,sBAAoB4C,MAChB,mDAAqD6C,MAIhEC,OAAM,SAAC9C,GACJ5C,sBAAoB4C,MAAM,8CAAgDA,EAAM+C,YAhBhG,4BC1DHC,EAAiC,WAC1C,OACI,kBAACtC,EAAA,EAAD,KACI,kBAACnB,EAAA,EAAD,KACI,yBAAKzG,UAAU,WAAWmB,GAAG,6BAC7B,kBAAC0G,EAAA,EAAD,CAAOzD,QAAQ,OAAOpE,UAAU,qBAC5B,kBAAC6H,EAAA,EAAMC,QAAP,kCACA,kBAAC,EAAD,U,SCoULqC,EA1UgB,WAAO,IACrBC,EAAUP,wBAAfQ,IACFC,EAAoB,CACtBC,mBAAmB,gvCAqCnBC,kBACI,kBAACrG,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,WAmCL+F,EAAMK,aAAa,CAlCI,CACnBvH,KAAM,cACNwH,KAAM,CACFC,cAAe,cACfC,YAAa,gBACbC,aAAc,IACdC,aAAc,IACdC,eAAgB,mBAChBC,SAAU,aACVC,MAAO,QACPC,cAAe,kBACfC,UAAW,EACXC,WAAY,WACZC,iBAAkB,oEAClBC,UAAW,aAMF,CACbpI,KAAM,QACNwH,KAAM,CACFa,SAAU,kBACVC,OAAQ,UACRvH,MAAO,gBACPzB,MAAO,IACP6I,iBAAkB,oEAClBC,UAAW,kBA/B3B,6BA4CFG,EAAuB,CACzBC,iBAAiB,iyBAyBjBC,gBACI,kBAACxH,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,WAqBL+F,EAAMwB,KApBU,CACZ1I,KAAM,cACNwH,KAAM,CACFC,cAAe,cACfC,YAAa,gBACbC,aAAc,IACdC,aAAc,IACdC,eAAgB,mBAChBC,SAAU,aACVC,MAAO,QACPC,cAAe,kBACfC,UAAW,EACXC,WAAY,WACZC,iBAAkB,oEAClBC,UAAW,gBAjB3B,2BA8BFO,EAAkB,CACpBH,iBAAiB,sWAcjBC,gBACI,kBAACxH,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,WAWL+F,EAAMwB,KAVU,CACZ1I,KAAM,SACNwH,KAAM,CACFW,iBAAkB,oEAClBC,UAAW,kBAP3B,sBAoBFQ,EAAgB,CAClBJ,iBAAiB,kjBAoBjBC,gBACI,kBAACxH,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,WAiBL+F,EAAMwB,KAhBU,CACZ1I,KAAM,OACNwH,KAAM,CACFC,cAAe,cACfhE,KAAM,WACNoF,MAAO,IACPC,KAAM,WACNT,SAAU,eACVU,SAAU,QACVZ,iBAAkB,oEAClBC,UAAW,kBAb3B,oBA2BFY,EAAiB,CACnBR,iBAAiB,6gBAmBjBC,gBACI,kBAACxH,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,WAeL+F,EAAMwB,KAdU,CACZ1I,KAAM,QACNwH,KAAM,CACFa,SAAU,kBACVC,OAAQ,UACRvH,MAAO,gBACPzB,MAAO,IACP6I,iBAAkB,oEAClBC,UAAW,iBAX3B,oBAxPyB,EAgRQvJ,IAAMC,SAG5CyJ,GAnR8B,mBAgR1BU,EAhR0B,KAgRRC,EAhRQ,KAoRjC,OACI,oCACI,yBAAKpM,UAAU,OAAf,0IAEsC,IAClC,uBAAGmJ,KAAK,gFAAR,yBAHJ,KAQA,6BACI,oCACA,2EACiD,0CADjD,0CAIA,kBAAC,EAAD,CACInJ,UAAU,MACVC,WAAU,kGAIlB,iDACA,kBAACoM,EAAA,EAAD,CAAKjI,QAAQ,OAAOkI,iBAAiB,kBACjC,kBAACD,EAAA,EAAIE,KAAL,KACI,kBAACF,EAAA,EAAIG,KAAL,CAAUC,SAAS,iBAAiBpI,QAAS,kBAAM+H,EAAaX,KAAhE,oBAIJ,kBAACY,EAAA,EAAIE,KAAL,KACI,kBAACF,EAAA,EAAIG,KAAL,CAAUC,SAAS,YAAYpI,QAAS,kBAAM+H,EAAaP,KAA3D,eAIJ,kBAACQ,EAAA,EAAIE,KAAL,KACI,kBAACF,EAAA,EAAIG,KAAL,CAAUC,SAAS,WAAWpI,QAAS,kBAAM+H,EAAaF,KAA1D,cAIJ,kBAACG,EAAA,EAAIE,KAAL,KACI,kBAACF,EAAA,EAAIG,KAAL,CAAUC,SAAS,UAAUpI,QAAS,kBAAM+H,EAAaN,KAAzD,cAKR,kBAAC,EAAD,CAAW9L,UAAU,MAAMC,WAAYkM,EAAiBT,mBACxD,6BAAMS,EAAiBR,iBACvB,yBAAK3L,UAAU,OAAf,mCACA,kBAAC,EAAD,CAAWA,UAAU,MAAMC,WAAYqK,EAAkBC,qBACzD,6BAAMD,EAAkBE,qBC9SrBkC,EAzB4B,WACvC,OACI,oCACI,yBAAK1M,UAAU,OAAf,gFACA,kBAAC,EAAD,CACIA,UAAU,MACVC,WAAU,+UCyCX0M,EA9CyB,WACpC,IAYuB9D,EADRgB,sBAXE,CACb+C,cAAe,CACXC,UAAW,CACP,CACIxK,IAAK,QACL0G,aAAc,UACdC,UAAU,OAMlB4D,cACR,OACI,oCACI,qCACA,6BACI,kBAACzI,EAAA,EAAD,CACIC,QAAQ,YACRjE,MAAO,CACH8I,gBAAiBJ,EAAgBK,QAHzC,iEAM+DL,EAAgBK,MAN/E,OASJ,yBAAKlJ,UAAU,OAAf,2HAEsB,uBAAGmJ,KAAK,2BAAR,mBAFtB,KAIA,kBAAC,EAAD,CACInJ,UAAU,MACVC,WAAU,sNC4LXkK,EA1NgB,WAC3B,IAgDM2C,EAAW,CACbC,YAjDiC,CACjC7J,KAAM,cACNwH,KAAM,CACFC,cAAe,cACfC,YAAa,kBACbC,aAAc,IACdC,aAAc,IACdC,eAAgB,qBAChBC,SAAU,eACVC,MAAO,QACPC,cAAe,oBACfC,UAAW,EACXC,WAAY,aACZC,iBAAkB,oEAClBC,UAAW,eAoCf0B,OAjC4B,CAC5B9J,KAAM,SACNwH,KAAM,CACFW,iBAAkB,oEAClBC,UAAW,eA8Bf2B,MA3B2B,CAC3B/J,KAAM,QACNwH,KAAM,CACFa,SAAU,kBACVC,OAAQ,UACRvH,MAAO,gBACPzB,MAAO,IACP6I,iBAAkB,oEAClBC,UAAW,cAoBf4B,KAjB0B,CAC1BhK,KAAM,OACNwH,KAAM,CACFC,cAAe,cACfhE,KAAM,WACNoF,MAAO,IACPC,KAAM,WACNT,SAAU,eACVU,SAAU,QACVZ,iBAAkB,oEAClBC,UAAW,gBA9Cc,EAuDJvJ,IAAMC,UAAS,GAvDX,mBAuD1BwD,EAvD0B,KAuDhBC,EAvDgB,OAwDF1D,IAAMC,UAAS,GAxDb,mBAwD1BmL,EAxD0B,KAwDfC,EAxDe,OAyDQrL,IAAMC,SAAiB,eAzD/B,mBAyD1BmK,EAzD0B,KAyDRC,EAzDQ,OA0DGrK,IAAMC,SAAS8K,EAASX,IA1D3B,mBA0D1BkB,EA1D0B,KA0DdC,EA1Dc,OA4DKvL,IAAMC,SAAS,CAAC,eAC7C8K,EAASC,aADmC,eAE5CD,EAASE,QAFmC,eAG5CF,EAASG,OAHmC,eAI5CH,EAASI,QAhEe,mBA4D1BK,EA5D0B,KA4DbC,EA5Da,KAqEjCzL,IAAM0L,WAHS,WACXH,EAAcR,EAASX,MAEH,CAACA,IArEQ,IAsEpB/B,EAAUP,wBAAfQ,IACR,OACI,oCACI,iDACA,kBAACgC,EAAA,EAAD,CAAKjI,QAAQ,OAAOkI,iBAAiB,kBACjC,kBAACD,EAAA,EAAIE,KAAL,KACI,kBAACF,EAAA,EAAIG,KAAL,CAAUC,SAAS,iBAAiBpI,QAAS,kBAAM+H,EAAa,iBAAhE,oBAIJ,kBAACC,EAAA,EAAIE,KAAL,KACI,kBAACF,EAAA,EAAIG,KAAL,CAAUC,SAAS,YAAYpI,QAAS,kBAAM+H,EAAa,YAA3D,eAIJ,kBAACC,EAAA,EAAIE,KAAL,KACI,kBAACF,EAAA,EAAIG,KAAL,CAAUC,SAAS,WAAWpI,QAAS,kBAAM+H,EAAa,WAA1D,cAIJ,kBAACC,EAAA,EAAIE,KAAL,KACI,kBAACF,EAAA,EAAIG,KAAL,CAAUC,SAAS,UAAUpI,QAAS,kBAAM+H,EAAa,UAAzD,cAKR,kBAAC,IAAD,CACIsB,oBAAoB,EACpBhI,cAAe,CACX2H,cAEJxH,SAAU,SAACC,GACP,IAAMC,EAAc,GAIpB,OAHKD,EAAOuH,aACRtH,EAAOsH,WAAa,YAEjBtH,GAEXC,SAAU,SAACF,EAAD,IACNG,EADqC,EAApBA,gBACH,GACdqH,EAAc,eAAKxH,EAAOuH,aAC1BjD,EAAMwB,KAAN,eAAgB9F,EAAOuH,gBAG1B,gBAAGnH,EAAH,EAAGA,aAAwCE,GAA3C,EAAiBD,aAAjB,EAA+BE,WAA/B,EAA2CD,eAAeN,EAA1D,EAA0DA,OAA1D,EAAkEQ,QAAlE,EAA2EC,QAA3E,EAAoFR,OAApF,OACG,kBAACpD,EAAA,EAAD,CAAM6D,YAAU,EAACR,SAAUE,GACvB,kBAACvD,EAAA,EAAKC,MAAN,CAAYS,GAAIoD,IAAKC,GAAG,KAAK7D,UAAU,gBACnC,kBAACF,EAAA,EAAK2C,MAAN,KAAa6G,EAAb,gBACA,kBAAC,IAAD,CACIrF,kBAAmB,IACnB3F,GAAG,aACHiC,YAAa0C,EAAOuH,WACpBtG,OAAQA,IACRC,OAAO,QACPC,MAAM,OACN9D,SAAU,YAA0B,IAAvB+D,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACXD,EAIDzB,GAAS,IAHTW,EAAc,aAAce,GAAY,IAAI,GAC5C1B,GAAS,KAKjBtF,MAAO,CACHiH,KAAM,CACFC,SAAU,YAK1B,yBAAKrH,UAAU,wBACX,kBAACmE,EAAA,EAAD,CACImD,SAAU9B,EACVpB,QAAQ,YACRlB,KAAK,SACL/C,MAAO,CACHoH,OAAQ/B,EAAW,cAAgB,YAL3C,iBAchB,yBAAKxF,UAAU,OAAf,+EACA,kBAAC,IAAD,CACI0F,cAAe,CACX6H,eAEJ1H,SAAU,SAACC,GACP,IAAMC,EAAc,GAIpB,OAHKD,EAAOyH,cACRxH,EAAOwH,YAAc,YAElBxH,GAEXC,SAAU,SAACF,EAAD,IACNG,EADqC,EAApBA,gBACH,GACduH,EAAe,YAAI1H,EAAOyH,cAC1BnD,EAAMK,aAAN,YAAuB3E,EAAOyH,iBAGjC,gBAAGrH,EAAH,EAAGA,aAAwCE,GAA3C,EAAiBD,aAAjB,EAA+BE,WAA/B,EAA2CD,eAAeN,EAA1D,EAA0DA,OAA1D,EAAkEQ,QAAlE,EAA2EC,QAA3E,EAAoFR,OAApF,OACG,kBAACpD,EAAA,EAAD,CAAM6D,YAAU,EAACR,SAAUE,GACvB,kBAACvD,EAAA,EAAKC,MAAN,CAAYS,GAAIoD,IAAKC,GAAG,KAAK7D,UAAU,gBACnC,kBAACF,EAAA,EAAK2C,MAAN,8BACA,kBAAC,IAAD,CACIwB,kBAAmB,IACnB3F,GAAG,cACHiC,YAAa0C,EAAOyH,YACpBxG,OAAQA,IACRC,OAAO,QACPC,MAAM,OACN9D,SAAU,YAA0B,IAAvB+D,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACXD,EAIDkG,GAAU,IAHVhH,EAAc,cAAee,GAAY,IAAI,GAC7CiG,GAAU,KAKlBjN,MAAO,CACHiH,KAAM,CACFC,SAAU,YAK1B,yBAAKrH,UAAU,wBACX,kBAACmE,EAAA,EAAD,CACImD,SAAU6F,EACV/I,QAAQ,YACRlB,KAAK,SACL/C,MAAO,CACHoH,OAAQ4F,EAAY,cAAgB,YAL5C,6BCrGbT,EAnG4B,WAAO,IAAD,EAChB3K,IAAMC,UAAS,GADC,mBACtCwD,EADsC,KAC5BC,EAD4B,OAEb1D,IAAMC,SAAS,SAFF,mBAEtCoH,EAFsC,KAE5BC,EAF4B,OAGbtH,IAAMC,SAAc,CAAE0I,KAAM,KAAMiD,SAAS,EAAOC,QAAQ,IAH7C,mBAGtCC,EAHsC,KAG5BC,EAH4B,KAIrCC,EAAwBlE,wBAAxBkE,oBA6BR,OACI,oCACI,kBAAC,IAAD,CACIrI,cAAe,CACX0D,YAEJvD,SAAU,SAACC,GAGP,MAFoB,IAIxBE,SAAU,SAACF,EAAD,IACNG,EADqC,EAApBA,gBACH,GACd6H,EAAY,CAAEpD,KAAM,GAAIiD,SAAS,IACjCtE,EAAYvD,EAAOsD,UACf2E,GACAA,EAAoBjI,EAAOsD,UACtBU,MAAK,SAACkE,GACHF,EAAY,CAAEpD,KAAMsD,EAAUL,SAAS,IACvCrJ,sBAAoBC,KAAK,kCAE5ByF,OAAM,SAAC5H,GACJ0L,EAAY,CAAEpD,KAAM,CAAExD,MAAO9E,EAAE6L,SAAWN,SAAS,IACnDrJ,sBAAoB4C,MAAM,mCAAqC9E,EAAE6H,OACjExE,GAAS,SAOxB,gBAAGS,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAyCL,GAA1D,EAA+BO,WAA/B,EAA2CD,cAA3C,EAA0DN,QAAQQ,EAAlE,EAAkEA,QAAkBP,GAApF,EAA2EQ,QAA3E,EAAoFR,QAApF,OACG,kBAACpD,EAAA,EAAD,CAAM6D,YAAU,EAACR,SAAUE,GACvB,kBAACvD,EAAA,EAAKC,MAAN,CAAYS,GAAIoD,IAAKC,GAAG,KAAK7D,UAAU,uBACnC,kBAACF,EAAA,EAAK2C,MAAN,yBACA,kBAAC3C,EAAA,EAAKM,QAAN,CACIC,KAAK,OACLyD,KAAK,WACLnE,MAAOsD,EAAOsD,SACdjG,SAAUgD,EACVI,QAASD,EAAQ8C,WAAarD,EAAOqD,SACrCxC,YAAab,EAAOqD,WAExB,kBAACzG,EAAA,EAAKM,QAAQ4D,SAAd,CAAuB3D,KAAK,WAAW6C,EAAOqD,WAElD,yBAAKpJ,UAAU,wBACX,kBAACmE,EAAA,EAAD,CACImD,SAAU9B,EACVpB,QAAQ,YACRlB,KAAK,SACL/C,MAAO,CACHoH,OAAQ/B,EAAW,cAAgB,YAL3C,qBAchB,yBAAKxF,UAAU,SAAf,+BACA,yBAAKA,UAAU,OAvFG,OAAlB6N,EAASnD,KACFmD,EAASD,OACV,gDACA,sCAEFC,EAASF,QACF,aAGP,kBAAC,IAAD,CACI7G,kBAAmB,IACnB3F,GAAG,0BACHiC,YAAayK,EAASnD,KACtB3D,OAAQA,IACRC,OAAO,QACPuC,UAAU,EACVtC,MAAM,OACN9G,MAAO,CACHiH,KAAM,CACFC,SAAU,cCyEvBsF,EApGyB,WAAO,IAAD,EACb5K,IAAMC,UAAS,GADF,mBACnCwD,EADmC,KACzBC,EADyB,OAEV1D,IAAMC,SAAS,CAC3C4K,cAAe,CACXC,UAAW,CACP,CACIxK,IAAK,WACL0G,aAAc,UACdC,UAAU,OARgB,mBAEnCI,EAFmC,KAEzBC,EAFyB,KAapCC,EAASO,sBAAYT,GAC3B,OACI,oCACI,kBAAC,IAAD,CACI1D,cAAe,CACX0D,YAEJvD,SAAU,SAACC,GACP,IAAMC,EAAc,GAIpB,OAHKD,EAAOsD,WACRrD,EAAOqD,SAAW,YAEfrD,GAEXC,SAAU,SAACF,EAAD,IACNG,EADqC,EAApBA,gBACH,GACdoD,EAAY,eAAKvD,EAAOsD,cAG3B,gBAAGlD,EAAH,EAAGA,aAAwCE,GAA3C,EAAiBD,aAAjB,EAA+BE,WAA/B,EAA2CD,eAAeN,EAA1D,EAA0DA,OAA1D,EAAkEQ,QAAlE,EAA2EC,QAA3E,EAAoFR,OAApF,OACG,kBAACpD,EAAA,EAAD,CAAM6D,YAAU,EAACR,SAAUE,GACvB,kBAACvD,EAAA,EAAKC,MAAN,CAAYS,GAAIoD,IAAKC,GAAG,KAAK7D,UAAU,gBACnC,kBAACF,EAAA,EAAK2C,MAAN,8BACA,kBAAC,IAAD,CACIwB,kBAAmB,IACnB3F,GAAG,WACHiC,YAAa0C,EAAOsD,SACpBrC,OAAQA,IACRC,OAAO,QACPC,MAAM,OACN9D,SAAU,YAA0B,IAAvB+D,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACXD,EAIDzB,GAAS,IAHTW,EAAc,WAAYe,GAAY,IAAI,GAC1C1B,GAAS,KAKjBtF,MAAO,CACHiH,KAAM,CACFC,SAAU,YAK1B,yBAAKrH,UAAU,wBACX,kBAACmE,EAAA,EAAD,CACImD,SAAU9B,EACVpB,QAAQ,YACRlB,KAAK,SACL/C,MAAO,CACHoH,OAAQ/B,EAAW,cAAgB,YAL3C,qBAchB,yBAAKxF,UAAU,SAAf,uBACA,yBAAKA,UAAU,OACX,kBAAC,IAAD,CACI8G,kBAAmB,IACnB3F,GAAG,WACHiC,YAAaM,OAAOC,KAAK2F,GAAQnE,QAC7B,SAACC,EAAS/C,GAAV,sBACO+C,EADP,eAEK/C,EAA6B,oBAAhBiH,EAAOjH,GAAsB,6BAA+BiH,EAAOjH,OAErF,IAEJ0E,OAAQA,IACRC,OAAO,QACPuC,UAAU,EACVtC,MAAM,OACN9G,MAAO,CACHiH,KAAM,CACFC,SAAU,cClEvB6G,EA5BiC,WAC5C,OACI,oCACI,yBAAKlO,UAAU,OAAf,+HAKA,kBAAC,EAAD,CACIA,UAAU,MACVC,WAAU,2TC0CXkO,EAlDmC,WAAO,IAC7CtM,EAA2CE,IAAML,WAAWC,IAA5DE,gBAD4C,EAEIgI,wBAAhDuE,EAF4C,EAE5CA,sBAAuBC,EAFqB,EAErBA,qBAC/B,OACI,oCACsC,cAAjCxM,EAAgBpB,cACb,yBAAKT,UAAU,OACX,kBAAC6H,EAAA,EAAD,CAAOzD,QAAQ,WACX,oCADJ,sDACoE,IAChE,uBAAG+E,KAAK,mBAAR,gBAFJ,MAMR,yBACIhJ,MAAO,CACH2C,QAAS,OACToB,eAAgB,iBAGpB,kBAACC,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,WACL,IAAMiK,EAASF,IACXE,EAAOC,QACPjK,sBAAoBC,KAAK,qBAEzBD,sBAAoB4C,MAAM,wCAA0CoH,EAAOE,UAPvF,uBAaA,kBAACrK,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,WACL,IAAMiK,EAASD,IACXC,EAAOC,QACPjK,sBAAoBC,KAAK,qBAEzBD,sBAAoB4C,MAAM,wCAA0CoH,EAAOE,UAPvF,yBCvBHC,EAAkB,WAAO,IAClBC,EAAa7E,wBAArB8E,OAEAhH,EAAOjG,qBAAWC,IAAlBgG,GACR,OACI,kBAACC,EAAA,EAAD,KACI,kBAACnB,EAAA,EAAD,KACI,yBAAKzG,UAAU,WAAWmB,GALjB,gBAMT,kBAAC0G,EAAA,EAAD,CAAOzD,QAAQ,OAAOpE,UAAU,qBAC5B,kBAAC6H,EAAA,EAAMC,QAAP,KAPK,eAQL,kCACQ,2BATH,eAQL,gDAC0E,4CAD1E,IACgG,IAC5F,yCAFJ,KAEuB,mCAFvB,MAIA,kBAAC,EAAD,CACI9H,UAAU,MACVC,WAAU,oZAkBd,gDACqB,+CAEpB0H,EAAGQ,QACA,kBAAC,EAAD,MAEA,kBAAC,EAAD,MAEJ,2CACgB,wCAGhB,iGACA,kBAAC,EAAD,CACInI,UAAU,MACVC,WAAU,qBACvBuE,KAAKC,UAAUiK,EAAU,KAAM,GADR,iCAId,yBAAK1O,UAAU,WAAWmB,GAAG,aAC7B,gDACqB,oCAEpBwG,EAAGQ,QAAU,kBAAC,EAAD,MAAoC,kBAAC,EAAD,MAClD,yBAAKnI,UAAU,WAAWmB,GAAG,yBAC7B,wBAAInB,UAAU,OAAd,wBACyB,6CAEvB2H,EAAGQ,SAAW,kBAAC,EAAD,MAChB,kBAAC,EAAD,MACA,yBAAKnI,UAAU,WAAWmB,GAAG,yBAC7B,wBAAInB,UAAU,OAAd,qBACsB,kDAEpB2H,EAAGQ,SAAW,kBAAC,EAAD,MAChB,kBAAC,EAAD,UChFPyG,EAAoB,WAC7B,IADmC,EAEK7M,IAAMC,UAAS,GAFpB,mBAE5B6M,EAF4B,KAEdC,EAFc,KAGnC/M,IAAM0L,WAAU,WACZ,GAAIoB,EACA,MAAM,IAAIE,MAAM,iDAEpBD,GAAgB,KACjB,CAACD,IAR+B,IAU3BhN,EAA2CH,qBAAWC,IAAtDE,gBACR,OACI,kBAAC+F,EAAA,EAAD,KACI,kBAACnB,EAAA,EAAD,KACI,yBAAKzG,UAAU,WAAWmB,GAAG,aAC7B,kBAAC0G,EAAA,EAAD,CAAOzD,QAAQ,OAAOpE,UAAU,qBAC5B,kBAAC6H,EAAA,EAAMC,QAAP,KAfK,aAgBL,yGAC+E,2BAjB1E,aAgBL,kIAKA,6BACI,kBAAC3D,EAAA,EAAD,CACIC,QAAQ,YACRC,QAAS,WACLyK,GAAgB,KAHxB,kBAQ6B,eAA5BjN,EAAgBf,SACb,yBAAKd,UAAU,OACX,kBAAC6H,EAAA,EAAD,CAAOzD,QAAQ,WACX,oCADJ,0GAE6C,sCAF7C,MAE+D,IAC3D,uBAAG+E,KAAK,mBAAR,gBAHJ,OAONtH,EAAgBhB,mBACd,yBAAKb,UAAU,OACX,kBAAC6H,EAAA,EAAD,CAAOzD,QAAQ,WACX,oCADJ,iDAC8D,gDAAyB,IADvF,+CAEiD,IAC7C,uBAAG+E,KAAK,mBAAR,gBAHJ,WCpCnB6F,EAAyB,WAClC,OACI,kBAACC,EAAA,EAAD,CAAWjP,UAAU,OACjB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,Q,uCCmDGkP,GAhEa,WAAO,IAAD,EACRxN,qBAAWC,IAAzBgG,EADsB,EACtBA,GAAIwH,EADkB,EAClBA,MAEZ,OACI,oCACI,kBAACC,EAAA,EAAD,CAAQpP,UAAU,WAAWqP,MAAM,OAC/B,kBAACD,EAAA,EAAOE,MAAR,CAAcnG,KAAK,gDAAgDnJ,UAAU,oBACzE,yBAAKuP,IAAI,gBAAgBC,IAAKC,KAAMzP,UAAU,wCADlD,wBAIA,kBAACqM,EAAA,EAAD,CAAKrM,UAAU,iBACX,kBAACqM,EAAA,EAAIG,KAAL,CAAUrD,KAAK,mBAAf,kBACA,kBAACuG,GAAA,EAAD,CAAaC,MAAM,QAAQxO,GAAG,gBAC1B,kBAACuO,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,MAAMtD,KAAK,gBAAtC,eAGA,kBAACuG,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,MAAMtD,KAAK,uBAAtC,sBAGA,kBAACuG,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,MAAMtD,KAAK,kBAAtC,kBAIJ,kBAACuG,GAAA,EAAD,CAAaC,MAAM,WAAWxO,GAAG,gBAC7B,kBAACuO,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,MAAMtD,KAAK,gBAAtC,uBAGA,kBAACuG,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,MAAMtD,KAAK,yBAAtC,iCAGA,kBAACuG,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,MAAMtD,KAAK,yBAAtC,4CAGA,kBAACuG,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,MAAMtD,KAAK,kBAAtC,4BAGA,kBAACuG,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,MAAMtD,KAAK,aAAtC,eAGA,kBAACuG,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,MAAMtD,KAAK,6BAAtC,4BAGA,kBAACuG,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,MAAMtD,KAAK,aAAtC,eAMR,kBAACxG,EAAA,EAAD,CAAMiN,QAAM,GACR,kBAACF,GAAA,EAAD,CAAaC,MAAM,UAAUxO,GAAG,gBAC5B,kBAACuO,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,OAAOpI,QAAS,kBAAM8K,EAAM,eAAKxH,EAAN,CAAUQ,SAAS,OAAzE,MACQR,EAAGQ,SAjDf,UAmDI,kBAACuH,GAAA,EAAYnD,KAAb,CAAkBE,SAAS,OAAOpI,QAAS,kBAAM8K,EAAM,eAAKxH,EAAN,CAAUQ,SAAS,OAAzE,QACUR,EAAGQ,SApDjB,WAuDA,kBAACkE,EAAA,EAAIG,KAAL,CAAUrD,KAAK,iDAAf,UACA,kBAACkD,EAAA,EAAIG,KAAL,CAAUrD,KAAK,oDAAf,0B,UC3CL0G,GAZwB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAC9C,OACI,oCACI,kBAACC,GAAA,EAAD,CAAOC,KAAK,KAAKF,KAAMA,EAAMD,OAAQA,EAAQI,kBAAgB,gCACzD,kBAACF,GAAA,EAAMG,OAAP,CAAcC,aAAW,GACrB,kBAACJ,GAAA,EAAMK,MAAP,CAAalP,GAAG,gCAAhB,uBAEJ,kBAAC6O,GAAA,EAAMM,KAAP,eC0BDC,GAnCY,WAAO,IAAD,EACP7O,qBAAWC,IAAzBgG,EADqB,EACrBA,GAAIwH,EADiB,EACjBA,MACZ,OAAKxH,EAAGQ,QAIJ,oCACI,kBAACiH,EAAA,EAAD,CAAQpP,UAAU,oBAAoBqP,MAAM,OACxC,kBAACD,EAAA,EAAOE,MAAR,CAAcnG,KAAK,IAAInJ,UAAU,oBAAjC,YACa,0BAAMA,UAAU,SAAhB,YAEb,kBAACqM,EAAA,EAAD,CAAKrM,UAAU,kBAaf,kBAAC2C,EAAA,EAAD,CAAMiN,QAAM,GACR,kBAACvD,EAAA,EAAIG,KAAL,CAAUnI,QAAS,kBAAM8K,EAAM,eAAKxH,EAAN,CAAUQ,SAAS,OAAjD,gBAGR,kBAAC,GAAD,CACI2H,OAAQ,kBAAMX,EAAM,eAAKxH,EAAN,CAAUoI,KAAK,eAAMpI,EAAGoI,KAAV,CAAgBS,eAAe,QAChET,KAAMpI,EAAGoI,KAAKS,iBA3Bf,MC+BF7O,GAAiB8O,wBAAkC,MA+EjDC,GA7EO,WAAO,IAAD,EACe3O,IAAMC,SAAsB,CAC/DzB,MAAOD,EAAOC,MACdC,SAAUF,EAAOE,SACjBC,aAAcH,EAAOG,aACrBC,gBAAiBJ,EAAOI,gBACxBE,kBAAmBN,EAAOM,kBAC1BC,kBAAmBP,EAAOO,kBAC1BF,QAASL,EAAOK,QAChBI,YAAaT,EAAOS,YACpBC,OAAQV,EAAOU,OACfF,QAAS,aACTI,YAAY,eAAMZ,EAAOY,eAZL,mBACjBW,EADiB,KACAC,EADA,OAcJC,IAAMC,SAAa,CACnCmG,SAAS,EACT4H,KAAM,CACFS,eAAe,KAjBC,mBAcjB7I,EAdiB,KAcbwH,EAda,KAoBxB,OACI,oCACI,kBAACxN,GAAegP,SAAhB,CAAyBnO,MAAO,CAAEX,kBAAiBC,cAAa6F,KAAIwH,UAChE,kBAAC,mBAAD,CACI5O,MAAOsB,EAAgBtB,MACvBC,SAAUqB,EAAgBrB,SAC1BI,kBAAmBiB,EAAgBjB,kBACnCC,kBAAmBgB,EAAgBhB,kBACnCH,gBAAiBmB,EAAgBnB,gBACjCK,YAAac,EAAgBd,YAC7BC,OAAQa,EAAgBb,OACxBL,QAASkB,EAAgBlB,QACzBF,aAAcoB,EAAgBpB,aAC9BQ,gBAAgB,EAChBH,QAASe,EAAgBf,QACzBI,YAAaW,EAAgBX,YAC7B0P,YAAa,WACTC,QAAQC,IAAI,4BAEhBC,WAAY,WACRF,QAAQC,IAAI,2BAEhBE,SAAU,YAAyB,EAAtBnI,gBACTgI,QAAQC,IAAI,yBAEhBG,mBAAoB,YACD,QADiB,EAAbtC,QAEfrK,sBAAoBC,KAAK,8CAGjC2M,iBACI,kBAACjC,EAAA,EAAD,CAAWjP,UAAU,OACjB,kBAAC4H,EAAA,EAAD,KACI,kBAACnB,EAAA,EAAD,CACI0K,GAAI,GACJhR,MAAO,CACH+I,MAAO,QACPlC,OAAQ,QACRK,SAAU,QALlB,oCAcZ,kBAAC,wBAAD,MACA,kBAAC,GAAD,MACA,kBAAC,GAAD,MACA,kBAAC,EAAD,UCpGA+J,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCTNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDgI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjI,MAAK,SAAAkI,GACjCA,EAAaC,iB,mBE3InBC,EAAOC,QAAU,IAA0B,+D","file":"static/js/main.777f6a4d.chunk.js","sourcesContent":["import React from 'react';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport jsx from 'react-syntax-highlighter/dist/esm/languages/prism/jsx';\nimport { darcula } from 'react-syntax-highlighter/dist/esm/styles/prism';\nSyntaxHighlighter.registerLanguage('jsx', jsx);\n\ntype CodeBlockProps = {\n    className?: string;\n    codeString: string;\n};\n\nconst CodeBlock: React.FC<CodeBlockProps> = ({ className, codeString }) => {\n    return (\n        <div className={className}>\n            <SyntaxHighlighter\n                language=\"javascript\"\n                style={darcula}\n                showLineNumbers\n            >\n                {codeString}\n            </SyntaxHighlighter>\n        </div>\n    );\n};\n\nexport default CodeBlock;\n","const config = {\n    envId: 'bn1ab7m56qolupi5sa0g',\n    fetchNow: true,\n    decisionMode: 'API',\n    pollingInterval: 60,\n    timeout: 2,\n    enableConsoleLogs: true,\n    enableErrorLayout: true,\n    nodeEnv: 'production',\n    flagshipApi: 'https://decision-api.flagship.io/v1/',\n    apiKey: null,\n    enableSafeMode: true,\n    visitorData: {\n        id: 'test-vid',\n        context: { isAwesome: false, isEvil: false }\n    },\n    sandbox: {\n        config: {\n            fetchNow: true,\n            enableConsoleLogs: true,\n            enableErrorLayout: true\n        },\n        envId: ['bn1ab7m56qolupi5sa0g_fake_1', 'bn1ab7m56qolupi5sa0g_fake_2'],\n        nodeEnv: ['production', 'development'],\n        pollingInterval: [10, 60, 120, 300],\n        decisionMode: ['API', 'Bucketing'],\n        timeout: [0.01, 0.5, 1, 2],\n        flagshipApi: ['https://decision-api.flagship.io/v1/', 'https://decision.flagship.io/v2/'],\n        visitorId: ['test-vid', 'test-vid_2', 'test-vid_3']\n    }\n};\nexport default config;\n","import React, { useContext } from 'react';\nimport { Button, Form } from 'react-bootstrap';\n\nimport { AppSettings, SdkSettings, SettingContext } from '../../../../../../../App';\nimport config from '../../../../../../../config';\nimport CodeBlock from '../../../../../../common/CodeBlock';\n\nimport { NotificationManager } from 'react-notifications';\n\nconst PlayConfig: React.FC = () => {\n    const { currentSettings: currSettings, setSettings /* , QA */ } = useContext(SettingContext) as AppSettings;\n    const [newSettings, setNewSettings] = React.useState<SdkSettings>({\n        ...currSettings\n    });\n\n    const handleSettings = (e, key) => {\n        const computeValue = () => {\n            if (key === 'pollingInterval') {\n                return parseInt(e.target.value.split(' min')[0]);\n            } else if (key === 'timeout') {\n                return parseFloat(e.target.value.split(' second(s)')[0]);\n            }\n            return e.target.value;\n        };\n        setNewSettings({\n            ...newSettings,\n            [key]: computeValue()\n        });\n    };\n    return (\n        <>\n            <Form>\n                <Form.Group\n                    controlId=\"initForm.Control1.1\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>envId: </div>\n                    <Form.Control\n                        type=\"text\"\n                        className=\"fsTextField\"\n                        onChange={(e) => handleSettings(e, 'envId')}\n                        value={newSettings.envId}\n                        placeholder={newSettings.apiKey || 'this field is required !'}\n                    ></Form.Control>\n                </Form.Group>\n                <Form.Group\n                    controlId=\"initForm.Control1.11\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>nodeEnv: </div>\n                    <Form.Control as=\"select\" onChange={(e) => handleSettings(e, 'nodeEnv')}>\n                        <option key={newSettings.nodeEnv}>{newSettings.nodeEnv}</option>\n                        {config.sandbox.nodeEnv\n                            .filter((i) => i !== newSettings.nodeEnv)\n                            .map((id) => (\n                                <option key={id}>{id}</option>\n                            ))}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group\n                    controlId=\"initForm.Control1.22\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>flagshipApi: </div>\n                    <Form.Control as=\"select\" onChange={(e) => handleSettings(e, 'flagshipApi')}>\n                        <option key={newSettings.flagshipApi}>{newSettings.flagshipApi}</option>\n                        {config.sandbox.flagshipApi\n                            .filter((i) => i !== newSettings.flagshipApi)\n                            .map((id) => (\n                                <option key={id}>{id}</option>\n                            ))}\n                    </Form.Control>\n                </Form.Group>\n                <Form.Group\n                    controlId=\"initForm.Control1.23\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>apiKey: </div>\n                    <Form.Control\n                        type=\"text\"\n                        className=\"fsTextField\"\n                        onChange={(e) => handleSettings(e, 'apiKey')}\n                        placeholder={newSettings.apiKey || 'null'}\n                    ></Form.Control>\n                </Form.Group>\n                <Form.Group\n                    controlId=\"initForm.Control1.21\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>decisionMode: </div>\n                    <Form.Control as=\"select\" onChange={(e) => handleSettings(e, 'decisionMode')}>\n                        <option key={newSettings.decisionMode}>{newSettings.decisionMode}</option>\n                        {config.sandbox.decisionMode\n                            .filter((i) => i !== newSettings.decisionMode)\n                            .map((id) => (\n                                <option key={id}>{id}</option>\n                            ))}\n                    </Form.Control>\n                </Form.Group>\n                {newSettings.decisionMode === 'Bucketing' && (\n                    <Form.Group\n                        controlId=\"initForm.Control1.21\"\n                        style={{\n                            display: 'flex',\n                            alignItems: 'center',\n                            marginLeft: '16px'\n                        }}\n                    >\n                        <div>pollingInterval: </div>\n                        <Form.Control as=\"select\" onChange={(e) => handleSettings(e, 'pollingInterval')}>\n                            <option key={'pollingInterval' + newSettings.pollingInterval?.toString()}>\n                                {newSettings.pollingInterval} secondes\n                            </option>\n                            {config.sandbox.pollingInterval\n                                .filter((i) => i !== newSettings.pollingInterval)\n                                .map((id) => (\n                                    <option key={id}>{id} secondes</option>\n                                ))}\n                        </Form.Control>\n                    </Form.Group>\n                )}\n                <Form.Group\n                    controlId=\"initForm.Control1.23\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>timeout: </div>\n                    <Form.Control as=\"select\" onChange={(e) => handleSettings(e, 'timeout')}>\n                        <option key={newSettings.timeout}>{newSettings.timeout} second(s)</option>\n                        {config.sandbox.timeout\n                            .filter((i) => i !== newSettings.timeout)\n                            .map((id) => (\n                                <option key={id}>{id} second(s)</option>\n                            ))}\n                    </Form.Control>\n                </Form.Group>\n                {Object.keys({\n                    ...config.sandbox.config\n                })\n                    // .filter((i) => i != 'nodeEnv')\n                    .map((setting) => (\n                        <Form.Group controlId={setting + 'Form'} key={setting}>\n                            <Form.Check\n                                type=\"checkbox\"\n                                checked={!!newSettings[setting] || false}\n                                onChange={(e) => {\n                                    const toSubmit = {\n                                        ...newSettings,\n                                        [setting]: e.currentTarget.checked\n                                    };\n                                    if (typeof newSettings[setting] !== 'boolean') {\n                                        delete toSubmit[setting];\n                                    }\n                                    setNewSettings(toSubmit);\n                                }}\n                                label={`${setting}=${newSettings[setting]}`}\n                            />\n                        </Form.Group>\n                    ))}\n            </Form>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'flex-end'\n                }}\n            >\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => {\n                        setSettings({ ...newSettings, apiKey: newSettings.apiKey || null });\n                        NotificationManager.info('Settings updated');\n                    }}\n                >\n                    Apply change\n                </Button>\n            </div>\n            <div>Since we have set those settings:</div>\n            <CodeBlock className=\"mv3\" codeString={`${JSON.stringify(currSettings, null, 2)}`} />\n            <div>When you change those values, you can notice the behavior of the SDK, on logs & network.</div>\n            <div className=\"mb5\">It will impact the output of Flagship SDK Hooks as well, take a look below.</div>\n        </>\n    );\n};\n\nexport default PlayConfig;\n","import React, { useContext } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { NotificationManager } from 'react-notifications';\n\nimport { AppSettings, SdkSettings, SettingContext } from '../../../../../../../App';\nimport config from '../../../../../../../config';\n\nconst PlayVisitorData: React.FC = () => {\n    const { currentSettings: currSettings, setSettings } = useContext(SettingContext) as AppSettings;\n\n    const [newSettings, setNewSettings] = React.useState<SdkSettings>({\n        ...currSettings\n    });\n\n    const handleVisitorId = (e) =>\n        setNewSettings({\n            ...newSettings,\n            visitorData: {\n                ...newSettings.visitorData,\n                id: e?.target?.value\n            }\n        });\n\n    const handleVisitorContext = (e) => {\n        const node = JSON.parse(e.currentTarget.parentElement.innerText);\n        const temp = { ...newSettings };\n        if (e.currentTarget.checked) {\n            setNewSettings({\n                ...newSettings,\n                visitorData: {\n                    ...newSettings.visitorData,\n                    context: {\n                        ...newSettings.visitorData.context,\n                        [Object.keys(node)[0]]: true\n                    }\n                }\n            });\n        } else {\n            const keyToRemove = Object.keys(node)[0];\n            setNewSettings({\n                ...newSettings,\n                visitorData: {\n                    ...newSettings.visitorData,\n                    context: Object.entries(temp.visitorData.context).reduce((reducer, [key, value]) => {\n                        if (key === keyToRemove) {\n                            if (Object.keys(config.visitorData.context).includes(keyToRemove)) {\n                                return { ...reducer, [key]: false };\n                            }\n                            return reducer;\n                        }\n                        return { ...reducer, [key]: value };\n                    }, {})\n                }\n            });\n        }\n    };\n    return (\n        <>\n            <Form>\n                <Form.Group\n                    controlId=\"initForm.ControlSelect2\"\n                    style={{\n                        display: 'flex',\n                        alignItems: 'center',\n                        marginLeft: '16px'\n                    }}\n                >\n                    <div>visitorId: </div>\n                    <Form.Control\n                        type=\"text\"\n                        className=\"fsTextField\"\n                        onChange={handleVisitorId}\n                        value={newSettings.visitorData.id}\n                        placeholder={newSettings.visitorData.id || 'this field is required !'}\n                    ></Form.Control>\n                </Form.Group>\n                <div className=\"fsAnchor\" id=\"playWithVisitorContext\" />\n                <Form.Group controlId=\"initForm.ControlSelect3\">\n                    <Form.Label>visitor context</Form.Label>\n                    {Object.entries({\n                        ...config.visitorData.context,\n                        ...newSettings.visitorData.context\n                    }).map(([key, value]) => (\n                        <Form.Check\n                            key={key}\n                            type=\"checkbox\"\n                            id={`default-${key}`}\n                            checked={newSettings.visitorData.context.hasOwnProperty(key) ? !!value : false}\n                            onChange={handleVisitorContext}\n                            label={JSON.stringify({ [key]: value })}\n                        />\n                    ))}\n                </Form.Group>\n            </Form>\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'flex-end'\n                }}\n            >\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => {\n                        setSettings({ ...newSettings });\n                        NotificationManager.info('Settings updated');\n                    }}\n                >\n                    Apply change\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default PlayVisitorData;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { SettingContext, AppSettings } from '../../../../../../../App';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport { NotificationManager } from 'react-notifications';\n\nconst PlayConfig: React.FC = () => {\n    const { currentSettings, setSettings } = useContext(SettingContext) as AppSettings;\n\n    const [hasError, setError] = React.useState(false);\n    return (\n        <Formik\n            initialValues={{\n                envId: currentSettings.envId,\n                settings: {\n                    fetchNow: currentSettings.fetchNow,\n                    activateNow: currentSettings.activateNow,\n                    decisionMode: currentSettings.decisionMode,\n                    enableConsoleLogs: currentSettings.enableConsoleLogs,\n                    enableErrorLayout: currentSettings.enableErrorLayout,\n                    enableSafeMode: currentSettings.enableSafeMode,\n                    nodeEnv: currentSettings.nodeEnv,\n                    flagshipApi: currentSettings.flagshipApi,\n                    apiKey: currentSettings.apiKey\n                }\n            }}\n            validate={(values) => {\n                const errors: any = {};\n                if (!values.envId) {\n                    errors.envId = 'Required';\n                }\n                return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n                setSubmitting(false);\n                setSettings({\n                    ...currentSettings,\n                    envId: values.envId,\n                    ...values.settings\n                });\n                NotificationManager.info('Settings updated');\n            }}\n        >\n            {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, isValid, errors }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                    <Form.Group as={Col} md=\"12\" controlId=\"envIdForm\">\n                        <Form.Label>Environment ID</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            name=\"envId\"\n                            value={values.envId}\n                            onChange={handleChange}\n                            isValid={touched.envId && !errors.envId}\n                            isInvalid={!!errors.envId}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">{errors.envId}</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                        <Form.Label>SDK settings props</Form.Label>\n                        <JSONInput\n                            waitAfterKeyPress={3000}\n                            id=\"settings\"\n                            placeholder={values.settings}\n                            locale={locale}\n                            height=\"550px\"\n                            width=\"100%\"\n                            onChange={({ error, jsObject }) => {\n                                if (!error) {\n                                    setFieldValue('settings', jsObject || {}, true);\n                                    setError(false);\n                                } else {\n                                    setError(true);\n                                }\n                            }}\n                            style={{\n                                body: {\n                                    fontSize: '16px'\n                                }\n                            }}\n                        />\n                    </Form.Group>\n                    <div className=\"flex justify-end ph3\">\n                        <Button\n                            disabled={hasError}\n                            variant=\"secondary\"\n                            type=\"submit\"\n                            style={{\n                                cursor: hasError ? 'not-allowed' : 'pointer'\n                            }}\n                        >\n                            Apply change\n                        </Button>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default PlayConfig;\n","import React, { useContext } from 'react';\nimport { Formik } from 'formik';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { SettingContext, AppSettings } from '../../../../../../../App';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport { NotificationManager } from 'react-notifications';\n\nconst PlayVisitorData: React.FC = () => {\n    const { currentSettings, setSettings } = useContext(SettingContext) as AppSettings;\n    const [hasError, setError] = React.useState(false);\n    return (\n        <Formik\n            initialValues={{\n                vId: currentSettings.visitorData.id,\n                vContext: currentSettings.visitorData.context\n            }}\n            validate={(values) => {\n                const errors: any = {};\n                if (!values.vId) {\n                    errors.vId = 'Required';\n                }\n                return errors;\n            }}\n            onSubmit={(values, { setSubmitting }) => {\n                setSubmitting(false);\n                setSettings({\n                    ...currentSettings,\n                    visitorData: {\n                        id: values.vId,\n                        context: values.vContext || {}\n                    }\n                });\n                NotificationManager.info('Settings updated');\n            }}\n        >\n            {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, isValid, errors }) => (\n                <Form noValidate onSubmit={handleSubmit}>\n                    <Form.Group as={Col} md=\"12\" controlId=\"validationFormik01\">\n                        <Form.Label>Visitor ID</Form.Label>\n                        <Form.Control\n                            type=\"text\"\n                            name=\"vId\"\n                            value={values.vId}\n                            onChange={handleChange}\n                            isValid={touched.vId && !errors.vId}\n                            isInvalid={!!errors.vId}\n                        />\n                        <Form.Control.Feedback type=\"invalid\">{errors.vId}</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"12\" controlId=\"validationFormik02\">\n                        <Form.Label>Visitor Context</Form.Label>\n                        <JSONInput\n                            waitAfterKeyPress={3000}\n                            id=\"a_unique_id\"\n                            placeholder={values.vContext}\n                            locale={locale}\n                            height=\"550px\"\n                            width=\"100%\"\n                            onChange={({ error, jsObject }) => {\n                                if (!error) {\n                                    setFieldValue('vContext', jsObject || {}, true);\n                                    setError(false);\n                                } else {\n                                    setError(true);\n                                }\n                            }}\n                            style={{\n                                body: {\n                                    fontSize: '16px'\n                                }\n                            }}\n                        />\n                    </Form.Group>\n                    <div className=\"flex justify-end ph3\">\n                        <Button\n                            disabled={hasError}\n                            variant=\"secondary\"\n                            type=\"submit\"\n                            style={{\n                                cursor: hasError ? 'not-allowed' : 'pointer'\n                            }}\n                        >\n                            Apply change\n                        </Button>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n};\n\nexport default PlayVisitorData;\n","import React, { useContext } from 'react';\nimport { Alert, Col, Row } from 'react-bootstrap';\n\nimport { AppSettings, SettingContext } from '../../../../App';\nimport CodeBlock from '../../../common/CodeBlock';\nimport PlayConfig from './components/normal/PlayConfig';\nimport PlayVisitorData from './components/normal/PlayVisitorData';\nimport PlayConfigQA from './components/qa/PlayConfig';\nimport PlayVisitorDataQA from './components/qa/PlayVisitorData';\n\nexport const DemoInitialization = () => {\n    const name = 'initialization';\n    const { currentSettings: currSettings, QA /* setSettings */ } = useContext(SettingContext) as AppSettings;\n\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={name} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{name}</Alert.Heading>\n                    <p>\n                        The <b>{name}</b> is proceed with <b>FlagshipProvider</b>. In this demo app, it is plugged like\n                        so:\n                    </p>\n                    <CodeBlock\n                        className=\"mv3\"\n                        codeString={`import React from 'react';\nimport { FlagshipProvider } from \"@flagship.io/react-sdk\";\n\nconst App: React.FC = () => (\n  <>\n      <FlagshipProvider\n      envId={${currSettings.envId}}\n      fetchNow={${typeof currSettings.fetchNow === 'undefined' ? 'false' : currSettings.fetchNow.toString()}}\n      activateNow={${typeof currSettings.activateNow === 'undefined' ? 'false' : currSettings.activateNow.toString()}}\n      enableConsoleLogs={${\n          typeof currSettings.enableConsoleLogs === 'undefined' ? 'false' : currSettings.enableConsoleLogs.toString()\n      }}\n      decisionMode=\"${typeof currSettings.decisionMode === 'undefined' ? 'API' : currSettings.decisionMode.toString()}\"\n      pollingInterval={${\n          typeof currSettings.pollingInterval === 'undefined' ? 'undefined' : currSettings.pollingInterval?.toString()\n      }} // minute(s)\n      timeout={${typeof currSettings.timeout === 'undefined' ? '2' : currSettings.timeout?.toString()}} // second(s)\n      enableErrorLayout={${\n          typeof currSettings.enableErrorLayout === 'undefined' ? 'false' : currSettings.enableErrorLayout.toString()\n      }}\n      nodeEnv=\"${typeof currSettings.nodeEnv === 'undefined' ? 'undefined' : currSettings.nodeEnv.toString()}\"\n      flagshipApi=\"${\n          typeof currSettings.flagshipApi === 'undefined' ? 'undefined' : currSettings.flagshipApi.toString()\n      }\"\n      apiKey=\"${!currSettings.apiKey ? 'null' : currSettings.apiKey.toString()}\"\n      visitorData=${JSON.stringify(currSettings.visitorData, null, 8).slice(0, -2)}\n      }\n      onInitStart={() => {\n        console.log(\"init start\");\n      }}\n      onInitDone={() => {\n        console.log(\"init done\");\n      }}\n      onUpdate={({ fsModifications }) => {\n        console.log(\n            'React SDK updated with modifications:' + JSON.stringify(fsModifications)\n        );\n      }}\n      loadingComponent={\n        <Container className=\"mt3\">\n          <Row>\n            <Col xs={12}>Loading Flagship React SDK...</Col>\n          </Row>\n        </Container>\n      }\n    >\n      <Header />\n      <AppContainer />\n    </FlagshipProvider>\n  </>\n);          `}\n                    />\n                    <p>To understand impact of each props, you can change some value dynamically here: </p>\n                    <h3\n                        id=\"playWithConfig\"\n                        style={{\n                            borderBottom: '1px solid grey',\n                            marginBottom: '16px',\n                            paddingBottom: '8px'\n                        }}\n                    >\n                        1 - Playing with <i>sdk settings</i>\n                    </h3>\n                    {QA.enabled ? <PlayConfigQA></PlayConfigQA> : <PlayConfig></PlayConfig>}\n                    <h3\n                        style={{\n                            borderBottom: '1px solid grey',\n                            marginBottom: '16px',\n                            paddingBottom: '8px'\n                        }}\n                    >\n                        2 - Playing with <i>visitorData</i>\n                    </h3>\n                    {QA.enabled ? <PlayVisitorDataQA></PlayVisitorDataQA> : <PlayVisitorData></PlayVisitorData>}\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport CodeBlock from '../../../../../common/CodeBlock';\nimport { useFsActivate } from '@flagship.io/react-sdk';\n\nconst PlayWithActivate: React.FC = () => {\n    const [toggle, setToggle] = React.useState(false);\n    useFsActivate(['color', 'testUnknownKey'], [toggle]);\n    const demoHookName = 'useFsActivate';\n    return (\n        <>\n            <p>\n                Use <b>{demoHookName}</b> hook to trigger activation of a modification when needed:\n            </p>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`const [toggle, setToggle] = React.useState(false);\nuseFsActivate(['color','testUnknownKey'], [toggle]);\n\n// {...}\n\n<Button\nvariant=\"secondary\"\nonClick={() => setToggle(!toggle)}\n>\n    Trigger activate\n</Button>`}\n            />\n            <Button variant=\"secondary\" onClick={() => setToggle(!toggle)}>\n                Trigger activate\n            </Button>\n            <div className=\"mv3\">\n                <p>\n                    In this example, we're activating only when <i>toggle</i> value has changed as we have specified a\n                    2nd argument in <i>useFsActivate</i> hook.\n                </p>\n                <p>\n                    We also specified in 1st argument that we want to activate 3 keys. For each key, there is 2 possible\n                    scenarios:\n                </p>\n                <p>If the key exist, a http request \"activate\" will be done.</p>\n                <p>If the key does not exist, you will receive a warning log.</p>\n            </div>\n        </>\n    );\n};\n\nexport default PlayWithActivate;\n","import { useFsActivate } from '@flagship.io/react-sdk';\nimport { Formik } from 'formik';\nimport React from 'react';\nimport { Button, Col, Form } from 'react-bootstrap';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayWithActivateQA: React.FC = () => {\n    const [hasError, setError] = React.useState(false);\n    const [toggle, setToggle] = React.useState(false);\n    const [modificationToActivate, setModificationToActivate] = React.useState(['btnColor', 'otherKey1', 'otherKey2']);\n    useFsActivate(modificationToActivate, [toggle]);\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    modificationToActivate: modificationToActivate\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.modificationToActivate) {\n                        errors.modificationToActivate = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setModificationToActivate([...values.modificationToActivate]);\n                    setToggle(!toggle);\n                }}\n            >\n                {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, isValid, errors }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>useFsModifications arguments</Form.Label>\n                            <JSONInput\n                                waitAfterKeyPress={3000}\n                                id=\"modificationToActivate\"\n                                placeholder={values.modificationToActivate}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue('modificationToActivate', jsObject || {}, true);\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Trigger activate\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    );\n};\n\nexport default PlayWithActivateQA;\n","import React, { useContext } from 'react';\nimport { Alert, Col, Row } from 'react-bootstrap';\nimport PlayWithActivate from './components/normal';\nimport { AppSettings, SettingContext } from '../../../../App';\nimport PlayWithActivateQA from './components/qa';\n\nexport const DemoUseFsActivate: React.FC = () => {\n    const demoHookName = 'useFsActivate';\n    const { QA } = useContext(SettingContext) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={demoHookName} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    {QA.enabled ? (\n                        <PlayWithActivateQA></PlayWithActivateQA>\n                    ) : (\n                        <PlayWithActivate></PlayWithActivate>\n                    )}\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { useFsModifications } from '@flagship.io/react-sdk';\nimport { Button } from 'react-bootstrap';\n\nconst PlayWithParams: React.FC = () => {\n    const fsModifications = useFsModifications([\n        {\n            key: 'color',\n            defaultValue: '#FF33E3', // pink\n            activate: false\n        }\n    ]);\n    const demoHookName = 'useFsModifications';\n    return (\n        <>\n            <p>\n                Use <b>{demoHookName}</b> hook to get the modifications:\n            </p>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`import { useFsModifications } from '@flagship.io/react-sdk';\nconst fsModifications = useFsModifications([\n    {\n        key: 'color',\n        defaultValue: '#FF33E3', // pink\n        activate: false\n    }\n]);`}\n            />\n            <p>Output: </p>\n            <div>\n                <Button\n                    variant=\"secondary\"\n                    style={{\n                        backgroundColor: fsModifications.color as string\n                    }}\n                >\n                    {`My color tells my visitor mood (backgroundColor=${fsModifications.color})`}\n                </Button>\n            </div>\n            <div className=\"mv3\">\n                Based on the campaign that we set on Flagship platform, the color of the button will change depending\n                values set in the <a href=\"#playWithVisitorContext\">visitor context</a>.\n            </div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`<Button\n    variant=\"secondary\"\n    style={{\n        backgroundColor: fsModifications.color\n    }}\n>\n    {\\`My color tells my visitor mood (backgroundColor=\\${fsModifications.color})\\`}\n</Button>`}\n            />\n        </>\n    );\n};\n\nexport default PlayWithParams;\n","import { useFsModifications } from '@flagship.io/react-sdk';\nimport { Formik } from 'formik';\nimport React from 'react';\nimport { Button, Col, Form } from 'react-bootstrap';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayWithParams: React.FC = () => {\n    const [hasError, setError] = React.useState(false);\n    const [fsParams, setFsParams] = React.useState([\n        {\n            key: 'btnColor',\n            defaultValue: '#FF33E3', // pink\n            activate: false\n        }\n    ]);\n    const output = useFsModifications(fsParams);\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    fsParams\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.fsParams) {\n                        errors.fsParams = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setFsParams([...values.fsParams]);\n                }}\n            >\n                {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, isValid, errors }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>useFsModifications arguments</Form.Label>\n                            <JSONInput\n                                waitAfterKeyPress={3000}\n                                id=\"fsParams\"\n                                placeholder={values.fsParams}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue('fsParams', jsObject || {}, true);\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Apply change\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"mv3 b\">useFsModifications output:</div>\n            <div className=\"mb3\">\n                <JSONInput\n                    waitAfterKeyPress={3000}\n                    id=\"fsOutput\"\n                    placeholder={output}\n                    locale={locale}\n                    height=\"550px\"\n                    viewOnly={true}\n                    width=\"100%\"\n                    style={{\n                        body: {\n                            fontSize: '16px'\n                        }\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default PlayWithParams;\n","import React, { useContext } from 'react';\nimport { Alert, Col, Row } from 'react-bootstrap';\n\nimport { AppSettings, SettingContext } from '../../../../App';\nimport PlayWithParams from './components/normal/PlayWithParams';\nimport PlayWithParamsQA from './components/qa/PlayWithParams';\n\nexport const DemoUseFsModifications = () => {\n    const demoHookName = 'useFsModifications';\n    const { QA } = useContext(SettingContext) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={demoHookName} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    {QA.enabled ? <PlayWithParamsQA></PlayWithParamsQA> : <PlayWithParams></PlayWithParams>}\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport CodeBlock from '../../../../../common/CodeBlock';\nimport { Form, Button } from 'react-bootstrap';\nimport { useFlagship } from '@flagship.io/react-sdk';\nimport { NotificationManager } from 'react-notifications';\n\nconst PlayWithSynchronize: React.FC = () => {\n    const [activateAllModifications, setActivate] = React.useState(false);\n    const { synchronizeModifications } = useFlagship();\n    return (\n        <>\n            <div className=\"mb3\">\n                <b>Demo</b>:\n            </div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`const { synchronizeModifications } = useFlagship();\n\nreturn (\n    <>\n        <Button\n            onClick={() => {\n                synchronizeModifications(activateAllModifications)\n                    .then((statusCode) => {\n                        if (statusCode < 300) {\n                            // Notify success...\n                        } else {\n                            // Notify failure...\n                        }\n                    })\n                    .catch((error) => {\n                        // Notify error...\n                    });\n            }}\n        >\n            Trigger a synchronize\n        </Button>\n    </>\n)`}\n            ></CodeBlock>\n            <div className=\"mb3\">\n                <code>synchronizeModifications</code> is accessible by extracting it from <code>useFlagship</code> hook.\n            </div>\n            <div className=\"mb3\">\n                Calling <code>synchronizeModifications</code> will return a <code>{'Promise<number>'}</code> in case of\n                you need to ensure that synchronization succeed.\n            </div>\n            <div className=\"mb3\">\n                The function takes an optional <code>boolean</code> argument if you want to activate all campaigns that\n                will be synchronized.\n            </div>\n            <Form>\n                <Form.Group controlId=\"demoFsSynchronize.ControlSelect2\">\n                    <Form.Label>Playing with argument(s)</Form.Label>\n                    <Form.Check\n                        type=\"checkbox\"\n                        checked={activateAllModifications}\n                        onChange={(e) => setActivate(e.currentTarget.checked)}\n                        label={`activateAllModifications=${activateAllModifications}`}\n                    />\n                </Form.Group>\n            </Form>\n            <div className=\"flex flex-row-reverse\">\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => {\n                        synchronizeModifications(activateAllModifications)\n                            .then((statusCode) => {\n                                if (statusCode < 300) {\n                                    NotificationManager.info(\n                                        'synchronizeModifications success with statusCode=' + statusCode\n                                    );\n                                } else {\n                                    NotificationManager.error(\n                                        'synchronizeModifications failed with statusCode=' + statusCode\n                                    );\n                                }\n                            })\n                            .catch((error) => {\n                                NotificationManager.error('synchronizeModifications failed with error=' + error.stack);\n                            });\n                    }}\n                >\n                    Trigger a synchronize\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default PlayWithSynchronize;\n","import React from 'react';\nimport { Alert, Col, Row } from 'react-bootstrap';\n\nimport PlayWithSynchronize from './components/normal';\n\nexport const DemoUseFsSynchronize: React.FC = () => {\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id=\"campaignsSynchronization\" />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>Campaigns synchronization</Alert.Heading>\n                    <PlayWithSynchronize></PlayWithSynchronize>\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport { Button, Nav } from 'react-bootstrap';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { TransactionHit, ScreenHit, ItemHit, EventHit } from '@flagship.io/js-sdk';\nimport { useFlagship } from '@flagship.io/react-sdk';\n\nconst PlayWithHits: React.FC = () => {\n    const { hit: fsHit } = useFlagship();\n    const multipleHitBundle = {\n        multipleCodeString: `<Button\n    onClick={() => {\n        const transactionHit = {\n            type: 'Transaction',\n            data: {\n                transactionId: '12451342423',\n                affiliation: 'myAffiliation',\n                totalRevenue: 999,\n                shippingCost: 888,\n                shippingMethod: 'myShippingMethod',\n                currency: 'myCurrency',\n                taxes: 1234444,\n                paymentMethod: 'myPaymentMethod',\n                itemCount: 2,\n                couponCode: 'myCOUPON',\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'myScreen'\n            }\n        };\n        const eventHit = {\n            type: 'Event',\n            data: {\n                category: 'User Engagement',\n                action: 'signOff',\n                label: 'yolo label ;)',\n                value: 123,\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'YoloTitle'\n            }\n        };\n        fsHit.sendMultiple([transactionHit, eventHit]);\n    }}\n>\n    Send multiple transaction hits\n</Button>`,\n        multipleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const transactionHit = {\n                        type: 'Transaction',\n                        data: {\n                            transactionId: '12451342423',\n                            affiliation: 'myAffiliation',\n                            totalRevenue: 999,\n                            shippingCost: 888,\n                            shippingMethod: 'myShippingMethod',\n                            currency: 'myCurrency',\n                            taxes: 1234444,\n                            paymentMethod: 'myPaymentMethod',\n                            itemCount: 2,\n                            couponCode: 'myCOUPON',\n                            documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'myScreen'\n                        }\n                    } as {\n                        type: 'Transaction';\n                        data: TransactionHit;\n                    };\n                    const eventHit = {\n                        type: 'Event',\n                        data: {\n                            category: 'User Engagement',\n                            action: 'signOff',\n                            label: 'yolo label ;)',\n                            value: 123,\n                            documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloTitle'\n                        }\n                    } as {\n                        type: 'Event';\n                        data: EventHit;\n                    };\n                    fsHit.sendMultiple([transactionHit, eventHit]);\n                }}\n            >\n                Send multiple mixed hits\n            </Button>\n        )\n    };\n    const transactionHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Transaction',\n            data: {\n                transactionId: '12451342423',\n                affiliation: 'myAffiliation',\n                totalRevenue: 999,\n                shippingCost: 888,\n                shippingMethod: 'myShippingMethod',\n                currency: 'myCurrency',\n                taxes: 1234444,\n                paymentMethod: 'myPaymentMethod',\n                itemCount: 2,\n                couponCode: 'myCOUPON',\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'myScreen'\n            }\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a transaction hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Transaction',\n                        data: {\n                            transactionId: '12451342423',\n                            affiliation: 'myAffiliation',\n                            totalRevenue: 999,\n                            shippingCost: 888,\n                            shippingMethod: 'myShippingMethod',\n                            currency: 'myCurrency',\n                            taxes: 1234444,\n                            paymentMethod: 'myPaymentMethod',\n                            itemCount: 2,\n                            couponCode: 'myCOUPON',\n                            documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'myScreen'\n                        }\n                    } as {\n                        type: 'Transaction';\n                        data: TransactionHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a transaction hit\n            </Button>\n        )\n    };\n    const screenHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Screen',\n            data: {\n                documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'YoloScreen',\n            },\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a screen hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Screen',\n                        data: {\n                            documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloScreen'\n                        }\n                    } as {\n                        type: 'Screen';\n                        data: ScreenHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a screen hit\n            </Button>\n        )\n    };\n    const itemHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Item',\n            data: {\n              transactionId: '12451342423',\n              name: 'yoloItem',\n              price: 999,\n              code: 'yoloCode',\n              category: 'yoloCategory',\n              quantity: 1234444,\n              documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n              pageTitle: 'YoloScreen',\n            }\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a item hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Item',\n                        data: {\n                            transactionId: '12451342423',\n                            name: 'yoloItem',\n                            price: 999,\n                            code: 'yoloCode',\n                            category: 'yoloCategory',\n                            quantity: 1234444,\n                            documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloScreen'\n                        }\n                    } as {\n                        type: 'Item';\n                        data: ItemHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a item hit\n            </Button>\n        )\n    };\n\n    const eventHitBundle = {\n        simpleCodeString: `<Button\n    onClick={() => {\n        const mockHit = {\n            type: 'Event',\n            data: {\n                category: 'User Engagement',\n                action: 'signOff',\n                label: 'yolo label ;)',\n                value: 123,\n                documentLocation:\n                    'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                pageTitle: 'YoloTitle'\n            }\n        };\n        fsHit.send(mockHit);\n    }}\n>\n    Send a page hit\n</Button>`,\n        simpleComponent: (\n            <Button\n                variant=\"secondary\"\n                onClick={() => {\n                    const mockHit = {\n                        type: 'Event',\n                        data: {\n                            category: 'User Engagement',\n                            action: 'signOff',\n                            label: 'yolo label ;)',\n                            value: 123,\n                            documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n                            pageTitle: 'YoloTitle'\n                        }\n                    } as {\n                        type: 'Event';\n                        data: EventHit;\n                    };\n                    fsHit.send(mockHit);\n                }}\n            >\n                Send a item hit\n            </Button>\n        )\n    };\n    const [currentTestedHit, setHitToTest] = React.useState<{\n        simpleCodeString: string;\n        simpleComponent: React.ReactNode;\n    }>(transactionHitBundle);\n    return (\n        <>\n            <div className=\"mb3\">\n                If you're not familiar with the payload that you should a provide to the hit you want to send, you'll\n                have all details available in the{' '}\n                <a href=\"https://github.com/abtasty/flagship-react-sdk#shape-of-possible-hits-to-send\">\n                    SDK Hit documentation\n                </a>\n                .\n            </div>\n            <div>\n                <b>NOTE:</b>\n                <p>\n                    It is not necessary to provide parameters to <i>useFlagship</i> if your purpose is only to send\n                    hits.\n                </p>\n                <CodeBlock\n                    className=\"mv3\"\n                    codeString={`import { useFlagship } from '@flagship.io/react-sdk';\nconst { hit: fsHit } = useFlagship();`}\n                />\n            </div>\n            <p>Send a hit, demo: </p>\n            <Nav variant=\"tabs\" defaultActiveKey=\"hitTransaction\">\n                <Nav.Item>\n                    <Nav.Link eventKey=\"hitTransaction\" onClick={() => setHitToTest(transactionHitBundle)}>\n                        Transaction Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"hitScreen\" onClick={() => setHitToTest(screenHitBundle)}>\n                        Screen Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"hitEvent\" onClick={() => setHitToTest(eventHitBundle)}>\n                        Event Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"hitItem\" onClick={() => setHitToTest(itemHitBundle)}>\n                        Item Hit\n                    </Nav.Link>\n                </Nav.Item>\n            </Nav>\n            <CodeBlock className=\"mv3\" codeString={currentTestedHit.simpleCodeString} />\n            <div>{currentTestedHit.simpleComponent}</div>\n            <div className=\"mt3\">Send multiple mixed hit, demo: </div>\n            <CodeBlock className=\"mv3\" codeString={multipleHitBundle.multipleCodeString} />\n            <div>{multipleHitBundle.multipleComponent}</div>\n        </>\n    );\n};\n\nexport default PlayWithHits;\n","import React from 'react';\n\nimport CodeBlock from '../../../../../../common/CodeBlock';\n\nconst PlayWithModificationInfo: React.FC = () => {\n    return (\n        <>\n            <div className=\"mv3\">This function provides all the data needed to send it to a third party tool.</div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`const { getModificationInfo } = useFlagship();\nreturn (\n    <Button\n        onClick={getModificationInfo('color')\n            .then((response) => {\n                // when succeed\n            })\n            .catch((error) => {\n                // when fail\n            })}\n    >\n        Apply change\n    </Button>\n);`}\n            />\n        </>\n    );\n};\n\nexport default PlayWithModificationInfo;\n","import React from 'react';\nimport { useFlagship } from '@flagship.io/react-sdk';\nimport CodeBlock from '../../../../../../common/CodeBlock';\nimport { Button } from 'react-bootstrap';\n\nconst PlayWithModifications: React.FC = () => {\n    const fsParams = {\n        modifications: {\n            requested: [\n                {\n                    key: 'color',\n                    defaultValue: '#FF33E3',\n                    activate: false\n                }\n            ]\n        }\n    };\n    const output = useFlagship(fsParams);\n    const { modifications: fsModifications } = output;\n    return (\n        <>\n            <p>demo: </p>\n            <div>\n                <Button\n                    variant=\"secondary\"\n                    style={{\n                        backgroundColor: fsModifications.color as string\n                    }}\n                >\n                    {`I'm a button customized with Flagship (backgroundColor=${fsModifications.color})`}\n                </Button>\n            </div>\n            <div className=\"mv3\">\n                Based on the campaign that we set on Flagship platform, the color of the button will change depending\n                values set in the <a href=\"#playWithVisitorContext\">visitor context</a>.\n            </div>\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`<Button\n    variant=\"secondary\"\n    style={{\n        backgroundColor: fsModifications.color\n    }}\n>\n    {\\`I'm a button customized with Flagship (backgroundColor=\\${fsModifications.color})\\`}\n</Button>`}\n            />\n        </>\n    );\n};\n\nexport default PlayWithModifications;\n","import React from 'react';\nimport { useFlagship } from '@flagship.io/react-sdk';\nimport { Button, Form, Col, Nav } from 'react-bootstrap';\nimport { Formik } from 'formik';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport { HitShape } from '@flagship.io/js-sdk';\n\nconst PlayWithHits: React.FC = () => {\n    const defaultTransactionHitPayload = {\n        type: 'Transaction',\n        data: {\n            transactionId: '12451342423',\n            affiliation: 'yoloAffiliation',\n            totalRevenue: 999,\n            shippingCost: 888,\n            shippingMethod: 'yoloShippingMethod',\n            currency: 'yoloCurrency',\n            taxes: 1234444,\n            paymentMethod: 'yoloPaymentMethod',\n            itemCount: 2,\n            couponCode: 'YOLOCOUPON',\n            documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloScreen'\n        }\n    };\n    const defaultScreenHitPayload = {\n        type: 'Screen',\n        data: {\n            documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloScreen'\n        }\n    };\n    const defaultEventHitPayload = {\n        type: 'Event',\n        data: {\n            category: 'User Engagement',\n            action: 'signOff',\n            label: 'yolo label ;)',\n            value: 123,\n            documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloTitle'\n        }\n    };\n    const defaultItemHitPayload = {\n        type: 'Item',\n        data: {\n            transactionId: '12451342423',\n            name: 'yoloItem',\n            price: 999,\n            code: 'yoloCode',\n            category: 'yoloCategory',\n            quantity: 1234444,\n            documentLocation: 'http%3A%2F%2Fabtastylab.com%2F60511af14f5e48764b83d36ddb8ece5a%2F',\n            pageTitle: 'YoloScreen'\n        }\n    };\n    const payloads = {\n        transaction: defaultTransactionHitPayload,\n        screen: defaultScreenHitPayload,\n        event: defaultEventHitPayload,\n        item: defaultItemHitPayload\n    };\n    const [hasError, setError] = React.useState(false);\n    const [hasError2, setError2] = React.useState(false);\n    const [currentTestedHit, setHitToTest] = React.useState<string>('transaction');\n    const [hitPayload, setHitPayload] = React.useState(payloads[currentTestedHit]);\n\n    const [hitsPayload, setHitsPayload] = React.useState([\n        { ...payloads.transaction },\n        { ...payloads.screen },\n        { ...payloads.event },\n        { ...payloads.item }\n    ]);\n    const update = () => {\n        setHitPayload(payloads[currentTestedHit]);\n    };\n    React.useEffect(update, [currentTestedHit]);\n    const { hit: fsHit } = useFlagship();\n    return (\n        <>\n            <p>Send a hit, demo: </p>\n            <Nav variant=\"tabs\" defaultActiveKey=\"hitTransaction\">\n                <Nav.Item>\n                    <Nav.Link eventKey=\"hitTransaction\" onClick={() => setHitToTest('transaction')}>\n                        Transaction Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"hitScreen\" onClick={() => setHitToTest('screen')}>\n                        Screen Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"hitEvent\" onClick={() => setHitToTest('event')}>\n                        Event Hit\n                    </Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                    <Nav.Link eventKey=\"hitItem\" onClick={() => setHitToTest('item')}>\n                        Item Hit\n                    </Nav.Link>\n                </Nav.Item>\n            </Nav>\n            <Formik\n                enableReinitialize={true}\n                initialValues={{\n                    hitPayload\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.hitPayload) {\n                        errors.hitPayload = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setHitPayload({ ...values.hitPayload });\n                    fsHit.send({ ...values.hitPayload });\n                }}\n            >\n                {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, isValid, errors }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>{currentTestedHit} hit payload</Form.Label>\n                            <JSONInput\n                                waitAfterKeyPress={3000}\n                                id=\"hitPayload\"\n                                placeholder={values.hitPayload}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue('hitPayload', jsObject || {}, true);\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Send hit\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"mv3\">Have a look to logs + network on your browser inspect tools to see results.</div>\n            <Formik\n                initialValues={{\n                    hitsPayload\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.hitsPayload) {\n                        errors.hitsPayload = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setHitsPayload([...values.hitsPayload]);\n                    fsHit.sendMultiple([...values.hitsPayload] as HitShape[]);\n                }}\n            >\n                {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, isValid, errors }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>sendMultiple argument</Form.Label>\n                            <JSONInput\n                                waitAfterKeyPress={3000}\n                                id=\"hitsPayload\"\n                                placeholder={values.hitsPayload}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue('hitsPayload', jsObject || {}, true);\n                                        setError2(false);\n                                    } else {\n                                        setError2(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError2}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError2 ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Send multiple hits\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n        </>\n    );\n};\n\nexport default PlayWithHits;\n","import { useFlagship } from '@flagship.io/react-sdk';\nimport { Formik } from 'formik';\nimport React from 'react';\nimport { Button, Col, Form } from 'react-bootstrap';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport { NotificationManager } from 'react-notifications';\n\nconst PlayWithModificationInfo: React.FC = () => {\n    const [hasError, setError] = React.useState(false);\n    const [fsParams, setFsParams] = React.useState('color');\n    const [fsOutput, setFsOutput] = React.useState<any>({ data: null, loading: false, noCall: true });\n    const { getModificationInfo } = useFlagship();\n\n    const handleDisplay = () => {\n        if (fsOutput.data === null) {\n            return fsOutput.noCall\n                ? 'Please click \"Apply change\"to see the result.'\n                : 'getModificationInfo returned \"null\"';\n        } else {\n            if (fsOutput.loading) {\n                return 'Loading...';\n            }\n            return (\n                <JSONInput\n                    waitAfterKeyPress={3000}\n                    id=\"fsGetModificationOutput\"\n                    placeholder={fsOutput.data}\n                    locale={locale}\n                    height=\"550px\"\n                    viewOnly={true}\n                    width=\"100%\"\n                    style={{\n                        body: {\n                            fontSize: '16px'\n                        }\n                    }}\n                />\n            );\n        }\n    };\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    fsParams\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setFsOutput({ data: {}, loading: true });\n                    setFsParams(values.fsParams);\n                    if (getModificationInfo) {\n                        getModificationInfo(values.fsParams)\n                            .then((response) => {\n                                setFsOutput({ data: response, loading: false });\n                                NotificationManager.info('getModificationInfo succeed');\n                            })\n                            .catch((e) => {\n                                setFsOutput({ data: { error: e.message }, loading: false });\n                                NotificationManager.error('getModificationInfo failed with ' + e.stack);\n                                setError(true);\n                            });\n                    } else {\n                        // nothing\n                    }\n                }}\n            >\n                {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, isValid, errors }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"modificationInfoKey\">\n                            <Form.Label>Modification key</Form.Label>\n                            <Form.Control\n                                type=\"text\"\n                                name=\"fsParams\"\n                                value={values.fsParams}\n                                onChange={handleChange}\n                                isValid={touched.fsParams && !errors.fsParams}\n                                isInvalid={!!errors.fsParams}\n                            />\n                            <Form.Control.Feedback type=\"invalid\">{errors.fsParams}</Form.Control.Feedback>\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Apply change\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"mv3 b\">getModificationInfo output:</div>\n            <div className=\"mb3\">{handleDisplay()}</div>\n        </>\n    );\n};\n\nexport default PlayWithModificationInfo;\n","import { useFlagship } from '@flagship.io/react-sdk';\nimport { Formik } from 'formik';\nimport React from 'react';\nimport { Button, Col, Form } from 'react-bootstrap';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\n\nconst PlayWithModifications: React.FC = () => {\n    const [hasError, setError] = React.useState(false);\n    const [fsParams, setFsParams] = React.useState({\n        modifications: {\n            requested: [\n                {\n                    key: 'btnColor',\n                    defaultValue: '#FF33E3',\n                    activate: false\n                }\n            ]\n        }\n    });\n    const output = useFlagship(fsParams);\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    fsParams\n                }}\n                validate={(values) => {\n                    const errors: any = {};\n                    if (!values.fsParams) {\n                        errors.fsParams = 'Required';\n                    }\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting }) => {\n                    setSubmitting(false);\n                    setFsParams({ ...values.fsParams });\n                }}\n            >\n                {({ handleSubmit, handleChange, handleBlur, setFieldValue, values, touched, isValid, errors }) => (\n                    <Form noValidate onSubmit={handleSubmit}>\n                        <Form.Group as={Col} md=\"12\" controlId=\"settingsForm\">\n                            <Form.Label>useFlagship arguments</Form.Label>\n                            <JSONInput\n                                waitAfterKeyPress={3000}\n                                id=\"fsParams\"\n                                placeholder={values.fsParams}\n                                locale={locale}\n                                height=\"550px\"\n                                width=\"100%\"\n                                onChange={({ error, jsObject }) => {\n                                    if (!error) {\n                                        setFieldValue('fsParams', jsObject || {}, true);\n                                        setError(false);\n                                    } else {\n                                        setError(true);\n                                    }\n                                }}\n                                style={{\n                                    body: {\n                                        fontSize: '16px'\n                                    }\n                                }}\n                            />\n                        </Form.Group>\n                        <div className=\"flex justify-end ph3\">\n                            <Button\n                                disabled={hasError}\n                                variant=\"secondary\"\n                                type=\"submit\"\n                                style={{\n                                    cursor: hasError ? 'not-allowed' : 'pointer'\n                                }}\n                            >\n                                Apply change\n                            </Button>\n                        </div>\n                    </Form>\n                )}\n            </Formik>\n            <div className=\"mv3 b\">useFlagship output:</div>\n            <div className=\"mb3\">\n                <JSONInput\n                    waitAfterKeyPress={3000}\n                    id=\"fsIutput\"\n                    placeholder={Object.keys(output).reduce(\n                        (reducer, key) => ({\n                            ...reducer,\n                            [key]: typeof output[key] === 'function' ? '**** defined function ****' : output[key]\n                        }),\n                        {}\n                    )}\n                    locale={locale}\n                    height=\"550px\"\n                    viewOnly={true}\n                    width=\"100%\"\n                    style={{\n                        body: {\n                            fontSize: '16px'\n                        }\n                    }}\n                />\n            </div>\n        </>\n    );\n};\n\nexport default PlayWithModifications;\n","import React from 'react';\n\nimport CodeBlock from '../../../../../../common/CodeBlock';\n\nconst PlayWithStartAndStopBucketing: React.FC = () => {\n    return (\n        <>\n            <div className=\"mv3\">\n                This function allow to start the bucketing polling (when \"fetchNow\" is set to \"false\") and stop the\n                bucketing when desired.\n            </div>\n\n            <CodeBlock\n                className=\"mv3\"\n                codeString={`const { startBucketingPolling, stopBucketingPolling } = useFlagship();\nreturn (\n    <Button\n        onClick={() => startBucketingPolling()}\n    >\n        Start the bucketing\n    </Button>\n    <Button\n        onClick={() => stopBucketingPolling()}\n    >\n        Stop the bucketing\n    </Button>\n);`}\n            />\n        </>\n    );\n};\n\nexport default PlayWithStartAndStopBucketing;\n","import React from 'react';\nimport { AppSettings, SettingContext } from '../../../../../../../App';\nimport { Alert, Button } from 'react-bootstrap';\nimport { useFlagship } from '@flagship.io/react-sdk';\nimport { NotificationManager } from 'react-notifications';\n\nconst PlayWithStartAndStopBucketingQA: React.FC = () => {\n    const { currentSettings /*, setSettings, QA */ } = React.useContext(SettingContext) as AppSettings;\n    const { startBucketingPolling, stopBucketingPolling } = useFlagship();\n    return (\n        <>\n            {currentSettings.decisionMode !== 'Bucketing' && (\n                <div className=\"mv3\">\n                    <Alert variant=\"warning\">\n                        <b>NOTE:</b> You are NOT in bucketing mode. To do so, go to the{' '}\n                        <a href=\"#playWithConfig\">SDK settings</a>.\n                    </Alert>\n                </div>\n            )}\n            <div\n                style={{\n                    display: 'flex',\n                    justifyContent: 'space-around'\n                }}\n            >\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => {\n                        const result = startBucketingPolling();\n                        if (result.success) {\n                            NotificationManager.info('Bucketing started');\n                        } else {\n                            NotificationManager.error('Bucketing cannot start with error: \\n' + result.reason);\n                        }\n                    }}\n                >\n                    Start the bucketing\n                </Button>\n                <Button\n                    variant=\"secondary\"\n                    onClick={() => {\n                        const result = stopBucketingPolling();\n                        if (result.success) {\n                            NotificationManager.info('Bucketing stopped');\n                        } else {\n                            NotificationManager.error('Bucketing cannot start with error: \\n' + result.reason);\n                        }\n                    }}\n                >\n                    Stop the bucketing\n                </Button>\n            </div>\n        </>\n    );\n};\n\nexport default PlayWithStartAndStopBucketingQA;\n","import { useFlagship } from '@flagship.io/react-sdk';\nimport React, { useContext } from 'react';\nimport { Alert, Col, Row } from 'react-bootstrap';\n\nimport { AppSettings, SettingContext } from '../../../../App';\nimport CodeBlock from '../../../common/CodeBlock';\nimport PlayWithHits from './components/normal/PlayWithHits';\nimport PlayWithModificationInfo from './components/normal/PlayWithModificationInfo';\nimport PlayWithModifications from './components/normal/PlayWithModifications';\nimport PlayWithHitsQA from './components/qa/PlayWithHits';\nimport PlayWithModificationInfoQA from './components/qa/PlayWithModificationInfo';\nimport PlayWithModificationsQA from './components/qa/PlayWithModifications';\nimport PlayWithStartAndStopBucketing from './components/normal/PlayWithStartAndStopBucketing';\nimport PlayWithStartAndStopBucketingQA from './components/qa/PlayWithStartAndStopBucketing';\n\nexport const DemoUseFlagship = () => {\n    const { status: fsStatus } = useFlagship();\n    const demoHookName = 'useFlagship';\n    const { QA } = useContext(SettingContext) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id={demoHookName} />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    <p>\n                        Use <b>{demoHookName}</b> hook to get access to further stuff such as <i>modifications</i>,{' '}\n                        <i>sdk status</i>, <i>hits</i> :\n                    </p>\n                    <CodeBlock\n                        className=\"mv3\"\n                        codeString={`import { useFlagship } from '@flagship.io/react-sdk';\nconst fsParams = {\n    modifications: {\n        requested: [\n            {\n                key: 'btnColor',\n                defaultValue: '#FF33E3', // pink\n                activate: false\n            }\n        ]\n    }\n}\nconst {\n    modifications: fsModifications,\n    status: fsStatus,\n    hit: fsHit,\n} = useFlagship(fsParams);`}\n                    />\n                    <h3>\n                        1 - Playing with <i>fsModifications</i>\n                    </h3>\n                    {QA.enabled ? (\n                        <PlayWithModificationsQA></PlayWithModificationsQA>\n                    ) : (\n                        <PlayWithModifications></PlayWithModifications>\n                    )}\n                    <h3>\n                        2 - Reading <i>fsStatus</i>\n                    </h3>\n\n                    <p>It gives you some information about the current status of the SDK:</p>\n                    <CodeBlock\n                        className=\"mv3\"\n                        codeString={`\nfsStatus=${JSON.stringify(fsStatus, null, 2)};\n                        `}\n                    />\n                    <div className=\"fsAnchor\" id=\"sendHits\"></div>\n                    <h3>\n                        3 - Playing with <i>hits</i>\n                    </h3>\n                    {QA.enabled ? <PlayWithHitsQA></PlayWithHitsQA> : <PlayWithHits></PlayWithHits>}\n                    <div className=\"fsAnchor\" id=\"getModificationInfos\"></div>\n                    <h3 className=\"mt3\">\n                        4 - Get modification <i>informations</i>\n                    </h3>\n                    {!QA.enabled && <PlayWithModificationInfo></PlayWithModificationInfo>}\n                    <PlayWithModificationInfoQA></PlayWithModificationInfoQA>\n                    <div className=\"fsAnchor\" id=\"startOrStopBucketing\"></div>\n                    <h3 className=\"mt3\">\n                        5 - Start or stop <i>bucketing polling</i>\n                    </h3>\n                    {!QA.enabled && <PlayWithStartAndStopBucketing></PlayWithStartAndStopBucketing>}\n                    <PlayWithStartAndStopBucketingQA></PlayWithStartAndStopBucketingQA>\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React, { useContext } from 'react';\nimport { Alert, Col, Row, Button } from 'react-bootstrap';\nimport { SettingContext, AppSettings } from '../../../../App';\n\nexport const DemoErrorBoundary = () => {\n    const demoHookName = 'Safe Mode';\n    const [triggerError, setTriggerError] = React.useState(false);\n    React.useEffect(() => {\n        if (triggerError) {\n            throw new Error('Flagship - Creating an error just for test...');\n        }\n        setTriggerError(false);\n    }, [triggerError]);\n\n    const { currentSettings /*, setSettings, QA */ } = useContext(SettingContext) as AppSettings;\n    return (\n        <Row>\n            <Col>\n                <div className=\"fsAnchor\" id=\"safeMode\" />\n                <Alert variant=\"dark\" className=\"fs-alert demoHook\">\n                    <Alert.Heading>{demoHookName}</Alert.Heading>\n                    <p>\n                        When an error occurs unexpectedly, the React SDK switch automatically into <b>{demoHookName}</b>\n                        . Thus, default value of modifications will always be returned. Moreover, other features will\n                        just log an error without crash.\n                    </p>\n                    <div>\n                        <Button\n                            variant=\"secondary\"\n                            onClick={() => {\n                                setTriggerError(true);\n                            }}\n                        >\n                            Throw an error\n                        </Button>\n                        {currentSettings.nodeEnv === 'production' && (\n                            <div className=\"mv3\">\n                                <Alert variant=\"warning\">\n                                    <b>NOTE:</b> You might not see the banner because you are in 'production'\n                                    environment. You need to change value of <i>nodeEnv</i> in{' '}\n                                    <a href=\"#playWithConfig\">SDK settings</a>.\n                                </Alert>\n                            </div>\n                        )}\n                        {!currentSettings.enableErrorLayout && (\n                            <div className=\"mv3\">\n                                <Alert variant=\"warning\">\n                                    <b>NOTE:</b> You CAN'T see the banner because the setting <i>enableErrorLayout</i>{' '}\n                                    is disabled, you need to change the value in{' '}\n                                    <a href=\"#playWithConfig\">SDK settings</a>.\n                                </Alert>\n                            </div>\n                        )}\n                    </div>\n                </Alert>\n            </Col>\n        </Row>\n    );\n};\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nimport { DemoInitialization } from './components/DemoInitialization';\nimport { DemoUseFsActivate } from './components/DemoUseFsActivate';\nimport { DemoUseFsModifications } from './components/DemoUseFsModifications';\nimport { DemoUseFsSynchronize } from './components/DemoUseFsSynchronize';\nimport { DemoUseFlagship } from './components/DemoUseFlagship';\nimport { DemoErrorBoundary } from './components/DemoErrorBoundary';\n\nexport const AppContainer: React.FC = () => {\n    return (\n        <Container className=\"mt3\">\n            <DemoInitialization />\n            <DemoUseFlagship />\n            <DemoUseFsModifications />\n            <DemoUseFsActivate />\n            <DemoUseFsSynchronize />\n            <DemoErrorBoundary />\n        </Container>\n    );\n};\n","import React, { useContext } from 'react';\nimport { Navbar, Nav, Form, NavDropdown } from 'react-bootstrap';\nimport Logo from '../../assets/Flagship-horizontal-product-white.png';\nimport { AppSettings, SettingContext } from '../../App';\n\nconst AppHeader: React.FC = () => {\n    const { QA, setQA } = useContext(SettingContext) as AppSettings;\n    const okEmoji = '✅';\n    return (\n        <>\n            <Navbar className=\"fsNavbar\" fixed=\"top\">\n                <Navbar.Brand href=\"https://github.com/abtasty/flagship-react-sdk\" className=\"flex item-center\">\n                    <img alt=\"Logo Flagship\" src={Logo} className=\"d-inline-block align-top logoAdjust\" />\n                    React SDK (Dev demo)\n                </Navbar.Brand>\n                <Nav className=\"mr-auto fsNav\">\n                    <Nav.Link href=\"#initialization\">Initialization</Nav.Link>\n                    <NavDropdown title=\"Hooks\" id=\"nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"4.0\" href=\"#useFlagship\">\n                            useFlagship\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.1\" href=\"#useFsModifications\">\n                            useFsModifications\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.2\" href=\"#useFsActivate\">\n                            useFsActivate\n                        </NavDropdown.Item>\n                    </NavDropdown>\n                    <NavDropdown title=\"Features\" id=\"nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"4.0\" href=\"#useFlagship\">\n                            Get modification(s)\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.5\" href=\"#getModificationInfos\">\n                            Get modification Informations\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.6\" href=\"#startOrStopBucketing\">\n                            Start or stop manually bucketing polling\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.1\" href=\"#useFsActivate\">\n                            Activate modification(s)\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.2\" href=\"#sendHits\">\n                            Send Hit(s)\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.3\" href=\"#campaignsSynchronization\">\n                            Campaign synchronization\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"4.4\" href=\"#safeMode\">\n                            Safe Mode\n                        </NavDropdown.Item>\n                    </NavDropdown>\n                </Nav>\n\n                <Form inline>\n                    <NavDropdown title=\"QA mode\" id=\"nav-dropdown\">\n                        <NavDropdown.Item eventKey=\"10.0\" onClick={() => setQA({ ...QA, enabled: true })}>\n                            ON {QA.enabled && okEmoji}\n                        </NavDropdown.Item>\n                        <NavDropdown.Item eventKey=\"10.1\" onClick={() => setQA({ ...QA, enabled: false })}>\n                            OFF {!QA.enabled && okEmoji}\n                        </NavDropdown.Item>\n                    </NavDropdown>\n                    <Nav.Link href=\"https://github.com/abtasty/flagship-react-sdk\">Github</Nav.Link>\n                    <Nav.Link href=\"https://www.abtasty.com/solutions-product-teams/\">What is Flagship ?</Nav.Link>\n                </Form>\n            </Navbar>\n        </>\n    );\n};\nexport default AppHeader;\n","import React from 'react';\nimport { Modal } from 'react-bootstrap';\n\ndeclare type Props = {\n    onHide(): void;\n    show: boolean;\n};\n\nconst SettingsModal: React.FC<Props> = ({ onHide, show }) => {\n    return (\n        <>\n            <Modal size=\"lg\" show={show} onHide={onHide} aria-labelledby=\"example-modal-sizes-title-lg\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"example-modal-sizes-title-lg\">Edit SDK settings:</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>...</Modal.Body>\n            </Modal>\n        </>\n    );\n};\nexport default SettingsModal;\n","import React, { useContext } from 'react';\nimport { Form, Nav, Navbar } from 'react-bootstrap';\n\nimport { AppSettings, SettingContext } from '../../App';\nimport SettingsModal from './components/SettingsModal';\n\nconst QaHeader: React.FC = () => {\n    const { QA, setQA } = useContext(SettingContext) as AppSettings;\n    if (!QA.enabled) {\n        return null;\n    }\n    return (\n        <>\n            <Navbar className=\"fsNavbar qaHeader\" fixed=\"top\">\n                <Navbar.Brand href=\"#\" className=\"flex item-center\">\n                    QA Mode: <span className=\"green\">Enabled</span>\n                </Navbar.Brand>\n                <Nav className=\"mr-auto fsNav\">\n                    {/* <Nav.Link\n                        onClick={() =>\n                            setQA({\n                                ...QA,\n                                show: { ...QA.show, settingsModal: true }\n                            })\n                        }\n                    >\n                        Edit settings\n                    </Nav.Link> */}\n                </Nav>\n\n                <Form inline>\n                    <Nav.Link onClick={() => setQA({ ...QA, enabled: false })}>Switch off</Nav.Link>\n                </Form>\n            </Navbar>\n            <SettingsModal\n                onHide={() => setQA({ ...QA, show: { ...QA.show, settingsModal: false } })}\n                show={QA.show.settingsModal}\n            ></SettingsModal>\n        </>\n    );\n};\nexport default QaHeader;\n","import './App.css';\n\nimport { FlagshipProvider, FlagshipReactSdkConfig } from '@flagship.io/react-sdk';\nimport React, { createContext, Dispatch, SetStateAction } from 'react';\nimport { Col, Container, Row } from 'react-bootstrap';\nimport { NotificationContainer, NotificationManager } from 'react-notifications';\n\nimport { AppContainer } from './components/AppContainer';\nimport config from './config';\nimport AppHeader from './components/AppHeader';\nimport QaHeader from './components/QaHeader';\ninterface VisitorContext {\n    [key: string]: any;\n}\nexport interface SdkSettings extends FlagshipReactSdkConfig {\n    envId: string;\n    nodeEnv?: string;\n    enableSafeMode?: boolean;\n    enableErrorLayout?: boolean;\n    flagshipApi?: string;\n    apiKey: string | null;\n    visitorData: {\n        id: string;\n        context: VisitorContext;\n    };\n}\nexport interface AppSettings {\n    currentSettings: SdkSettings;\n    setSettings: Dispatch<SetStateAction<SdkSettings>>;\n    QA: QA;\n    setQA: Dispatch<SetStateAction<QA>>;\n}\n\nexport interface QA {\n    enabled: boolean;\n    show: {\n        settingsModal: boolean;\n    };\n}\n\nexport const SettingContext = createContext<AppSettings | null>(null);\n\nconst App: React.FC = () => {\n    const [currentSettings, setSettings] = React.useState<SdkSettings>({\n        envId: config.envId,\n        fetchNow: config.fetchNow,\n        decisionMode: config.decisionMode as 'API',\n        pollingInterval: config.pollingInterval,\n        enableConsoleLogs: config.enableConsoleLogs,\n        enableErrorLayout: config.enableErrorLayout,\n        timeout: config.timeout,\n        flagshipApi: config.flagshipApi,\n        apiKey: config.apiKey,\n        nodeEnv: 'production',\n        visitorData: { ...config.visitorData }\n    });\n    const [QA, setQA] = React.useState<QA>({\n        enabled: false,\n        show: {\n            settingsModal: false\n        }\n    });\n    return (\n        <>\n            <SettingContext.Provider value={{ currentSettings, setSettings, QA, setQA }}>\n                <FlagshipProvider\n                    envId={currentSettings.envId}\n                    fetchNow={currentSettings.fetchNow}\n                    enableConsoleLogs={currentSettings.enableConsoleLogs}\n                    enableErrorLayout={currentSettings.enableErrorLayout}\n                    pollingInterval={currentSettings.pollingInterval}\n                    flagshipApi={currentSettings.flagshipApi}\n                    apiKey={currentSettings.apiKey}\n                    timeout={currentSettings.timeout}\n                    decisionMode={currentSettings.decisionMode}\n                    enableSafeMode={true}\n                    nodeEnv={currentSettings.nodeEnv}\n                    visitorData={currentSettings.visitorData}\n                    onInitStart={() => {\n                        console.log('onInitStart - triggered');\n                    }}\n                    onInitDone={() => {\n                        console.log('onInitDone - triggered');\n                    }}\n                    onUpdate={({ fsModifications }) => {\n                        console.log('onUpdate - triggered');\n                    }}\n                    onBucketingSuccess={({ status }) => {\n                        if (status === '200') {\n                            NotificationManager.info('Bucketing has been updated (status = 200)');\n                        }\n                    }}\n                    loadingComponent={\n                        <Container className=\"mt5\">\n                            <Row>\n                                <Col\n                                    xs={12}\n                                    style={{\n                                        color: 'white',\n                                        height: '100vh',\n                                        fontSize: '5vw'\n                                    }}\n                                >\n                                    Loading Flagship React SDK...\n                                </Col>\n                            </Row>\n                        </Container>\n                    }\n                >\n                    <NotificationContainer />\n                    <AppHeader />\n                    <QaHeader />\n                    <AppContainer />\n                </FlagshipProvider>\n            </SettingContext.Provider>\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-notifications/lib/notifications.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Flagship-horizontal-product-white.6e8b90f3.png\";"],"sourceRoot":""}